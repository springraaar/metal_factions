#define TA			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"

piece  base, front, hull, bottom, h2,turret, sleeve, barrels, flash, l1,l2,l3, l12,l22,l32, wake1, wake2, h3,h4,h5,dish, holder;

static-var  statechg_DesiredState, statechg_StateChanging, gun_1;

// Signal definitions
#define SIG_MOVE			2
#define SIG_AIM				4


SmokeUnit(healthpercent, sleeptime, smoketype)
{
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 400;
	}
	while( TRUE )
	{
		healthpercent = get HEALTH;
		if( healthpercent < 66 )
		{
			smoketype = 256 | 2;
			if( Rand( 1, 66 ) < healthpercent )
			{
				smoketype = 256 | 1;
			}
			emit-sfx smoketype from base;
		}
		sleeptime = healthpercent * 50;
		if( sleeptime < 200 )
		{
			sleeptime = 200;
		}
		sleep sleeptime;
	}
	return (0);
}


Go()
{
	spin dish around y-axis speed <30.005495>;
	return (0);
}

Stop()
{
	spin dish around y-axis speed <0.000000>;
	return (0);
}

InitState()
{
	statechg_DesiredState = TRUE;
	statechg_StateChanging = FALSE;
	return (0);
}

RequestState(requestedstate, currentstate)
{
	if( statechg_StateChanging )
	{
		statechg_DesiredState = requestedstate;
		return (0);
	}
	statechg_StateChanging = TRUE;
	currentstate = statechg_DesiredState;
	statechg_DesiredState = requestedstate;
	while( statechg_DesiredState != currentstate )
	{
		if( statechg_DesiredState == 0 )
		{
			call-script Go();
			currentstate = 0;
		}
		if( statechg_DesiredState == 1 )
		{
			call-script Stop();
			currentstate = 1;
		}
	}
	statechg_StateChanging = FALSE;
	return (0);
}

Create()
{
	gun_1=[0];
	call-script InitState();
	start-script SmokeUnit();
	return (0);
}


Activate()
{
	start-script RequestState(0);
	return (0);
}

Deactivate()
{
	start-script RequestState(1);
	return (0);
}

RestoreAfterDelay()
{
	sleep DEFAULT_WEAPON_RESTORE_DELAY;
	turn turret to y-axis <0.000000> speed <150.000000>;
	turn sleeve to x-axis <0.000000> speed <150.000000>;
	return (0);
}


StartMoving()
{
	signal SIG_MOVE;
	set-signal-mask SIG_MOVE;
	while( TRUE )
	{
		emit-sfx 2 from wake1;
		emit-sfx 2 from wake2;
		sleep 450;
	}
	return (0);
}

StopMoving()
{
	signal SIG_MOVE;
	return (0);
}

AimPrimary(heading, pitch)
{
	signal SIG_AIM;
	set-signal-mask SIG_AIM;
	turn turret to y-axis heading speed <140.000000>;
	turn sleeve to x-axis <0.000000> - pitch speed <150.000000>;
	wait-for-turn turret around y-axis;
	wait-for-turn sleeve around x-axis;
	start-script RestoreAfterDelay();
	return (1);
}


Shot1()
{
	emit-sfx 1024 + 0 from flash;
	sleep 10;
	
	// turn barrel to next position
	if( gun_1 == [0] )
	{
		sleep 10;
		turn barrels to z-axis <60.000000> speed <1200.000000>;
		gun_1 = [1];
		return (0);
	}
	if( gun_1 == [1] )
	{
		sleep 10;
		turn barrels to z-axis <120.000000> speed <1200.000000>;
		gun_1 = [2];
		return (0);
	}
	if( gun_1 == [2] )
	{
		sleep 10;
		turn barrels to z-axis <180.000000> speed <1200.000000>;
		gun_1 = [3];
		return (0);
	}
	if( gun_1 == [3] )
	{
		sleep 10;
		turn barrels to z-axis <240.000000> speed <1200.000000>;
		gun_1 = [4];
		return (0);
	}
	if( gun_1 == [4] )
	{
		sleep 10;
		turn barrels to z-axis <300.000000> speed <1200.000000>;
		gun_1 = [5];
		return (0);
	}
		if( gun_1 == [5] )
	{
		sleep 10;
		turn barrels to z-axis <360.000000> speed <1200.000000>;
		gun_1 = [0];
		return (0);
	}
			
}

AimFromPrimary(piecenum)
{
	piecenum = turret;
	return (0);
}

QueryPrimary(piecenum)
{
	piecenum = flash;
	return (0);
}

Killed(severity, corpsetype)
{
	if( severity <= 50 )
	{
		explode sleeve type SHATTER;
		explode barrels type SHATTER;
		return (1);
	}
	explode hull type SHATTER;
	explode bottom type SHATTER;
	explode turret type SHATTER;
	explode h2 type SHATTER;
	explode sleeve type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP5;
	explode barrels type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP5;
	return (2);
}
