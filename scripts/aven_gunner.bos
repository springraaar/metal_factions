#define TA			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"

piece  base, flare, gun, turret, barrel,g2, floatbase, fb2;

static-var  isFloating;

// Signal definitions
#define SIG_AIM				2


SmokeUnit(healthpercent, sleeptime, smoketype)
{
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 400;
	}
	while( TRUE )
	{
		healthpercent = get HEALTH;
		if( healthpercent < 66 )
		{
			smoketype = 256 | 2;
			if( Rand( 1, 66 ) < healthpercent )
			{
				smoketype = 256 | 1;
			}
			emit-sfx smoketype from base;
		}
		sleeptime = healthpercent * 50;
		if( sleeptime < 200 )
		{
			sleeptime = 200;
		}
		sleep sleeptime;
	}
	return (0);
}


RestoreAfterDelay()
{
	sleep DEFAULT_WEAPON_RESTORE_DELAY;
	turn turret to y-axis <0> speed <50.016484>;
	turn gun to x-axis <0.000000> speed <50.005495>;
	return (0);
}

Create()
{
	hide floatbase;
	hide fb2;
	isFloating = FALSE;
	if ( GET GROUND_WATER_HEIGHT(GET UNIT_XZ) < 0)
	{
		isFloating = TRUE;
		show floatbase;
		show fb2;
	}

	start-script SmokeUnit();
	return (0);
}

RockUnit(anglex, anglez)
{
	if (isFloating)
	{
		turn base to x-axis anglex speed <40.005495>;
		turn base to z-axis <0>-anglez speed <40.005495>;
		wait-for-turn base around z-axis;
		wait-for-turn base around x-axis;
		turn base to z-axis <0.000000> speed <10.000000>;
		turn base to x-axis <0.000000> speed <10.000000>;
	}
}


AimPrimary(heading, pitch)
{
	signal SIG_AIM;
	set-signal-mask SIG_AIM;

	turn turret to y-axis heading speed <100.016484>;
	turn gun to x-axis <0.000000> - pitch speed <50.005495>;
	wait-for-turn turret around y-axis;
	wait-for-turn gun around x-axis;
	start-script RestoreAfterDelay();
	return (1);
}

FirePrimary()
{
	move barrel to z-axis [-10.500000] now;
	emit-sfx 1024 + 0 from flare;
	sleep 250;
	move barrel to z-axis [0.000000] speed [7.500000];
	return (0);
}

AimFromPrimary(piecenum)
{
	piecenum = gun;
	return (0);
}

QueryPrimary(piecenum)
{
	piecenum = flare;
	return (0);
}

SweetSpot(piecenum)
{
	piecenum = base;
	return (0);
}

Killed(severity, corpsetype)
{
	hide flare;
	if( severity <= 50 )
	{
		if (isFloating) 
		{
			corpsetype = 1;
		}
		if (!isFloating) 
		{
			corpsetype = 2;
		}
		explode turret type SHATTER;
		explode gun type SHATTER;
		explode barrel type SHATTER;
		return corpsetype;
	}

	explode base type SHATTER;
	explode turret type SHATTER;
	explode gun type SHATTER;
	explode barrel type SHATTER;
	return (3);
}
