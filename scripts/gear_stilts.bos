#define TA			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"

#define SPEEDUP_FACTOR 120

#define HEADING_TOLERANCE	<25>
#define PITCH_TOLERANCE		<15>

#define CHANGE_SPD	[48]
#define CHANGE_SPD2	[8]
#define HEIGHT_MOD	[6]
#define MAX_STRETCH	[70]

piece  gp, hips, lbackleg,lb2,rbackleg,rb2,rfrontleg,rf2,lfrontleg,lf2, body,b2,turret,sleeve,barrel,flare,lfcover,lbcover,rfcover,rbcover,lfext1,lfext2,lfext3,lfext4,lfext5,lfext6,lff1,lff2,lff3,rfext1,rfext2,rfext3,rfext4,rfext5,rfext6,rff1,rff2,rff3,lbext1,lbext2,lbext3,lbext4,lbext5,lbext6,lbf1,lbf2,lbf3,rbext1,rbext2,rbext3,rbext4,rbext5,rbext6,rbf1,rbf2,rbf3;

static-var  bMoving, bAiming, isUnderWater, mASpdFactor,isDeployed, currentLevel, offsetLB, offsetLF, offsetRB, offsetRF, yTargetLB, yTargetLF, yTargetRB, yTargetRF;

lua_setHeightLevel() { return 0; }
lua_getPieceHeightDiff() { return 0; }

#include "aimhelper1.h"

// Signal definitions
#define SIG_AIM				2
#define SIG_MOVE			8


movePlatform(yTarget,speedMult)
{
	move hips to y-axis yTarget speed CHANGE_SPD*speedMult;
	
	call-script lua_getPieceHeightDiff(63); // lbf3		63
	offsetLB = get LUA1;
	call-script lua_getPieceHeightDiff(27); // lff3		27
	offsetLF = get LUA1;
	call-script lua_getPieceHeightDiff(51); // rbf3		51
	offsetRB = get LUA1;
	call-script lua_getPieceHeightDiff(39); // rff3		39
	offsetRF = get LUA1;
	//get PRINT(offsetLB,offsetRB,offsetLF,offsetRF);
	yTargetLB = [-1]*offsetLB + yTarget;
	yTargetLF = [-1]*offsetLF + yTarget;
	yTargetRB = [-1]*offsetRB + yTarget;
	yTargetRF = [-1]*offsetRF + yTarget;
	if (yTargetLB < 0) 	{	yTargetLB = 0;	}
	if (yTargetLF < 0) 	{	yTargetLF = 0;	}
	if (yTargetRB < 0) 	{	yTargetRB = 0;	}
	if (yTargetRF < 0) 	{	yTargetRF = 0;	}
	if (yTargetLB > MAX_STRETCH) 	{	yTargetLB = MAX_STRETCH;	}
	if (yTargetLF > MAX_STRETCH) 	{	yTargetLF = MAX_STRETCH;	}
	if (yTargetRB > MAX_STRETCH) 	{	yTargetRB = MAX_STRETCH;	}
	if (yTargetRF > MAX_STRETCH) 	{	yTargetRF = MAX_STRETCH;	}
	
	//get PRINT(yTargetLB,yTargetLF,yTargetRB,yTargetRF);
	
	move lfext1 to y-axis 0-yTargetLF/6 speed CHANGE_SPD2*speedMult;
	move lfext2 to y-axis 0-yTargetLF/6 speed CHANGE_SPD2*speedMult;
	move lfext3 to y-axis 0-yTargetLF/6 speed CHANGE_SPD2*speedMult;
	move lfext4 to y-axis 0-yTargetLF/6 speed CHANGE_SPD2*speedMult;
	move lfext5 to y-axis 0-yTargetLF/6 speed CHANGE_SPD2*speedMult;
	move lfext6 to y-axis 0-yTargetLF/6 speed CHANGE_SPD2*speedMult;

	move rfext1 to y-axis 0-yTargetRF/6 speed CHANGE_SPD2*speedMult;
	move rfext2 to y-axis 0-yTargetRF/6 speed CHANGE_SPD2*speedMult;
	move rfext3 to y-axis 0-yTargetRF/6 speed CHANGE_SPD2*speedMult;
	move rfext4 to y-axis 0-yTargetRF/6 speed CHANGE_SPD2*speedMult;
	move rfext5 to y-axis 0-yTargetRF/6 speed CHANGE_SPD2*speedMult;
	move rfext6 to y-axis 0-yTargetRF/6 speed CHANGE_SPD2*speedMult;

	move lbext1 to y-axis 0-yTargetLB/6 speed CHANGE_SPD2*speedMult;
	move lbext2 to y-axis 0-yTargetLB/6 speed CHANGE_SPD2*speedMult;
	move lbext3 to y-axis 0-yTargetLB/6 speed CHANGE_SPD2*speedMult;
	move lbext4 to y-axis 0-yTargetLB/6 speed CHANGE_SPD2*speedMult;
	move lbext5 to y-axis 0-yTargetLB/6 speed CHANGE_SPD2*speedMult;
	move lbext6 to y-axis 0-yTargetLB/6 speed CHANGE_SPD2*speedMult;

	move rbext1 to y-axis 0-yTargetRB/6 speed CHANGE_SPD2*speedMult;
	move rbext2 to y-axis 0-yTargetRB/6 speed CHANGE_SPD2*speedMult;
	move rbext3 to y-axis 0-yTargetRB/6 speed CHANGE_SPD2*speedMult;
	move rbext4 to y-axis 0-yTargetRB/6 speed CHANGE_SPD2*speedMult;
	move rbext5 to y-axis 0-yTargetRB/6 speed CHANGE_SPD2*speedMult;
	move rbext6 to y-axis 0-yTargetRB/6 speed CHANGE_SPD2*speedMult;
	wait-for-move hips along y-axis;
	wait-for-move lfext6 along y-axis;
	wait-for-move rfext6 along y-axis;
	wait-for-move lbext6 along y-axis;
	wait-for-move rbext6 along y-axis;
}


handleActivation(oldLevel,yTarget)
{
	while (TRUE)
	{ 
		oldLevel = currentLevel;
		if (get ACTIVATION)
		{
			yTarget = (currentLevel)*HEIGHT_MOD;
			if (currentLevel < 10)
			{
				if (currentLevel < 10)
				{
					currentLevel = currentLevel +1;
				}
			}
			else
			{
				sleep 30;
			}
		}
		else
		{
			yTarget = (currentLevel)*HEIGHT_MOD;
			if (currentLevel > 0)
			{
				if (currentLevel > 0)
				{
					currentLevel = currentLevel -1;
				}
			}
			else
			{
				sleep 30;
			}
		}
		
		// always run the platform/legs adjustment
		call-script movePlatform(yTarget,1);
		if (oldLevel != currentLevel)
		{
			call-script lua_setHeightLevel(4+currentLevel*6/10);	
		}
	}
}


MotionSpeedControl(minSpeed, maxSpeed,currentSpeed)
{
	maxSpeed = get MAX_SPEED;
	currentSpeed = 0;
	mASpdFactor = SPEEDUP_FACTOR;
	minSpeed = 3 * SPEEDUP_FACTOR / 4;
	
	while(TRUE)
	{
		currentSpeed = get CURRENT_SPEED;
		mASpdFactor = SPEEDUP_FACTOR * currentSpeed / maxSpeed;

		if ( mASpdFactor < minSpeed )
		{
			mASpdFactor = minSpeed;
		}

		sleep 60;
	}
}


walk()
{
	if( bMoving )
	{
		
		//turn hips to x-axis <2.000000> speed <20.000000> * mASpdFactor / 100;
		//turn hips to z-axis <-1.000000> speed <15.000000> * mASpdFactor / 100;
		move hips to z-axis [-2.300000] speed [4]* mASpdFactor / 100;
		turn lfrontleg to y-axis <20.000000> speed <100.967033> * mASpdFactor / 100;
		turn lfrontleg to z-axis <2.016484> speed <550.104396> * mASpdFactor / 100;

		turn lbackleg to y-axis <-0.000000> speed <300.038462> * mASpdFactor / 100;
		turn lbackleg to z-axis <-4.016484> speed <60.104396> * mASpdFactor / 100;

		
		turn rfrontleg to y-axis <40.412088> speed <300.060440> * mASpdFactor / 100;
		turn rfrontleg to z-axis <4.016484> speed <60.104396> * mASpdFactor / 100;
		
		turn rbackleg to y-axis <-40.093407> speed <100.368132> * mASpdFactor / 100;
		turn rbackleg to z-axis <-2.016484> speed <550.104396> * mASpdFactor / 100;
		
		sleep 200 * 100 / mASpdFactor;
	}

	// only vertical
	if( bMoving )
	{

		move hips to z-axis [2.300000] speed [4]* mASpdFactor / 100;
		turn lbackleg to z-axis <2.016484> speed <150.104396> * mASpdFactor / 100;
		turn rfrontleg to z-axis <-2.016484> speed <150.104396> * mASpdFactor / 100;
		
		sleep 200 * 100 / mASpdFactor;
	}
	
	
	if( bMoving )
	{
		//turn hips to x-axis <-2.000000> speed <20.000000> * mASpdFactor / 100;
		//turn hips to z-axis <1.000000> speed <15.000000> * mASpdFactor / 100;
		move hips to z-axis [-2.300000] speed [4]* mASpdFactor / 100;

		turn lfrontleg to y-axis <-40.000000> speed <300.967033> * mASpdFactor / 100;
		turn lfrontleg to z-axis <-4.016484> speed <60.104396> * mASpdFactor / 100;

		turn lbackleg to y-axis <40.000000> speed <100.038462> * mASpdFactor / 100;
		turn lbackleg to z-axis <2.016484> speed <550.104396> * mASpdFactor / 100;

		turn rfrontleg to y-axis <-20.412088> speed <100.060440> * mASpdFactor / 100;
		turn rfrontleg to z-axis <-2.016484> speed <550.104396> * mASpdFactor / 100;
		
		turn rbackleg to y-axis <00.093407> speed <300.368132> * mASpdFactor / 100;
		turn rbackleg to z-axis <4.016484> speed <60.104396> * mASpdFactor / 100;
		
		
		sleep 200 * 100 / mASpdFactor;
	}
	
	// only vertical
	if( bMoving )
	{
		move hips to z-axis [2.300000] speed [4]* mASpdFactor / 100;
		turn lfrontleg to z-axis <2.016484> speed <150.104396> * mASpdFactor / 100;
		turn rbackleg to z-axis <-2.016484> speed <150.104396> * mASpdFactor / 100;
		
		
		sleep 200 * 100 / mASpdFactor;
	}
	
}



SmokeUnit(healthpercent, sleeptime, smoketype)
{
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 400;
	}
	while( TRUE )
	{
		healthpercent = get HEALTH;
		if( healthpercent < 66 )
		{
			smoketype = 256 | 2;
			if( Rand( 1, 66 ) < healthpercent )
			{
				smoketype = 256 | 1;
			}
			emit-sfx smoketype from body;
		}
		sleeptime = healthpercent * 50;
		if( sleeptime < 200 )
		{
			sleeptime = 200;
		}
		sleep sleeptime;
	}
}

MotionControl(moving, aiming, justmoved)
{
	while( TRUE )
	{
		moving = bMoving;
		aiming = bAiming;
		if( moving )
		{
			justmoved = TRUE;
			call-script walk();
		}
		if( !moving )
		{
			if( justmoved )
			{
				turn lbackleg to x-axis <0.000000> speed <260.000000>;
				turn rbackleg to x-axis <0.000000> speed <260.000000>;
				turn rfrontleg to x-axis <0.000000> speed <260.000000>;
				turn lfrontleg to x-axis <0.000000> speed <260.000000>;
				turn lbackleg to y-axis <45.000000> speed <260.000000>;
				turn rbackleg to y-axis <-45.000000> speed <260.000000>;
				turn rfrontleg to y-axis <45.000000> speed <260.000000>;
				turn lfrontleg to y-axis <-45.000000> speed <260.000000>;
			
				turn lbackleg to z-axis <0.000000> speed <260.000000>;
				turn rbackleg to z-axis <0.000000> speed <260.000000>;
				turn rfrontleg to z-axis <0.000000> speed <260.000000>;
				turn lfrontleg to z-axis <0.000000> speed <260.000000>;
				turn hips to z-axis <0.000000> speed <260.000000>;
				turn hips to x-axis <0.000000> speed <260.000000>;
	
				move hips to x-axis [0.000000] speed [3.000000];
				move hips to z-axis [0.000000] speed [3.000000];


				justmoved = FALSE;
			}
			sleep 100;
		}
	}
}

Create()
{
	bMoving = FALSE;
	bAiming = FALSE;
	isUnderWater = FALSE;
	isDeployed = FALSE;
	currentLevel = 0;
	call-script lua_setHeightLevel(4+currentLevel*6/10);
	call-script stopAimHelper1(<1000>,<1000>);
	start-script MotionSpeedControl();
	start-script MotionControl();
	start-script SmokeUnit();
	start-script handleActivation();
}


StartMoving()
{
	bMoving = TRUE;
	signal SIG_MOVE;
	set-signal-mask SIG_MOVE;
	while( bMoving )
	{
		if( isUnderWater == TRUE )
		{
			//emit-sfx 256 | 3 from bleg;
			//emit-sfx 256 | 3 from bleg2;
			//emit-sfx 256 | 3 from bleg3;
			//emit-sfx 256 | 3 from bleg4;			
		}
		sleep 250;
	}
}

StopMoving()
{
	bMoving = FALSE;
	signal SIG_MOVE;
}


setSFXoccupy()
{
	isUnderWater = bMoving;
}


RestoreAfterDelay()
{
	sleep DEFAULT_WEAPON_RESTORE_DELAY;
	call-script stopAimHelper1(<120>,<120>);
	turn turret to y-axis <0.000000> speed <120.016484>;
	turn sleeve to x-axis <0.000000> speed <120.005495>;
	bAiming = FALSE;
}

AimFromPrimary(piecenum)
{
	piecenum = turret;
}

QueryPrimary(piecenum)
{
	piecenum = flare;
}

FirePrimary()
{
	move barrel to z-axis [-2] now;
	emit-sfx 1024 + 0 from flare;
	move barrel to z-axis [0] speed [4];
}

AimPrimary(heading, pitch)
{
	call-script updateAimHelper1(heading,pitch,<140>,<140>,HEADING_TOLERANCE,PITCH_TOLERANCE);
	signal SIG_AIM;
	set-signal-mask SIG_AIM;
	bAiming = TRUE;
	
	turn turret to y-axis heading speed <140.027473>;
	turn sleeve to x-axis <0.000000> - pitch speed <140.038462>;
	if (!aimReady1)
	{
		wait-for-turn turret around y-axis;
		wait-for-turn sleeve around x-axis;
	}
	start-script RestoreAfterDelay();
	return (1);
}



Killed(severity, corpsetype)
{
	if( severity <= 50 )
	{
		//TODO delaying the unit destruction causes issues, spawn two different wrecks instead
		//sleep 30;
		emit-sfx 1024+1 from lfext1;
		emit-sfx 1024+1 from lbext2;
		emit-sfx 1024+1 from rfext4;
		emit-sfx 1024+1 from rbext5;
		//sleep 60;
		emit-sfx 1024+1 from lfext4;
		emit-sfx 1024+1 from lbext4;
		emit-sfx 1024+1 from rfext3;
		emit-sfx 1024+1 from rbext2;
		//sleep 30;
		emit-sfx 1024+1 from rfext3;
		emit-sfx 1024+1 from rbext2;
		
		// raise/lower to half height right before exploding
		//currentLevel = 5;
		//call-script movePlatform((currentLevel)*HEIGHT_MOD,1);
		
		explode body type SHATTER;
		explode b2 type SHATTER;
		explode turret type SHATTER;
		explode barrel type SHATTER;
		
		return (1);
	}
	explode body type SHATTER;
	explode b2 type SHATTER;
	explode turret type SHATTER;
	explode barrel type SHATTER;
	explode sleeve type SHATTER;
	explode lb2 type SHATTER;
	explode rb2 type SHATTER;
	explode lf2 type SHATTER;
	explode rf2 type SHATTER;
	return (2);
}
