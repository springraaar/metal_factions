#define TAK			// This is a TAK script

#include "sfxtype.h"
#include "exptype.h"


#define HEADING_TOLERANCE	<25>
#define PITCH_TOLERANCE		<15>


piece  base, hips, h2, wheel, torso, ruparm, luparm, rarm, larm, rgun, lgun, rflare, lflare, head, l1, l2, l3, visor,jumpback,jbl,jbr,lbjetpt,rbjetpt,jumpjets,lfjet,rfjet,lfjetpt,rfjetpt;

static-var  bMoving, bAiming, lastHeading, gun_1;

#include "aimhelper1.h"

// Signal definitions
#define SIG_AIM				2

#include "jumpvars.h"


showJumpGear() {
	show jumpback;
	show jbl;
	show jbr;
	show jumpjets;
	show lfjet;
	show rfjet;
}

hideJumpGear() {
	hide jumpback;
	hide jbl;
	hide jbr;
	hide jumpjets;
	hide lfjet;
	hide rfjet;
}

showJumpEffects(descending, frames) {
	if (descending) {
		emit-sfx 1024+4 from lfjetpt;
		emit-sfx 1024+4 from rfjetpt;
		emit-sfx 1024+3 from lbjetpt;
		emit-sfx 1024+3 from rbjetpt;
		if (frames == JUMP_SND_FRAMES) {
			play-sound( "jumpdesc", 1 );
		}
	} else {
		if (frames == 0 ) {
			play-sound( "jumpstart", 1 );
		} else {
			if (frames == JUMP_SND_FRAMES) {
				play-sound( "jumpasc", 1 );
			}
		}
		emit-sfx 1024+2 from lfjetpt;
		emit-sfx 1024+2 from rfjetpt;
		emit-sfx 1024+1 from lbjetpt;
		emit-sfx 1024+1 from rbjetpt;
	}
}

#include "jump.h"

recoil(anglex, anglez) {
	anglex = <-1.000000> * (get KCOS(lastHeading)) / 500;
	anglez = <-1.000000> * (get KSIN(lastHeading)) / 500;
	
	turn base to x-axis anglex speed <150.005495>;
	turn base to z-axis anglez speed <150.005495>;
	wait-for-turn base around z-axis;
	wait-for-turn base around x-axis;
	turn base to z-axis <0.000000> speed <20.000000>;
	turn base to x-axis <0.000000> speed <20.000000>;
}

walk() {
	turn hips to x-axis <8.000000> speed <140.000000>;
	if (isJumping) {
		stop-spin wheel around x-axis;
	} else {
		spin wheel around x-axis speed <360.000000> accelerate <100.000000>;
	}
	sleep 100;
	return (0);
}

walklegs() {
	turn hips to x-axis <0.000000> speed <140.000000>;
	if (isJumping) {
		stop-spin wheel around x-axis;
	} else {
		spin wheel around x-axis speed <260.000000> accelerate <100.000000>;
	}
	sleep 100;
	return (0);
}

SmokeUnit(healthpercent, sleeptime, smoketype) {
	while( get BUILD_PERCENT_LEFT ) {
		sleep 400;
	}
	while( TRUE ) {
		healthpercent = get HEALTH;
		if( healthpercent < 66 ) {
			smoketype = 256 | 2;
			if( Rand( 1, 66 ) < healthpercent ) {
				smoketype = 256 | 1;
			}
			emit-sfx smoketype from torso;
		}
		sleeptime = healthpercent * 50;
		if( sleeptime < 200 ) {
			sleeptime = 200;
		}
		sleep sleeptime;
	}
}

MotionControl(moving, aiming, justmoved) {
	while( TRUE ) {
		justmoved = TRUE;
		while( TRUE ) {
			moving = bMoving;
			aiming = bAiming;
			if( moving ) {
				if( aiming ) {
					call-script walklegs();
				} else {
					call-script walk();
				}
				justmoved = TRUE;
			} else {
				if( justmoved )	{
					turn hips to x-axis <0.000000> speed <100.000000>;
					stop-spin wheel around x-axis decelerate <300.000000>;
					justmoved = FALSE;
				}
				sleep 100;
			}
		}
	}
}

Create() {
	
	bMoving = FALSE;
	bAiming = FALSE;
	gun_1 = 0;
	call-script stopAimHelper1(<1000>,<1000>);
	start-script initJump();
	start-script MotionControl();
	start-script SmokeUnit();
	start-script setHasJump(1);
}

StartMoving() {
	bMoving = TRUE;
}

StopMoving() {
	bMoving = FALSE;
}

RestoreAfterDelay() {
	sleep DEFAULT_WEAPON_RESTORE_DELAY;
	call-script stopAimHelper1(<140>,<140>);
	turn torso to y-axis <0.000000> speed <140.016484>;
	turn luparm to x-axis <0.000000> speed <145.005495>;
	turn ruparm to x-axis <0.000000> speed <145.005495>;
	lastHeading = 0;
}


AimPrimary(heading, pitch) {
	call-script updateAimHelper1(heading,pitch,<300>,<300>,HEADING_TOLERANCE,PITCH_TOLERANCE);
	signal SIG_AIM;
	set-signal-mask SIG_AIM;
	bAiming = TRUE;
	turn torso to y-axis heading speed <300.027473>;
	turn luparm to x-axis <0.000000> - pitch speed <300.038462>;
	turn ruparm to x-axis <0.000000> - pitch speed <300.038462>;
	if (!aimReady1)
	{
		wait-for-turn torso around y-axis;
		wait-for-turn luparm around x-axis;
		wait-for-turn ruparm around x-axis;
	}
	lastHeading = heading;
	start-script RestoreAfterDelay();
	return (1);
}


FirePrimary() {
	if (gun_1 == 0) {
		turn larm to x-axis <40.000000> now;
		turn lgun to x-axis <-40.000000> now;
		emit-sfx 1024+0 from lflare;
		turn larm to x-axis <0.000000> speed <230.038462>;
		turn lgun to x-axis <0.000000> speed <230.038462>;
		call-script recoil();
		sleep 100;
		gun_1 = 1;
	} else {
		turn rarm to x-axis <40.000000> now;
		turn rgun to x-axis <-40.000000> now;
		emit-sfx 1024+0 from rflare;
		turn rarm to x-axis <0.000000> speed <230.038462>;
		turn rgun to x-axis <0.000000> speed <230.038462>;
		call-script recoil();
		sleep 100;
		gun_1 = 0;	
	}
	return 0;
}

QueryPrimary(piecenum) {
	if ( gun_1 == 0 ){
		piecenum = lflare;
	} else {
		piecenum = rflare;
	}
}

AimFromPrimary(piecenum) {
	piecenum = torso;
}



Killed(severity, corpsetype) {
	if( severity <= 50 ) {
		explode head type BITMAPONLY | BITMAP2;
	
		explode luparm type BITMAPONLY | BITMAP2;
		explode ruparm type BITMAPONLY | BITMAP4;
	
		explode visor type BITMAPONLY | BITMAP4;
		explode torso type BITMAPONLY | BITMAP5;
		return (1);
	}
	explode head type SHATTER;
	explode lgun type SHATTER;
	explode rgun type SHATTER;
	explode visor type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP4;
	explode torso type SHATTER;
	return (2);
}
