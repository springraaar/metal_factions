#define TA			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"

piece  base, stand, logo1, logo2, ldoor, rdoor, turret, slholder,sleeve, barrel, flare1, tlogo, s2,s3,left,right, aimpt,floatbase;

static-var isOpen,isFloating;

// Signal definitions
#define SIG_AIM				2

lua_stopFiring() { return 0; }

SmokeUnit(healthpercent, sleeptime, smoketype)
{
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 400;
	}
	while( TRUE )
	{
		healthpercent = get HEALTH;
		if( healthpercent < 66 )
		{
			smoketype = 256 | 2;
			if( Rand( 1, 66 ) < healthpercent )
			{
				smoketype = 256 | 1;
			}
			emit-sfx smoketype from base;
		}
		sleeptime = healthpercent * 50;
		if( sleeptime < 200 )
		{
			sleeptime = 200;
		}
		sleep sleeptime;
	}
	return (0);
}


open()
{
	if(!isOpen)
	{
		set ARMORED to 0;
		turn rdoor to z-axis <-90.000000> speed <180.000000>;
		turn ldoor to z-axis <90.000000> speed <180.000000>;
		wait-for-turn ldoor around z-axis;

		move rdoor to y-axis  [-17.000000] speed [50.000000];
		move ldoor to y-axis  [-17.000000] speed [50.000000];
		move stand to y-axis [27.000000] speed [80.000000];
		move slholder to y-axis [0.000000] speed [38.000000];
		wait-for-move ldoor along y-axis;
		wait-for-move stand along y-axis;
		wait-for-move slholder along y-axis;

		turn slholder to x-axis <0.000000> speed <300.000000>;
		wait-for-turn slholder around x-axis;

		move barrel to z-axis [0.000000] speed [16.000000];
		wait-for-move barrel along z-axis;
		isOpen = TRUE;
	}
	return (0);
}

close()
{
	if (isOpen) 
	{
		isOpen = FALSE;
		turn turret to y-axis <0.000000> speed <300.000000>;
		move barrel to z-axis [-14.000000] speed [24.000000];
		wait-for-turn turret around y-axis;
		wait-for-move barrel along z-axis;

		turn slholder to x-axis <90> speed <300.000000>;
		wait-for-turn slholder around x-axis;

		move stand to y-axis [0.000000] speed [38.000000];
		move slholder to y-axis [-5.000000] speed [38.000000];
		wait-for-move stand along y-axis;
		wait-for-move slholder along y-axis;

		move rdoor to y-axis  [0.000000] speed [40.000000];
		move ldoor to y-axis  [0.000000] speed [40.000000];
		wait-for-move ldoor along y-axis;
	
		turn rdoor to z-axis <0.000000> speed <180.000000>;
		turn ldoor to z-axis <0.000000> speed <180.000000>;
		wait-for-turn ldoor around z-axis;
		
		set ARMORED to 1;
	}
	return (0);
}

RestoreAfterDelay()
{
	if((get STANDINGFIREORDERS) > 0)
	{
		sleep DEFAULT_WEAPON_RESTORE_DELAY;
	} 
	else 
	{
		sleep 600;
	}
	turn turret to y-axis <0.000000> speed <80.000000>;
	turn sleeve to x-axis <0.000000> speed <80.000000>;
	wait-for-turn turret around y-axis;
	wait-for-turn sleeve around x-axis;
	call-script close();
	return (0);
}

// if fire state changes to hold fire, force closure
checkClose(fireState,previousFireState)
{
	while (TRUE)
	{
		fireState = (get STANDINGFIREORDERS);
		
		if (fireState == 0 && previousFireState > 0) 
		{
			signal SIG_AIM;
			call-script lua_stopFiring();
			call-script RestoreAfterDelay();
		}
	
		previousFireState = fireState;
		sleep 100;
	}
}

Create()
{
	hide floatbase;
	isFloating = FALSE;
	if ( GET GROUND_WATER_HEIGHT(GET UNIT_XZ) < [0])
	{
		isFloating = TRUE;
		show floatbase;
		move base to y-axis [2] now;
	}
	
	move aimpt to y-axis [35.000000] now;
	move slholder to y-axis [-5.000000] now;
	turn slholder to x-axis <90.000000> now;
	move barrel to z-axis [-14.000000] now;
	isOpen = FALSE;
	set ARMORED to 1;
	start-script SmokeUnit();
	start-script close();
	start-script checkClose();
	return (0);
}

RockUnit(anglex, anglez)
{
	if (isFloating)
	{
		turn base to x-axis anglex speed <40.005495>;
		turn base to z-axis <0>-anglez speed <40.005495>;
		wait-for-turn base around z-axis;
		wait-for-turn base around x-axis;
		turn base to z-axis <0.000000> speed <10.000000>;
		turn base to x-axis <0.000000> speed <10.000000>;
	}
}

AimPrimary(heading, pitch)
{
	signal SIG_AIM;
	set-signal-mask SIG_AIM;
	if(!isOpen)
	{
		call-script open();
	}

	turn turret to y-axis heading speed <80.071429>;
	turn sleeve to x-axis <0.000000> - pitch speed <80.038462>;
	wait-for-turn turret around y-axis;
	wait-for-turn sleeve around x-axis;
	start-script RestoreAfterDelay();
	return (1);
}

FirePrimary()
{
	move barrel to z-axis [-8.000000] now;
	emit-sfx 1024 + 0 from flare1;
	sleep 150;
	move barrel to z-axis [0.000000] speed [6.000000];
	return (0);
}

AimFromPrimary(piecenum)
{
	piecenum = aimpt;
	return (0);
}

QueryPrimary(piecenum)
{
	piecenum = flare1;
	return (0);	
}


Killed(severity, corpsetype)
{
	if( severity <= 50 )
	{
		if (isFloating) 
		{
			corpsetype = 1;
		}
		if (!isFloating) 
		{
			corpsetype = 2;
		}
		explode turret type SHATTER;
		explode sleeve type SHATTER;
		explode barrel type SHATTER;
		return corpsetype;
	}
	
	explode sleeve type SHATTER;
	explode tlogo type SHATTER;
	explode base type SHATTER;
	explode stand type SHATTER;
	explode turret type SHATTER;
	explode barrel type SHATTER;
	return (3);
}
