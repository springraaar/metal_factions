#define TA			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"

#define SPEEDUP_FACTOR 350

piece  lthigh, rthigh, rleg, lleg, rfoot, lfoot, ear1, ear2, base, hips, torso;

static-var  bMoving, Static_Var_2, mATurnSpd1,mATurnSpd2,mATurnSpd3,mASpdFactor, mAMoveSpd1, mADelay1, legAngle1, legAngle2, legAngle3;

// Signal definitions
#define SIG_ACTIVATE			2

MotionSpeedControl(maxSpeed,currentSpeed)
{
	maxSpeed = get MAX_SPEED;
	currentSpeed = 0;
	mASpdFactor = SPEEDUP_FACTOR;

	
	while(TRUE)
	{
		currentSpeed = get CURRENT_SPEED;
		mASpdFactor = SPEEDUP_FACTOR * currentSpeed / maxSpeed;

		//call-script lua_cobDebug(mASpdFactor);
		if ( mASpdFactor < 120 )
		{
			mASpdFactor = 120;
		}
		
		
		mAMoveSpd1 = [4.000000] * mASpdFactor / 100;
		mATurnSpd1 = <315.000000> * (100 + mASpdFactor) / 200;
		mATurnSpd2 = <200.000000> * (100 + mASpdFactor) / 200;
		mATurnSpd3 = <50.000000> * (100 + mASpdFactor) / 200;

		legAngle1 = <35.000000>;
		legAngle2 = <20.000000>;
		legAngle3 = <15.000000>;
		if ( mASpdFactor < SPEEDUP_FACTOR )
		{
			legAngle1 = legAngle1 * (SPEEDUP_FACTOR + mASpdFactor) / (2*SPEEDUP_FACTOR);
			legAngle2 = legAngle2 * (SPEEDUP_FACTOR + mASpdFactor) / (2*SPEEDUP_FACTOR);
			legAngle3 = legAngle3 * (SPEEDUP_FACTOR + mASpdFactor) / (2*SPEEDUP_FACTOR);
		}
		mADelay1 = 50;

		if(!bMoving)
		{
			mADelay1 = 50;
		}
		if ( mASpdFactor >= 50 AND bMoving  )
		{
			mADelay1 = mADelay1 * 100 / mASpdFactor;
		}
	
		sleep 30;
	}
}

walk()
{
	var slowTurnSpd, slowTurnSpd2;

	slowTurnSpd = mATurnSpd2 / 4;
	slowTurnSpd2 = mATurnSpd2 / 6;
	
	
	// back contact point : right foot behind, left foot forward
	if( bMoving )
	{
		turn lthigh to x-axis <0.000000>-legAngle1 speed mATurnSpd1;
		turn lleg to x-axis legAngle2 speed mATurnSpd2;
		turn lfoot to x-axis legAngle3 speed mATurnSpd1;

		turn rthigh to x-axis legAngle2 speed mATurnSpd2;
		turn rleg to x-axis legAngle3 speed mATurnSpd2;
		turn rfoot to x-axis <0.000000>-legAngle2 speed mATurnSpd1;

		move hips to y-axis [-0.500000] speed mAMoveSpd1;
		move hips to z-axis [1.000000] speed mAMoveSpd1;
		turn hips to x-axis <4.000000> speed slowTurnSpd2;

		// turn torso left
		turn torso to y-axis <10.000000> speed slowTurnSpd2;
		
		wait-for-turn lthigh around x-axis;
		wait-for-turn rthigh around x-axis;
		wait-for-turn lleg around x-axis;
		wait-for-turn rleg around x-axis;
	}

	// passing pose 2 : right foot raising, left foot on the ground
	if( bMoving )
	{
		turn lthigh to x-axis <0.000000> speed mATurnSpd2;
		turn lleg to x-axis <0.000000> speed mATurnSpd2;
		turn lfoot to x-axis <10.000000> speed mATurnSpd3;

		turn rthigh to x-axis <60.000000> speed mATurnSpd1;
		turn rleg to x-axis <-60.000000> speed mATurnSpd1;
		turn rfoot to x-axis <10.000000> speed mATurnSpd1;

		// restore position
		turn torso to y-axis <0.000000> speed slowTurnSpd2;

		sleep mADelay1;
		move hips to y-axis [0.000000] speed mAMoveSpd1;
		move hips to z-axis [0.000000] speed mAMoveSpd1;
		turn hips to x-axis <0.000000> speed slowTurnSpd2;
		
		wait-for-turn lthigh around x-axis;
		wait-for-turn rthigh around x-axis;
		wait-for-turn lleg around x-axis;
		wait-for-turn rleg around x-axis;

	}
	
	// forward contact point : right foot forward, left foot behind
	if( bMoving )
	{
		turn lthigh to x-axis legAngle2 speed mATurnSpd2;
		turn lleg to x-axis legAngle3 speed mATurnSpd2;
		turn lfoot to x-axis <0>-legAngle2 speed mATurnSpd1;

		turn rthigh to x-axis <0>-legAngle1 speed mATurnSpd1;
		turn rleg to x-axis legAngle2 speed mATurnSpd2;
		turn rfoot to x-axis legAngle3 speed mATurnSpd1;
		
		move hips to y-axis [-0.500000] speed mAMoveSpd1;
		move hips to z-axis [1.000000] speed mAMoveSpd1;
		turn hips to x-axis <4.000000> speed slowTurnSpd2;
		
		// turn torso right, left arm forward
		turn torso to y-axis <-10.000000> speed slowTurnSpd2;

		sleep mADelay1;
		wait-for-turn lthigh around x-axis;
		wait-for-turn rthigh around x-axis;
		wait-for-turn lleg around x-axis;
		wait-for-turn rleg around x-axis;
	}

	// passing pose 1 : right foot on ground, left foot raising
	if( bMoving )
	{
		turn lthigh to x-axis <60.000000> speed mATurnSpd1;
		turn lleg to x-axis <-60.000000> speed mATurnSpd1;
		turn lfoot to x-axis <10.000000> speed mATurnSpd1;
		
		turn rthigh to x-axis <0.000000> speed mATurnSpd2;
		turn rleg to x-axis <0.000000> speed mATurnSpd2;
		turn rfoot to x-axis <10.000000> speed mATurnSpd3;

		// restore position
		turn torso to y-axis <0.000000> speed slowTurnSpd2;
		
		sleep mADelay1;
		move hips to y-axis [0.000000] speed mAMoveSpd1;
		move hips to z-axis [0.000000] speed mAMoveSpd1;
		turn hips to x-axis <0.000000> speed slowTurnSpd2;
		
		wait-for-turn lthigh around x-axis;
		wait-for-turn rthigh around x-axis;
		wait-for-turn lleg around x-axis;
		wait-for-turn rleg around x-axis;
	}
	
	return;
}



stand()
{
	sleep 200;
	return (0);
}

SmokeUnit(healthpercent, sleeptime, smoketype)
{
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 400;
	}
	while( TRUE )
	{
		healthpercent = get HEALTH;
		if( healthpercent < 66 )
		{
			smoketype = 256 | 2;
			if( Rand( 1, 66 ) < healthpercent )
			{
				smoketype = 256 | 1;
			}
			emit-sfx smoketype from torso;
		}
		sleeptime = healthpercent * 50;
		if( sleeptime < 200 )
		{
			sleeptime = 200;
		}
		sleep sleeptime;
	}
	return (0);
}


MotionControl(moving, justMoved)
{
	while( TRUE )
	{
		moving = bMoving;
		if( moving )
		{
			call-script walk();
			justmoved = TRUE;
		}
		if( !moving )
		{
			if( justMoved )
			{
				move hips to y-axis [0.000000] speed [25.000000];
				turn hips to x-axis <0.000000> speed <20.000000>;
				turn rthigh to x-axis <0.000000> speed <200.000000>;
				turn rleg to x-axis <0.000000> speed <200.000000>;
				turn lthigh to x-axis <0.000000> speed <200.000000>;
				turn lleg to x-axis <0.000000> speed <200.000000>;
				turn rfoot to x-axis <0.000000> speed <200.000000>;
				turn lfoot to x-axis <0.000000> speed <200.000000>;
			
				turn torso to y-axis <0.000000> speed <200.000000>;
				justMoved = FALSE;
			}
			sleep 100;
		}
	}
	return (0);
}

Create()
{
	bMoving = FALSE;
	Static_Var_2 = 1000;
	start-script MotionSpeedControl();
	start-script MotionControl();
	start-script SmokeUnit();
	return (0);
}

Activate()
{
	signal SIG_ACTIVATE;
	set-signal-mask SIG_ACTIVATE;
	spin ear1 around x-axis speed <100.021978>;
	spin ear2 around x-axis speed <-100.021978>;
	return (0);
}

Deactivate()
{
	signal SIG_ACTIVATE;
	set-signal-mask SIG_ACTIVATE;
	turn ear1 to x-axis <0.000000> speed <100.021978>;
	turn ear2 to x-axis <0.000000> speed <-100.021978>;
	wait-for-turn ear1 around x-axis;
	wait-for-turn ear2 around x-axis;
	return (0);
}

StartMoving()
{
	bMoving = TRUE;
	return (0);
}

StopMoving()
{
	bMoving = FALSE;
	return (0);
}

RestoreAfterDelay()
{
	sleep Static_Var_2;
	return (0);
}

Killed(severity, corpsetype)
{
	if( severity <= 50 )
	{
		explode ear2 type SHATTER;
		explode ear1 type SHATTER;
		return (0);
	}

	explode base type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
	explode torso type SHATTER | EXPLODE_ON_HIT | BITMAP2;
	explode ear2 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
	explode ear1 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
	return (2);
}
