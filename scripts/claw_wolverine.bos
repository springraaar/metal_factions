#define TA			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"

#define SPEEDUP_FACTOR 200

#define HEADING_TOLERANCE	<25>
#define PITCH_TOLERANCE		<15>

piece  base, holder, flare, turret, sleeve, barrel, hull,bottom, rfrontsup,rfrontwheel,backwheel,backsup,lfrontsup,lfrontwheel, base2;

static-var  bMoving, bAiming, bSwimming, terrainStatus, wheelSpeed, wheelAcceleration;

#include "aimhelper1.h"

// Signal definitions
#define SIG_MOVE			2
#define SIG_AIM				4



WheelSpeedControl(maxSpeed,currentSpeed)
{
	maxSpeed = get MAX_SPEED;
	bMoving = FALSE;
	while(TRUE)
	{
		currentSpeed = get CURRENT_SPEED;

		wheelSpeed = (currentSpeed*SPEEDUP_FACTOR) / maxSpeed * 728;
		wheelAcceleration = wheelSpeed;

		sleep 100;
	}
}

SmokeUnit(healthpercent, sleeptime, smoketype)
{
	var Func_Var_4;
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 400;
	}
	while( TRUE )
	{
		healthpercent = get HEALTH;
		if( healthpercent < 66 )
		{
			smoketype = 256 | 2;
			if( Rand( 1, 66 ) < healthpercent )
			{
				smoketype = 256 | 1;
			}
			emit-sfx smoketype from hull;
		}
		sleeptime = healthpercent * 50;
		if( sleeptime < 200 )
		{
			sleeptime = 200;
		}
		sleep sleeptime;
	}
	return (0);
}

stopWheels()
{
	stop-spin rfrontwheel around x-axis decelerate <50.000000>;
	stop-spin lfrontwheel around x-axis decelerate <50.000000>;
	stop-spin backwheel around x-axis decelerate <50.000000>;
	return (0);
}

walk()
{
	if( bMoving )
	{
		spin rfrontwheel around x-axis speed wheelSpeed accelerate <40.000000>;
		spin lfrontwheel around x-axis speed wheelSpeed accelerate <40.000000>;
		spin backwheel around x-axis speed wheelSpeed accelerate <40.000000>;
		sleep 200;
	}
	return (0);
}


closelegs()
{
	call-script stopWheels();
	sleep 100;
	return (0);
}

openlegs()
{
	// nothing to do here
	sleep 100;

	return (0);
}

swim()
{
	sleep 500;
	call-script closelegs();
	return (0);
}

MotionControl(justMoved)
{
	justMoved = TRUE;
	bSwimming = FALSE;
	while( TRUE )
	{
		if( bMoving )
		{
			call-script walk();
			justMoved = TRUE;
		}
		if( !bMoving )
		{
			if( justMoved )
			{
				call-script stopWheels();
				justMoved = FALSE;
			}
			sleep 100;
		}
	}
	return (0);
}

Create()
{
	bMoving = FALSE;
	bAiming = FALSE;
	bSwimming = FALSE;
	call-script stopAimHelper1(<1000>,<1000>);
	start-script WheelSpeedControl();
	start-script MotionControl();
	start-script SmokeUnit();
	return (0);
}

StartMoving()
{
	bMoving = TRUE;
	return (0);
}

StopMoving()
{
	bMoving = FALSE;
	return (0);
}

setSFXoccupy(Func_Var_1)
{
	terrainStatus = Func_Var_1;
	return (0);
}


RestoreAfterDelay()
{
	sleep DEFAULT_WEAPON_RESTORE_DELAY;
	call-script stopAimHelper1(<100>,<100>);
	turn turret to y-axis <0.000000> speed <100.000000>;
	turn sleeve to x-axis <0.000000> speed <100.000000>;
	return (0);
}


AimPrimary(heading, pitch)
{
	call-script updateAimHelper1(heading,pitch,<460>,<460>,HEADING_TOLERANCE,PITCH_TOLERANCE);
	signal SIG_AIM;
	set-signal-mask SIG_AIM;
	bAiming = TRUE;
	turn turret to y-axis heading speed <460.000000>;
	turn sleeve to x-axis <0.000000> - pitch speed <460.000000>;
	if (!aimReady1)
	{
		wait-for-turn turret around y-axis;
		wait-for-turn sleeve around x-axis;
	}
	start-script RestoreAfterDelay();
	return (1);
}


FirePrimary()
{
	move barrel to z-axis [-0.80000] now;
	emit-sfx 1024 from flare;
	sleep 100;
	move barrel to z-axis [0.000000] speed [15.000000];
	return (1);
}


AimFromPrimary(piecenum)
{
	piecenum = turret;
	return (0);
}

QueryPrimary(piecenum)
{
	piecenum = flare;
	return (0);
}

SweetSpot(piecenum)
{
	piecenum = turret;
	return (0);
}




Killed(severity, corpsetype)
{
	if( severity <= 50 )
	{
		explode sleeve type SHATTER;
		explode turret type SHATTER;
		return (1);
	}
	explode hull type SHATTER;
	explode bottom type SHATTER;
	explode turret type SHATTER;
	explode sleeve type SHATTER;
	explode barrel type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP5;
	return (2);
}
