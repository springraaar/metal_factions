#define TA			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"

#define HEADING_TOLERANCE	<25>
#define PITCH_TOLERANCE		<15>

piece  base, hull, turret, l1,l2,l3,l4, sleeve, barrel, flash, barrel2, flash2, wake1, wake2, front, fbottom, back, bbottom, chargept;

static-var  gun_1;


#include "aimhelper1.h"

// Signal definitions
#define SIG_MOVE			2
#define SIG_AIM				4


SmokeUnit(healthpercent, sleeptime, smoketype)
{
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 400;
	}
	while( TRUE )
	{
		healthpercent = get HEALTH;
		if( healthpercent < 66 )
		{
			smoketype = 256 | 2;
			if( Rand( 1, 66 ) < healthpercent )
			{
				smoketype = 256 | 1;
			}
			emit-sfx smoketype from base;
		}
		sleeptime = healthpercent * 50;
		if( sleeptime < 200 )
		{
			sleeptime = 200;
		}
		sleep sleeptime;
	}
	return (0);
}

Create()
{
	call-script stopAimHelper1(<1000>,<1000>);
	gun_1 = 0;
	start-script SmokeUnit();
	return (0);
}


RestoreAfterDelay()
{
	sleep DEFAULT_WEAPON_RESTORE_DELAY;
	call-script stopAimHelper1(<100>,<100>);
	turn turret to y-axis <0.000000> speed <100.000000>;
	turn sleeve to x-axis <0.000000> speed <100.000000>;
	return (0);
}

StartMoving()
{
	signal SIG_MOVE;
	set-signal-mask SIG_MOVE;
	while( TRUE )
	{
		emit-sfx 2 from wake1;
		emit-sfx 2 from wake2;
		sleep 450;
	}
	return (0);
}

StopMoving()
{
	signal SIG_MOVE;
	return (0);
}

AimPrimary(heading, pitch)
{
	call-script updateAimHelper1(heading,pitch,<150>,<150>,HEADING_TOLERANCE,PITCH_TOLERANCE);
	signal SIG_AIM;
	set-signal-mask SIG_AIM;
	turn turret to y-axis heading speed <150.000000>;
	turn sleeve to x-axis <0.000000> - pitch speed <150.000000>;
	if (!aimReady1)
	{
		wait-for-turn turret around y-axis;
		wait-for-turn sleeve around x-axis;
	}
	start-script RestoreAfterDelay();
	return (1);
}

FirePrimary()
{
	if(gun_1 == 0)
	{
		move barrel to z-axis [-3.500000] now;
		emit-sfx 1024 from flash;
		sleep 100;
		gun_1 = 1;
		move barrel to z-axis [0.000000] speed [9.000000];
	}
	else
	{
		move barrel2 to z-axis [-3.500000] now;
		emit-sfx 1024 from flash2;
		sleep 100;
		gun_1 = 0;
		move barrel2 to z-axis [0.000000] speed [9.000000];
	}
	return (0);
}

AimFromPrimary(piecenum)
{
	piecenum = turret;
	return (0);
}

QueryPrimary(piecenum)
{
	if( gun_1 == 0) 
	{
		piecenum = flash;
	}
	else
	{
		piecenum = flash2;
	}
}


AimSecondary(heading, pitch)
{
	return (1);
}

FireSecondary()
{
	return (0);
}

AimFromSecondary(piecenum)
{
	piecenum = chargept;
	return (0);
}

QuerySecondary(piecenum)
{
	piecenum = chargept;
}


Killed(severity, corpsetype)
{
	if( severity <= 50 )
	{
		explode hull type SHATTER;
		return (1);
	}
	explode hull type SHATTER;
	explode front type SHATTER;
	explode back type SHATTER;
	explode bbottom type SHATTER;
	return (2);
}
