#define TA			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"

#define SPEEDUP_FACTOR 170

#define HEADING_TOLERANCE	<25>
#define PITCH_TOLERANCE		<15>

piece  base, flare, flare2, wake1, wake2, turret, sleeve, barrel, barrel2, hull,bottom, rmidsup,rmidwheel,rfrontsup,rfrontwheel,rbacksup,rbackwheel,lbacksup,lbackwheel,lmidsup,lmidwheel,lfrontsup,lfrontwheel, base2, sleeve2,lbarrel,lflare, rbarrel, rflare;

static-var  bMoving, bAiming, bSwimming, gun_2,gun_1, terrainStatus, waterSpeed, landSpeed, wheelSpeed, wheelAcceleration;

#include "aimhelper1.h"

// Signal definitions
#define SIG_MOVE			2
#define SIG_AIM				4
#define SIG_AIM2			8


WheelSpeedControl(maxSpeed,currentSpeed)
{
	maxSpeed = get MAX_SPEED;
	bMoving = FALSE;
	while(TRUE)
	{
		currentSpeed = get CURRENT_SPEED;

		wheelSpeed = (currentSpeed*SPEEDUP_FACTOR) / maxSpeed * 728;
		wheelAcceleration = wheelSpeed / 2;

		sleep 100;
	}
}

SmokeUnit(healthpercent, sleeptime, smoketype)
{
	var Func_Var_4;
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 400;
	}
	while( TRUE )
	{
		healthpercent = get HEALTH;
		if( healthpercent < 66 )
		{
			smoketype = 256 | 2;
			if( Rand( 1, 66 ) < healthpercent )
			{
				smoketype = 256 | 1;
			}
			emit-sfx smoketype from hull;
		}
		sleeptime = healthpercent * 50;
		if( sleeptime < 200 )
		{
			sleeptime = 200;
		}
		sleep sleeptime;
	}
	return (0);
}

stopWheels()
{
	stop-spin rmidwheel around x-axis decelerate <30.000000>;
	stop-spin rfrontwheel around x-axis decelerate <30.000000>;
	stop-spin rbackwheel around x-axis decelerate <30.000000>;
	stop-spin lmidwheel around x-axis decelerate <30.000000>;
	stop-spin lfrontwheel around x-axis decelerate <30.000000>;
	stop-spin lbackwheel around x-axis decelerate <30.000000>;
	return (0);
}

walk()
{
	if( bMoving )
	{
		spin rmidwheel around x-axis speed wheelSpeed accelerate <30.000000>;
		spin rfrontwheel around x-axis speed wheelSpeed accelerate <30.000000>;
		spin rbackwheel around x-axis speed wheelSpeed accelerate <30.000000>;
		spin lmidwheel around x-axis speed wheelSpeed accelerate <30.000000>;
		spin lfrontwheel around x-axis speed wheelSpeed accelerate <30.000000>;
		spin lbackwheel around x-axis speed wheelSpeed accelerate <30.000000>;
		sleep 200;
	}
	return (0);
}


closelegs()
{
	call-script stopWheels();
	sleep 100;
	return (0);
}

openlegs()
{
	// nothing to do here
	sleep 100;

	return (0);
}

swim()
{
	sleep 500;
	call-script closelegs();
	return (0);
}

MotionControl(justMoved)
{
	justMoved = TRUE;
	while( TRUE )
	{
		// over water
		if( ( !bSwimming ) AND (terrainStatus == 2 OR terrainStatus == 1))
		{
			call-script closelegs();
			bSwimming = TRUE;
			justMoved = TRUE;
		}
		// over land
		if( bSwimming AND terrainStatus == 4 )
		{
			call-script openlegs();
			bSwimming = FALSE;
			justMoved = TRUE;
		}
		if( bMoving )
		{
			if( bSwimming )
			{
				//set MAX_SPEED to waterSpeed; // REPLACED BY GADGET
				set UPRIGHT to TRUE;
				call-script swim();
			}
			if( !bSwimming )
			{
				//set MAX_SPEED to landSpeed; // REPLACED BY GADGET
				set UPRIGHT to FALSE;
				call-script walk();
			}
			justMoved = TRUE;
		}
		if( !bMoving )
		{
			if( justMoved AND ( !bSwimming ) )
			{
				call-script stopWheels();
	
				justMoved = FALSE;
			}
			sleep 100;
		}
	}
	return (0);
}

Create()
{
	landSpeed = get MAX_SPEED;
	waterSpeed = landSpeed * 100/150;
	bMoving = FALSE;
	bAiming = FALSE;
	bSwimming = FALSE;
	gun_1 = [0];
	gun_2 = [0];
	call-script stopAimHelper1(<100>,<100>);
	start-script WheelSpeedControl();
	start-script MotionControl();
	start-script SmokeUnit();
	return (0);
}

StartMoving()
{
	bMoving = TRUE;
	signal SIG_MOVE;
	set-signal-mask SIG_MOVE;
	while( TRUE )
	{
		if( terrainStatus == 2 )
		{
			emit-sfx 2 from wake1;
			emit-sfx 2 from wake2;
		}
		if( terrainStatus == 1 )
		{
			emit-sfx 2 from wake1;
			emit-sfx 2 from wake2;
		}
		sleep 250;
	}
	return (0);
}

StopMoving()
{
	bMoving = FALSE;
	signal SIG_MOVE;
	return (0);
}

setSFXoccupy(Func_Var_1)
{
	terrainStatus = Func_Var_1;
	return (0);
}


RestoreAfterDelay()
{
	sleep DEFAULT_WEAPON_RESTORE_DELAY;
	call-script stopAimHelper1(<100>,<100>);
	turn turret to y-axis <0.000000> speed <100.000000>;
	turn sleeve to x-axis <0.000000> speed <100.000000>;
	return (0);
}
RestoreAfterDelay2()
{
	sleep DEFAULT_WEAPON_RESTORE_DELAY;
	turn sleeve2 to x-axis <0.000000> speed <100.000000>;
	return (0);
}

AimPrimary(heading, pitch)
{
	call-script updateAimHelper1(heading,pitch,<350>,<350>,HEADING_TOLERANCE,PITCH_TOLERANCE);
	signal SIG_AIM;
	set-signal-mask SIG_AIM;
	bAiming = TRUE;
	turn turret to y-axis heading speed <350.000000>;
	turn sleeve to x-axis <0.000000> - pitch speed <350.000000>;
	if (!aimReady1)
	{
		wait-for-turn turret around y-axis;
		wait-for-turn sleeve around x-axis;
	}
	start-script RestoreAfterDelay();
	return (1);
}


FirePrimary()
{
	if (gun_1 == [0]) {
		move barrel to z-axis [-4.250000] now;
		emit-sfx 1024 from flare;
		sleep 100;
		gun_1 = [1];
		move barrel to z-axis [0.000000] speed [12.000000];
		return (1);
	}
	if (gun_1 == [1]) {
		move barrel2 to z-axis [-4.250000] now;
		emit-sfx 1024 from flare2;
		sleep 100;
		gun_1 = [0];
		move barrel2 to z-axis [0.000000] speed [12.000000];
		return (1);
	}
}


AimFromPrimary(piecenum)
{
	piecenum = turret;
	return (0);
}

QueryPrimary(piecenum)
{
	if (gun_1 == [0]) {
		piecenum = flare;
		return (0);
	}
	if (gun_1 == [1]) {
		piecenum = flare2;
		return (0);
	}	
}

SweetSpot(piecenum)
{
	piecenum = turret;
	return (0);
}



AimSecondary(heading, pitch)
{
	//TODO fix this eventually...
	// if it's not going to be able to fire on the next ~2s, don't try to aim
	//if ((get WEAPON_RELOADSTATE(2)) > (get GAME_FRAME) + 40)) { return(0); }

	//call-script updateAimHelper1(heading,pitch,<200>,<200>,4*HEADING_TOLERANCE,8*PITCH_TOLERANCE);
	signal SIG_AIM2;
	set-signal-mask SIG_AIM2;
	//bAiming = TRUE;
	//turn turret to y-axis heading speed <200.000000>;
	turn sleeve2 to x-axis <0.000000> - pitch speed <400.000000>;
	//if (!aimReady1)
	//{
		//wait-for-turn turret around y-axis;
		wait-for-turn sleeve2 around x-axis;
	//}
	start-script RestoreAfterDelay2();
	return (1);
}


FireSecondary()
{
	if (gun_2 == [0])
	{
		emit-sfx 1024+2 from lflare;
		sleep 100;
		gun_2 = [1];
		return (1);
	}
	if (gun_2 == [1])
	{
		emit-sfx 1024+2 from rflare;
		sleep 100;
		gun_2 = [0];
		return (1);
	}
	
}


AimFromSecondary(piecenum)
{
	piecenum = sleeve2;
	return (0);
}

QuerySecondary(piecenum)
{
	if (gun_2 == [0])
	{
		piecenum = lflare;
		return (0);
	}
	if (gun_2 == [1])
	{
		piecenum = rflare;
		return (0);
	}
}


Killed(severity, corpsetype)
{
	if( severity <= 50 )
	{
		explode sleeve type SHATTER;
		explode sleeve2 type SHATTER;
		return (1);
	}
	explode hull type SHATTER;
	explode bottom type SHATTER;
	explode turret type SHATTER;
	explode sleeve type SHATTER;
	explode barrel type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP5;
	return (2);
}
