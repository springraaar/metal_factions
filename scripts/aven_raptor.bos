#define TA			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"

#define SPEEDUP_FACTOR	400

#define HEADING_TOLERANCE	<25>
#define PITCH_TOLERANCE		<15>


piece  torso, firept, hips, rfoot, lfoot, launcher, lthigh,pack, rthigh, rleg, lleg, ground, l1, t2, sleeve, s1,s2,barrel1,flare1,barrel2,flare2, door1, door2;

static-var  gun_1, mATurnSpd1,mATurnSpd2,mATurnSpd3,mASpdFactor, mAMoveSpd1, mADelay1, legAngle1, legAngle2, legAngle3, bMoving, bAiming;

#include "aimhelper1.h"

// Signal definitions
#define SIG_MOVE			2
#define SIG_AIM				4
#define SIG_AIM2			8

MotionSpeedControl(maxSpeed,currentSpeed)
{
	maxSpeed = get MAX_SPEED;
	currentSpeed = 0;
	mASpdFactor = SPEEDUP_FACTOR;

	
	while(TRUE)
	{
		currentSpeed = get CURRENT_SPEED;
		mASpdFactor = SPEEDUP_FACTOR * currentSpeed / maxSpeed;

		//call-script lua_cobDebug(mASpdFactor);
		if ( mASpdFactor < 120 )
		{
			mASpdFactor = 120;
		}
		
		
		mAMoveSpd1 = [3.000000] * mASpdFactor / 100;
		mATurnSpd1 = <315.000000> * (100 + mASpdFactor) / 200;
		mATurnSpd2 = <200.000000> * (100 + mASpdFactor) / 200;
		mATurnSpd3 = <50.000000> * (100 + mASpdFactor) / 200;

		legAngle1 = <45.000000>;
		legAngle2 = <30.000000>;
		legAngle3 = <15.000000>;
		if ( mASpdFactor < 100 )
		{
			legAngle1 = legAngle1 * (100 + mASpdFactor) / 200;
			legAngle2 = legAngle2 * (100 + mASpdFactor) / 200;
			legAngle3 = legAngle3 * (100 + mASpdFactor) / 200;
		}
		mADelay1 = 50;

		if(!bMoving)
		{
			mADelay1 = 50;
		}
		if ( mASpdFactor >= 50 AND bMoving  )
		{
			mADelay1 = mADelay1 * 100 / mASpdFactor;
		}
	
		sleep 30;
	}
}

walk()
{
	var slowTurnSpd, slowTurnSpd2;

	slowTurnSpd = mATurnSpd2 / 4;
	slowTurnSpd2 = mATurnSpd2 / 6;
	
	
	// back contact point : right foot behind, left foot forward
	if( bMoving )
	{
		turn lthigh to x-axis <0.000000>-legAngle1 speed mATurnSpd1;
		turn lleg to x-axis legAngle2 speed mATurnSpd2;
		turn lfoot to x-axis legAngle3 speed mATurnSpd1;

		turn rthigh to x-axis legAngle2 speed mATurnSpd2;
		turn rleg to x-axis legAngle3 speed mATurnSpd2;
		turn rfoot to x-axis <0.000000>-legAngle2 speed mATurnSpd1;

		move hips to y-axis [-0.500000] speed mAMoveSpd1;
		move hips to z-axis [2.000000] speed mAMoveSpd1;
		turn hips to x-axis <4.000000> speed slowTurnSpd2;

		if(!bAiming)
		{
			// turn torso left, right arm forward
			turn torso to y-axis <5.000000> speed slowTurnSpd2;
		}
		
		wait-for-turn lthigh around x-axis;
		wait-for-turn rthigh around x-axis;
		wait-for-turn lleg around x-axis;
		wait-for-turn rleg around x-axis;
	}

	// passing pose 2 : right foot raising, left foot on the ground
	if( bMoving )
	{
		turn lthigh to x-axis <0.000000> speed mATurnSpd2;
		turn lleg to x-axis <0.000000> speed mATurnSpd2;
		turn lfoot to x-axis <10.000000> speed mATurnSpd3;

		turn rthigh to x-axis <60.000000> speed mATurnSpd1;
		turn rleg to x-axis <-60.000000> speed mATurnSpd1;
		turn rfoot to x-axis <10.000000> speed mATurnSpd1;

		if(!bAiming)
		{
			// restore position
			turn torso to y-axis <0.000000> speed slowTurnSpd2;
		}

		sleep mADelay1;
		move hips to y-axis [0.000000] speed mAMoveSpd1;
		move hips to z-axis [0.000000] speed mAMoveSpd1;
		turn hips to x-axis <0.000000> speed slowTurnSpd2;
		
		wait-for-turn lthigh around x-axis;
		wait-for-turn rthigh around x-axis;
		wait-for-turn lleg around x-axis;
		wait-for-turn rleg around x-axis;

	}
	
	// forward contact point : right foot forward, left foot behind
	if( bMoving )
	{
		turn lthigh to x-axis legAngle2 speed mATurnSpd2;
		turn lleg to x-axis legAngle3 speed mATurnSpd2;
		turn lfoot to x-axis <0>-legAngle2 speed mATurnSpd1;

		turn rthigh to x-axis <0>-legAngle1 speed mATurnSpd1;
		turn rleg to x-axis legAngle2 speed mATurnSpd2;
		turn rfoot to x-axis legAngle3 speed mATurnSpd1;
		
		move hips to y-axis [-0.500000] speed mAMoveSpd1;
		move hips to z-axis [2.000000] speed mAMoveSpd1;
		turn hips to x-axis <4.000000> speed slowTurnSpd2;
		
		if(!bAiming)
		{
			// turn torso right, left arm forward
			turn torso to y-axis <-10.000000> speed slowTurnSpd2;
		}

		sleep mADelay1;
		wait-for-turn lthigh around x-axis;
		wait-for-turn rthigh around x-axis;
		wait-for-turn lleg around x-axis;
		wait-for-turn rleg around x-axis;
	}

	// passing pose 1 : right foot on ground, left foot raising
	if( bMoving )
	{
		turn lthigh to x-axis <60.000000> speed mATurnSpd1;
		turn lleg to x-axis <-60.000000> speed mATurnSpd1;
		turn lfoot to x-axis <10.000000> speed mATurnSpd1;
		
		turn rthigh to x-axis <0.000000> speed mATurnSpd2;
		turn rleg to x-axis <0.000000> speed mATurnSpd2;
		turn rfoot to x-axis <10.000000> speed mATurnSpd3;

		
		if(!bAiming)
		{
			// restore position
			turn torso to y-axis <0.000000> speed slowTurnSpd2;
		}
		
		sleep mADelay1;
		move hips to y-axis [0.000000] speed mAMoveSpd1;
		move hips to z-axis [0.000000] speed mAMoveSpd1;
		turn hips to x-axis <0.000000> speed slowTurnSpd2;
		
		wait-for-turn lthigh around x-axis;
		wait-for-turn rthigh around x-axis;
		wait-for-turn lleg around x-axis;
		wait-for-turn rleg around x-axis;
	}
	
	return;
}




SmokeUnit(healthpercent, sleeptime, smoketype)
{
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 400;
	}
	while( TRUE )
	{
		healthpercent = get HEALTH;
		if( healthpercent < 66 )
		{
			smoketype = 256 | 2;
			if( Rand( 1, 66 ) < healthpercent )
			{
				smoketype = 256 | 1;
			}
			emit-sfx smoketype from torso;
		}
		sleeptime = healthpercent * 50;
		if( sleeptime < 200 )
		{
			sleeptime = 200;
		}
		sleep sleeptime;
	}
	return (0);
}


MotionControl(moving, aiming, justmoved)
{
	justmoved = TRUE;
	while( TRUE )
	{
		moving = bMoving;
		aiming = bAiming;
		if( moving )
		{
			call-script walk();
			justmoved = TRUE;
		}
		if( !moving )
		{
			if( justMoved )
			{
				move hips to y-axis [0.000000] speed [25.000000];
				turn hips to x-axis <0.000000> speed <20.000000>;
				turn rthigh to x-axis <0.000000> speed <200.000000>;
				turn rleg to x-axis <0.000000> speed <200.000000>;
				turn lthigh to x-axis <0.000000> speed <200.000000>;
				turn lleg to x-axis <0.000000> speed <200.000000>;
				turn rfoot to x-axis <0.000000> speed <200.000000>;
				turn lfoot to x-axis <0.000000> speed <200.000000>;

				if( !aiming )
				{
					turn torso to y-axis <0.000000> speed <200.000000>;
				}

				justMoved = FALSE;
			}
			sleep 100;
		}
	}
	return (0);
}

StartMoving()
{
	bMoving = TRUE;
	return (0);
}

StopMoving()
{
	bMoving = FALSE;
	return (0);
}


Create()
{
	gun_1 = [0];
	bMoving = FALSE;
	bAiming = FALSE;
	call-script stopAimHelper1(<1000>,<1000>);
	start-script SmokeUnit();
	start-script MotionControl();
	start-script MotionSpeedControl();	
	return (0);
}

SweetSpot(piecenum)
{
	piecenum = torso;
	return (0);
}

AimFromPrimary(piecenum)
{
	piecenum = torso;
	return (0);
}


AimFromSecondary(piecenum)
{
	piecenum = torso;
	return (0);
}

QueryPrimary(piecenum)
{
	if( gun_1 == [0] )
	{
		piecenum = flare1;
		return 0;
	}
	if( gun_1 == [1] )
	{
		piecenum = flare2;
		return 0;
	}
	return (0);
}


QuerySecondary(piecenum)
{
	piecenum = firept;
	return (0);
}
RestoreAfterDelay()
{
	set-signal-mask SIG_AIM;
	set-signal-mask SIG_AIM2;
	sleep 5000;
	call-script stopAimHelper1(<100>,<100>);
	turn torso to y-axis <0.000000> speed <100.000000>;
	turn launcher to x-axis <0.000000> speed <100.000000>;
	turn sleeve to x-axis <0.000000> speed <100.000000>;
	bAiming = FALSE;
	return (0);
}

AimPrimary(heading, pitch)
{
	call-script updateAimHelper1(heading,pitch,<190>,<190>,HEADING_TOLERANCE,PITCH_TOLERANCE);
	signal SIG_AIM;
	set-signal-mask SIG_AIM;
	bAiming = TRUE;
	turn torso to y-axis heading speed <190.000000>;
	turn sleeve to x-axis <0.000000> - pitch speed <190.000000>;
	if (!aimReady1)
	{
		wait-for-turn torso around y-axis;
		wait-for-turn sleeve around x-axis;
	}
	start-script RestoreAfterDelay();
	return (1);
}



AimSecondary(heading, pitch)
{
	call-script updateAimHelper1(heading,pitch,<190>,<190>,HEADING_TOLERANCE,PITCH_TOLERANCE);
	signal SIG_AIM2;
	set-signal-mask SIG_AIM2;
	bAiming = TRUE;
	turn torso to y-axis heading speed <190.000000>;
	//turn launcher to x-axis <0.000000> - pitch speed <290.000000>;
	if (!aimReady1)
	{
		wait-for-turn torso around y-axis;
	}
	//wait-for-turn launcher around x-axis;
	//start-script RestoreAfterDelay();
	return (1);
}


Shot2()
{
	turn door1 to y-axis <-90.000000> now;
	turn door2 to y-axis <90.000000> now;
	emit-sfx 1024 + 1 from firept;
	sleep 1500;
	turn door1 to y-axis <0.000000> speed <130.000000>;
	turn door2 to y-axis <0.000000> speed <130.000000>;
	return (0);
}

FirePrimary()
{
	if( gun_1 == [0] )
	{
		emit-sfx 1024 + 0 from flare1;
		sleep 100;
		gun_1 = [1];
		return 0;
	}
	if( gun_1 == [1] )
	{
		emit-sfx 1024 + 0 from flare2;
		sleep 100;
		gun_1 = [0];
		return 0;
	}

	return 0;
}


FireSecondary()
{
	return 0;
}

Killed(severity, corpsetype)
{
	if( severity <= 50 )
	{
		explode t2 type SHATTER | BITMAP2;
		explode s1 type SHATTER | BITMAP2;
		explode s2 type SHATTER | BITMAP2;
		explode pack type SHATTER | BITMAP2;
		return (1);
	}
	explode torso type SHATTER | BITMAP2;
	explode t2 type SHATTER | BITMAP2;
	explode s1 type SHATTER | BITMAP2;
	explode s2 type SHATTER | BITMAP2;
	explode pack type SHATTER | BITMAP2;
	explode lthigh type SHATTER | BITMAP2;
	explode lleg type SHATTER | BITMAP2;
	explode rthigh type SHATTER | BITMAP2;
	explode rleg type SHATTER | BITMAP2;
	
	return (2);
}
