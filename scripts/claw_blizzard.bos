#define TA			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"

piece  base,hull,bottom,wingsup, wingsup2,bwingl,bwingr,fwingl,fwingr, weapon1, barrel1,flare1,weapon2,barrel2,flare2,weapon3,barrel3,flare3,weapon4,barrel4,flare4, jet1,jet2,jet3,ljp,rjp,cjp;

static-var  Static_Var_2, statechg_DesiredState, statechg_StateChanging,canaim, gun_1, gun_2, bAiming;

// signal definitions
#define SIG_AIM				2
#define SIG_AIM_2			4

lua_HeavyGunshipStrafe() { return 0; }

HeavyGunshipStrafe()
{
	while (TRUE)
	{
		if( bAiming )
		{
			//call-script lua_HeavyGunshipStrafe();
		}
		sleep 200;
	}
}

SmokeUnit(healthpercent, sleeptime, smoketype)
{
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 400;
	}
	while( TRUE )
	{
		healthpercent = get HEALTH;
		if( healthpercent < 66 )
		{
			smoketype = 256 | 2;
			if( Rand( 1, 66 ) < healthpercent )
			{
				smoketype = 256 | 1;
			}
			emit-sfx smoketype from base;
		}
		sleeptime = healthpercent * 50;
		if( sleeptime < 200 )
		{
			sleeptime = 200;
		}
		sleep sleeptime;
	}
	return (0);
	// Build by COBBLER Ver4.0 Copyright @1998 DIGITAL CONCEPT SOFTWARE (MANU@inext.fr) / http://www.annihilationcenter.com/DCS/  
}

Takeoff()
{
	Static_Var_2 = 1;
}

Landing()
{
	turn hull to x-axis <0.000000> speed <70.000000>;
	Static_Var_2 = 0;
}

InitState()
{
	statechg_DesiredState = TRUE;
	statechg_StateChanging = FALSE;
}

RequestState(requestedstate, currentstate)
{
	if( statechg_StateChanging )
	{
		statechg_DesiredState = requestedstate;
		return (0);
	}
	statechg_StateChanging = TRUE;
	currentstate = statechg_DesiredState;
	statechg_DesiredState = requestedstate;
	while( statechg_DesiredState != currentstate )
	{
		if( statechg_DesiredState == 0 )
		{
			start-script Takeoff();
			currentstate = 0;
		}
		if( statechg_DesiredState == 1 )
		{
			start-script Landing();
			currentstate = 1;
		}
	}
	statechg_StateChanging = FALSE;
}


RestoreAfterDelay()
{
	sleep DEFAULT_WEAPON_RESTORE_DELAY;
	bAiming = FALSE;
}


Create()
{
	hide flare1;
	hide flare2;
	Static_Var_2 = 0;
	gun_1 = [0];
	gun_2 = [0];
	bAiming = FALSE;
	call-script InitState();
	start-script SmokeUnit();
	start-script HeavyGunshipStrafe();
}

Activate()
{
	start-script RequestState(0);
}

Deactivate()
{
	start-script RequestState(1);
}

SweetSpot(piecenum)
{
	piecenum = base;
}

FirePrimary()
{
	if(gun_1 == [0])
	{
		emit-sfx 1024+0 from flare1;
		sleep 150;
		gun_1 = [1];
		return (0);
	}
	if(gun_1 == [1])
	{
		emit-sfx 1024+0 from flare2;
		sleep 150;
		gun_1 = [0];
		return (0);
	}
}

QueryPrimary(piecenum)
{
	if(gun_1 == [0] )
	{
		piecenum = flare1;
	}
	if(gun_1 == [1] )
	{
		piecenum = flare2;
	}
}

AimFromPrimary(piecenum)
{
	if(gun_1 == [0] )
	{
		piecenum = weapon1;
	}
	if(gun_1 == [1] )
	{
		piecenum = weapon2;
	}
	return (0);
}

AimPrimary(heading, pitch)
{
	signal SIG_AIM;
	set-signal-mask SIG_AIM;
	bAiming = TRUE;
	start-script RestoreAfterDelay();
	return (1);
}

FireSecondary()
{
	if(gun_2 == [0])
	{
		emit-sfx 1024+0 from flare3;
		sleep 100;
		gun_2 = [1];
		return (0);
	}
	if(gun_2 == [1])
	{
		emit-sfx 1024+0 from flare4;
		sleep 100;
		gun_2 = [0];
		return (0);
	}
}

QuerySecondary(piecenum)
{
	if(gun_2 == [0] )
	{
		piecenum = flare3;
	}
	if(gun_2 == [1] )
	{
		piecenum = flare4;
	}
}

AimFromSecondary(piecenum)
{
	if(gun_2 == [0] )
	{
		piecenum = weapon3;
	}
	if(gun_2 == [1] )
	{
		piecenum = weapon4;
	}
	return (0);
}

AimSecondary(heading, pitch)
{
	signal SIG_AIM_2;
	set-signal-mask SIG_AIM_2;
	bAiming = TRUE;
	start-script RestoreAfterDelay();
	return (1);
}

Killed(severity, corpsetype)
{
	corpsetype = 3;
	explode weapon3 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
	explode weapon4 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
	explode fwingl type SHATTER | EXPLODE_ON_HIT | BITMAP1;
	explode fwingr type SHATTER | EXPLODE_ON_HIT | BITMAP1;
	explode weapon1 type SHATTER | EXPLODE_ON_HIT | BITMAP1;
	explode weapon2 type SHATTER | EXPLODE_ON_HIT | BITMAP1;
	explode wingsup type SHATTER | EXPLODE_ON_HIT | BITMAP1;
	explode wingsup2 type SHATTER | EXPLODE_ON_HIT | BITMAP1;
	explode jet1 type SHATTER | EXPLODE_ON_HIT | BITMAP1;
	explode jet2 type SHATTER | EXPLODE_ON_HIT | BITMAP1;
	explode jet3 type SHATTER | EXPLODE_ON_HIT | BITMAP1;
}
