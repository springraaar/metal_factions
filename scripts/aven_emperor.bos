#define TA			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"

#define HEADING_TOLERANCE	<15>
#define PITCH_TOLERANCE		<15>

piece  flare1a, flare1b, flare1c, flare21, flare22, flare31, flare32, base, turret1,
       turret2, turret3, sleeve, sleeve2, sleeve3, wake1, wake2, barrel1a, barrel1b, barrel1c, barrel21, barrel22,
       barrel31, barrel32, wings, wings2, wings3, hull, bottom, hull2, h2,h3,h4,h5,h6,h7;

static-var  bAiming, gun_1, gun_2,gun_3, Static_Var_6, Static_Var_7, Static_Var_8;

#include "aimhelper1.h"

// Signal definitions
#define SIG_AIM				1
#define SIG_AIM_2			2
#define SIG_AIM_3			4
#define SIG_MOVE			8


Abs(Func_Var_1)
{
	if( Func_Var_1 >= 0 )
	{
		Static_Var_7 = Func_Var_1;
	}
	else
	{
		Static_Var_7 = 0 - Func_Var_1;
	}
	return (0);
}

ProjXPW(Func_Var_1, Func_Var_2)
{
	if( Func_Var_2 < -21840 )
	{
		Static_Var_7 = Func_Var_1 * ( Func_Var_2 + 32760 ) / 10920;
	}
	else if( Func_Var_2 > 21840 )
	{
		Static_Var_7 = Func_Var_1 * ( 32760 - Func_Var_2 ) / 10920;
	}
	else if( Func_Var_2 < -10920 )
	{
		Static_Var_7 = 0 - Func_Var_1;
	}
	else if( Func_Var_2 > 10920 )
	{
		Static_Var_7 = Func_Var_1;
	}
	else
	{
		Static_Var_7 = Func_Var_1 * Func_Var_2 / 10920;
	}
	return (0);
}

ProjZPW(Func_Var_1, Func_Var_2)
{
	if( Func_Var_2 < -27300 OR Func_Var_2 > 27300 )
	{
		Static_Var_7 = 0 - Func_Var_1;
	}
	else if( Func_Var_2 > 5460 )
	{
		Static_Var_7 = Func_Var_1 * ( 16380 - Func_Var_2 ) / 10920;
	}
	else if( Func_Var_2 < -5460 )
	{
		Static_Var_7 = Func_Var_1 * ( Func_Var_2 + 16380 ) / 10920;
	}
	else
	{
		Static_Var_7 = Func_Var_1;
	}
	return (0);
}

RockZInit()
{
	Static_Var_8 = 0;
	return (0);
}

RockZ(Func_Var_1, Func_Var_2)
{
	//signal 16;
	//set-signal-mask 16;
	call-script ProjXPW(10920 / Func_Var_2,Func_Var_1);
	Static_Var_8 = Static_Var_8 + Static_Var_7;
	call-script Abs(Static_Var_8);
	while( Static_Var_7 > 91 )
	{
		turn base to z-axis Static_Var_8 speed Static_Var_7 * <0.000000>;
		wait-for-turn base around z-axis;
		Static_Var_8 = Static_Var_8 * -1 / 2;
		call-script Abs(Static_Var_8);
	}
	turn base to z-axis <0.000000> speed <0.500000> * <0.000000>;
	return (0);
}

SmokeUnit(healthpercent, sleeptime, smoketype)
{
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 400;
	}
	while( TRUE )
	{
		healthpercent = get HEALTH;
		if( healthpercent < 66 )
		{
			smoketype = 256 | 2;
			if( Rand( 1, 66 ) < healthpercent )
			{
				smoketype = 256 | 1;
			}
			emit-sfx smoketype from base;
		}
		sleeptime = healthpercent * 50;
		if( sleeptime < 200 )
		{
			sleeptime = 200;
		}
		sleep sleeptime;
	}
	return (0);
}

Create()
{
	hide flare1a;
	hide flare1b;
	hide flare1c;
	bAiming = TRUE;
	gun_1 = [0];
	gun_2 = 0;
	gun_3 = 0;
	call-script stopAimHelper1(<1000>,<1000>);
	start-script SmokeUnit();
	//call-script RockZInit();
	return (0);
}

RestorePrimary()
{
	sleep DEFAULT_WEAPON_RESTORE_DELAY2;
	call-script stopAimHelper1(<30>,<30>);
	turn turret1 to y-axis <0.000000> speed <30.000000>;
	turn sleeve to x-axis <0.000000> speed <30.000000>;
	bAiming = FALSE;
	return (0);
}

RestoreSecondary()
{
	sleep DEFAULT_WEAPON_RESTORE_DELAY;
	turn turret2 to y-axis <0.000000> speed <60.000000>;
	turn sleeve2 to x-axis <0.000000> speed <60.000000>;
	return (0);
}
RestoreTertiary()
{
	sleep DEFAULT_WEAPON_RESTORE_DELAY;
	turn turret3 to y-axis <0.000000> speed <60.000000>;
	turn sleeve3 to x-axis <0.000000> speed <60.000000>;
	return (0);
}
StartMoving()
{
	signal SIG_MOVE;
	set-signal-mask SIG_MOVE;
	while( TRUE )
	{
		emit-sfx 2 from wake1;
		emit-sfx 2 from wake2;
		sleep 300;
	}
	return (0);
}

StopMoving()
{
	signal SIG_MOVE;
	return (0);
}

AimPrimary(heading, pitch)
{
	call-script updateAimHelper1(heading,pitch,<60>,<60>,HEADING_TOLERANCE,PITCH_TOLERANCE);
	signal SIG_AIM;
	set-signal-mask SIG_AIM;
	bAiming = TRUE;
	turn turret1 to y-axis heading speed <60.000000>;
	turn sleeve to x-axis <0.000000> - pitch speed <60.000000>;
	if (!aimReady1)
	{
		wait-for-turn turret1 around y-axis;
		wait-for-turn sleeve around x-axis;
	}

	start-script RestorePrimary();
	return (1);
}

AimSecondary(heading, pitch)
{
	signal SIG_AIM_2;
	set-signal-mask SIG_AIM_2;
	turn turret2 to y-axis heading speed <80.000000>;
	turn sleeve2 to x-axis <0.000000> - pitch speed <80.000000>;
	wait-for-turn turret2 around y-axis;
	wait-for-turn sleeve2 around x-axis;
	start-script RestoreSecondary();
	return (1);
}

AimTertiary(heading, pitch)
{
	signal SIG_AIM_3;
	set-signal-mask SIG_AIM_3;
	turn turret3 to y-axis heading speed <80.000000>;
	turn sleeve3 to x-axis <0.000000> - pitch speed <80.000000>;
	wait-for-turn turret3 around y-axis;
	wait-for-turn sleeve3 around x-axis;
	start-script RestoreTertiary();
	return (1);
}

FirePrimary()
{
	//start-script RockZ(-5,Static_Var_6);
	if( gun_1 == [0] )
	{
		emit-sfx 1024 + 1 from flare1a;
		move barrel1a to z-axis [-6.250000] now;
		sleep 150;
		gun_1 = [1];
		move barrel1a to z-axis [0.000000] speed [6.500000];
		return 0;
	}
	if( gun_1 == [1] )
	{
		emit-sfx 1024 + 1 from flare1b;
		move barrel1b to z-axis [-6.250000] now;
		sleep 150;
		gun_1 = [2];
		move barrel1b to z-axis [0.000000] speed [6.500000];
		return 0;
	}
	if( gun_1 == [2] )
	{
		emit-sfx 1024 + 1 from flare1c;
		move barrel1c to z-axis [-6.250000] now;
		sleep 150;
		gun_1 = [0];
		move barrel1c to z-axis [0.000000] speed [6.500000];
		return 0;
	}
	return (0);
}

FireSecondary()
{
	if( gun_2 == 0 )
	{
		emit-sfx 1024 + 1 from flare21;
		move barrel21 to z-axis [-4.250000] now;
		sleep 150;
		gun_2 = 1;
		move barrel21 to z-axis [0.000000] speed [5.500000];
		return 0;
	}
	if( gun_2 == 1 )
	{
		emit-sfx 1024 + 1 from flare22;
		move barrel22 to z-axis [-4.250000] now;
		sleep 150;
		gun_2 = 0;
		move barrel22 to z-axis [0.000000] speed [5.500000];
		return 0;
	}
	return (0);
}


FireTertiary()
{
	if( gun_3 == 0 )
	{
		emit-sfx 1024 + 1 from flare31;
		move barrel31 to z-axis [-4.250000] now;
		sleep 150;
		gun_3 = 1;
		move barrel31 to z-axis [0.000000] speed [5.500000];
		return 0;
	}
	if( gun_3 == 1 )
	{
		emit-sfx 1024 + 1 from flare32;
		move barrel32 to z-axis [-4.250000] now;
		sleep 150;
		gun_3 = 0;
		move barrel32 to z-axis [0.000000] speed [5.500000];
		return 0;
	}
	return (0);
}
AimFromPrimary(piecenum)
{
	piecenum = turret1;
	return (0);
}

QueryPrimary(piecenum)
{
	if( gun_1 == [0] )
	{
		piecenum = flare1a;
	}
	if( gun_1 == [1] )
	{
		piecenum = flare1b;
	}
	if( gun_1 == [2] )
	{
		piecenum = flare1c;
	}
	return (0);
}

AimFromSecondary(piecenum)
{
	piecenum = turret2;
	return (0);
}

QuerySecondary(piecenum)
{
	if( gun_2 == 0 )
	{
		piecenum = flare21;
	}
	if( gun_2 == 1 )
	{
		piecenum = flare22;
	}
	return (0);
}
AimFromTertiary(piecenum)
{
	piecenum = turret3;
	return (0);
}

QueryTertiary(piecenum)
{
	if( gun_3 == 0 )
	{
		piecenum = flare31;
	}
	if( gun_3 == 1 )
	{
		piecenum = flare32;
	}
	return (0);
}

Killed(severity, corpsetype)
{
	hide flare1a;
	hide flare1b;
	hide flare1c;
	if( severity <= 50 )
	{
		explode turret1 type SHATTER | BITMAP5;
		explode turret2 type SHATTER | BITMAP5;
		explode turret3 type SHATTER | BITMAP5;
		explode h4 type SHATTER | BITMAP5;
		explode h5 type SHATTER | BITMAP5;
		explode h6 type SHATTER | BITMAP5;
		return (1);
	}
	explode turret1 type SHATTER | BITMAP5;
	explode turret2 type SHATTER | BITMAP5;
	explode turret3 type SHATTER | BITMAP5;
	explode h4 type SHATTER | BITMAP5;
	explode h5 type SHATTER | BITMAP5;
	explode h6 type SHATTER | BITMAP5;
	return (2);
}
