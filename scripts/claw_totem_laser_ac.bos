#define TA			// This is a TA script


#define ACTIVATION_STEP_MS		240000
#define CHARGES_PER_STEP		10	
#define METAL_PER_STEP			3
#define ENERGY_PER_STEP			15
#define MAX_CHARGES				1000

#include "sfxtype.h"
#include "exptype.h"

piece  base, b2,b3,clighton,clightoff,lon1,loff1,lon2,loff2,lon3,loff3,lon4,loff4,logo1,logo2,logo3,logo4,d2,turret,sleeve,barrel,flare,turret2,sleeve21,barrel21,flare21,sleeve22,barrel22,flare22;

static-var  charges, gun_2;


// Signal definitions
#define SIG_AIM				2
#define SIG_AIM2			4


lua_energyTransaction() { return 0; }
lua_metalTransaction() { return 0; }


energyTransactions() {
	// send resources every half second
	while (TRUE) {
		while( get BUILD_PERCENT_LEFT ) {
			sleep 100;
		}
		if (charges >= CHARGES_PER_STEP) {
			call-script lua_energyTransaction(ENERGY_PER_STEP); 
			call-script lua_metalTransaction(METAL_PER_STEP*20);   // divided by 20 on the gadget 
			charges = charges - CHARGES_PER_STEP;
		}
		sleep 467;		// 15 frames
	}
}


updateActivationLevel() {
	while( TRUE ) {
	
		while( get BUILD_PERCENT_LEFT ) {
			sleep 100;
		}
		if ( charges > 800) {
			show lon1;
			hide loff1;
			show lon2;
			hide loff2;
			show lon3;
			hide loff3;
			show lon4;
			hide loff4;
			show clighton;
			hide clightoff;
		} else if ( charges > 600) {
			show lon1;
			hide loff1;
			show lon2;
			hide loff2;
			show lon3;
			hide loff3;
			show lon4;
			hide loff4;
			hide clighton;
			show clightoff;
		} else if ( charges > 400) {
			show lon1;
			hide loff1;
			show lon2;
			hide loff2;
			show lon3;
			hide loff3;
			hide lon4;
			show loff4;
			hide clighton;
			show clightoff;
		} else if ( charges > 200) {
			show lon1;
			hide loff1;
			show lon2;
			hide loff2;
			hide lon3;
			show loff3;
			hide lon4;
			show loff4;
			hide clighton;
			show clightoff;
		} else if ( charges > 20) {
			show lon1;
			hide loff1;
			hide lon2;
			show loff2;
			hide lon3;
			show loff3;
			hide lon4;
			show loff4;
			hide clighton;
			show clightoff;
		} else {
			hide lon1;
			show loff1;
			hide lon2;
			show loff2;
			hide lon3;
			show loff3;
			hide lon4;
			show loff4;
			hide clighton;
			show clightoff;
		}
		sleep 100;
	}
}

// add charges, charges greater than the cap are discarded
addCharges(chargesToAdd) {
	charges = charges + chargesToAdd;
	//get PRINT(charges)
	if (charges > MAX_CHARGES) {
		charges = MAX_CHARGES;
	}
}

SmokeUnit(healthpercent, sleeptime, smoketype)
{
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 400;
	}
	while( TRUE )
	{
		healthpercent = get HEALTH;
		if( healthpercent < 66 )
		{
			smoketype = 256 | 2;
			if( Rand( 1, 66 ) < healthpercent )
			{
				smoketype = 256 | 1;
			}
			emit-sfx smoketype from base;
		}
		sleeptime = healthpercent * 50;
		if( sleeptime < 200 )
		{
			sleeptime = 200;
		}
		sleep sleeptime;
	}
	return (0);
}

Create()
{
	start-script SmokeUnit();
	charges = 0;
	gun_2 = 0;
	
	start-script updateActivationLevel();
	start-script energyTransactions();
	return (0);
}


RestoreAfterDelay()
{
	sleep DEFAULT_WEAPON_RESTORE_DELAY;
	turn turret to y-axis <0.000000> speed <100.016484>;
	turn sleeve to x-axis <0.000000> speed <100.005495>;
}

AimPrimary(heading, pitch)
{
	signal SIG_AIM;
	set-signal-mask SIG_AIM;
	turn turret to y-axis heading speed <300>;
	turn sleeve to x-axis <0.000000> - pitch speed <300>;
	wait-for-turn turret around y-axis;
	wait-for-turn sleeve around x-axis;
	start-script RestoreAfterDelay();
	return (1);
}

FirePrimary()
{
		emit-sfx 1024 + 0 from flare;
		return (0);
}

AimFromPrimary(piecenum)
{
	piecenum = turret;
}

QueryPrimary(piecenum)
{
	piecenum = flare;
}


RestoreAfterDelay2()
{
	sleep DEFAULT_WEAPON_RESTORE_DELAY;
	turn turret2 to y-axis <0.000000> speed <150.016484>;
	turn sleeve21 to x-axis <0.000000> speed <150.005495>;
	turn sleeve22 to x-axis <0.000000> speed <150.005495>;
}

AimSecondary(heading, pitch)
{
	signal SIG_AIM2;
	set-signal-mask SIG_AIM2;
	turn turret2 to y-axis heading speed <450>;
	turn sleeve21 to x-axis <0.000000> - pitch speed <450>;
	turn sleeve22 to x-axis <0.000000> - pitch speed <450>;
	wait-for-turn turret2 around y-axis;
	wait-for-turn sleeve21 around x-axis;
	wait-for-turn sleeve22 around x-axis;
	start-script RestoreAfterDelay2();
	return (1);
}


FireSecondary()
{
	if (gun_2 == 0) {
		move barrel21 to z-axis [-1] now;
		emit-sfx 1024 + 1 from flare21;
		sleep 30;
		gun_2 = 1;
		sleep 60;
		move barrel21 to z-axis [0] speed [5];
	} else {
		move barrel22 to z-axis [-1] now;
		emit-sfx 1024 + 1 from flare22;
		sleep 30;
		gun_2 = 0;
		sleep 60;
		move barrel22 to z-axis [0] speed [5];
	}
	
	return (0);
}

AimFromSecondary(piecenum)
{
	piecenum = turret2;
}

QuerySecondary(piecenum)
{
	if (gun_2 == 0) {
		piecenum = flare21;
	} else {
		piecenum = flare22;
	}
}

Killed(severity, corpsetype)
{
	if( severity <= 50 )
	{
		explode logo1 type SHATTER;
		explode logo2 type SHATTER;
		explode logo3 type SHATTER;
		explode logo4 type SHATTER;
		return (1);
	}

	explode d2 type SHATTER;
	explode turret type SHATTER;
	explode logo1 type SHATTER;
	explode logo2 type SHATTER;
	explode logo3 type SHATTER;
	explode logo4 type SHATTER;
	
	return (2);
}