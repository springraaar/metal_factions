#define TA			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"

#define SPEEDUP_FACTOR 90


piece  base,hull,bottom, frontsup,frontwheel,backwheel,backsup, base2, firept1,firept2,misbase1,misbase2,s2;

static-var  bMoving, bAiming, bSwimming, terrainStatus, wheelSpeed, wheelAcceleration, gun_1;


// Signal definitions
#define SIG_MOVE			2
#define SIG_AIM				4



WheelSpeedControl(maxSpeed,currentSpeed)
{
	maxSpeed = get MAX_SPEED;
	bMoving = FALSE;
	while(TRUE)
	{
		currentSpeed = get CURRENT_SPEED;

		wheelSpeed = (currentSpeed*SPEEDUP_FACTOR) / maxSpeed * 728;
		wheelAcceleration = wheelSpeed;

		sleep 100;
	}
}

SmokeUnit(healthpercent, sleeptime, smoketype)
{
	var Func_Var_4;
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 400;
	}
	while( TRUE )
	{
		healthpercent = get HEALTH;
		if( healthpercent < 66 )
		{
			smoketype = 256 | 2;
			if( Rand( 1, 66 ) < healthpercent )
			{
				smoketype = 256 | 1;
			}
			emit-sfx smoketype from hull;
		}
		sleeptime = healthpercent * 50;
		if( sleeptime < 200 )
		{
			sleeptime = 200;
		}
		sleep sleeptime;
	}
	return (0);
}

stopWheels()
{
	stop-spin frontwheel around x-axis decelerate <50.000000>;
	stop-spin backwheel around x-axis decelerate <50.000000>;
	return (0);
}

walk()
{
	if( bMoving )
	{
		spin frontwheel around x-axis speed wheelSpeed accelerate <40.000000>;
		spin backwheel around x-axis speed wheelSpeed accelerate <40.000000>;
		sleep 200;
	}
	return (0);
}


closelegs()
{
	call-script stopWheels();
	sleep 100;
	return (0);
}

openlegs()
{
	// nothing to do here
	sleep 100;

	return (0);
}

swim()
{
	sleep 500;
	call-script closelegs();
	return (0);
}

MotionControl(justMoved)
{
	justMoved = TRUE;
	bSwimming = FALSE;
	while( TRUE )
	{
		if( bMoving )
		{
			call-script walk();
			justMoved = TRUE;
		}
		if( !bMoving )
		{
			if( justMoved )
			{
				call-script stopWheels();
				justMoved = FALSE;
			}
			sleep 100;
		}
	}
	return (0);
}

Create()
{
	bMoving = FALSE;
	bAiming = FALSE;
	bSwimming = FALSE;
	gun_1 = 0;
	start-script WheelSpeedControl();
	start-script MotionControl();
	start-script SmokeUnit();
	return (0);
}

StartMoving()
{
	bMoving = TRUE;
	return (0);
}

StopMoving()
{
	bMoving = FALSE;
	return (0);
}

setSFXoccupy(Func_Var_1)
{
	terrainStatus = Func_Var_1;
	return (0);
}



AimPrimary(heading, pitch)
{
	return (1);
}


FirePrimary()
{
	if (gun_1 == 0)
	{
		emit-sfx 1024 from firept1;
		sleep 100;
		gun_1 = 1;
		return(0);
	}
	if (gun_1 == 1)
	{
		emit-sfx 1024 from firept2;
		sleep 100;
		gun_1 = 0;
		return(0);
	}
}


AimFromPrimary(piecenum)
{
	piecenum = s2;
	return (0);
}

QueryPrimary(piecenum)
{
	if (gun_1 == 0)
	{
		piecenum = firept1;
		return (0);
	}
	if (gun_1 == 1)
	{
		piecenum = firept2;
		return (0);
	}	
}


Killed(severity, corpsetype)
{
	if( severity <= 50 )
	{
		explode misbase1 type SHATTER;
		explode misbase2 type SHATTER;
		return (1);
	}
	explode hull type SHATTER;
	explode bottom type SHATTER;
	explode misbase1 type SHATTER;
	explode misbase2 type SHATTER;
	return (2);
}
