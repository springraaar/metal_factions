#define TA			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"

#define SPEEDUP_FACTOR 90

#define HEADING_TOLERANCE	<25>
#define PITCH_TOLERANCE		<15>

piece  ground, hips, leg1,bleg,leg2,bleg2,leg3,bleg3,leg4,bleg4, body, tbase, turret, sleeve, barrel11,barrel12,barrel13, flare11,flare12,flare13, b2, legsup1, legsup2, legsup3, legsup4,launcher,ldoor,rdoor,b1f1,b1f2,b1f3,b1f4,b2f1,b2f2,b2f3,b2f4;

static-var  bMoving, isOpen, bAiming, gun_1,gun_2,mASpdFactor;

#include "aimhelper1.h"

// Signal definitions
#define SIG_MOVE			2
#define SIG_AIM				4
#define SIG_AIM2			8


MotionSpeedControl(minSpeed, maxSpeed,currentSpeed)
{
	maxSpeed = get MAX_SPEED;
	currentSpeed = 0;
	mASpdFactor = SPEEDUP_FACTOR;
	minSpeed = 3 * SPEEDUP_FACTOR / 4;
	
	while(TRUE)
	{
		currentSpeed = get CURRENT_SPEED;
		mASpdFactor = SPEEDUP_FACTOR * currentSpeed / maxSpeed;

		if ( mASpdFactor < minSpeed )
		{
			mASpdFactor = minSpeed;
		}

		sleep 60;
	}
}


walk()
{
	if( bMoving )
	{
		/* X */
		turn hips to x-axis <-1.000000> speed <8.000000> * mASpdFactor / 100;
			
		/* Y */
		turn leg4 to y-axis <-80.000000> speed <260.000000> * mASpdFactor / 100;

		turn leg2 to y-axis <-35.000000> speed <120.000000> * mASpdFactor / 100;

		turn leg3 to y-axis <5.000000> speed <140.000000> * mASpdFactor / 100;
		
		turn leg1 to y-axis <25.000000> speed <260.000000> * mASpdFactor / 100;

		/* Z */
		turn bleg4 to z-axis <-10.000000> speed <260.000000> * mASpdFactor / 100;
		turn bleg to z-axis <-10.000000> speed <260.000000> * mASpdFactor / 100;
		turn hips to z-axis <0.500000> speed <4.000000> * mASpdFactor / 100;

		/* move */
		move hips to x-axis [-0.2500000] speed [2.000000] * mASpdFactor / 100;
		move hips to z-axis [-0.2500000] speed [2.000000] * mASpdFactor / 100;
		
		
		turn leg4 to z-axis <-10.000000> speed <200.000000> * mASpdFactor / 100;
		sleep 100 * 100 / mASpdFactor;
		turn leg4 to z-axis <0.000000> speed <200.000000> * mASpdFactor / 100;
		sleep 100 * 100 / mASpdFactor;

	}
	if( bMoving )
	{
		/* X */
		turn hips to x-axis <1.000000> speed <8.000000> * mASpdFactor / 100;
		
		/* Y */
		turn leg4 to y-axis <-35.000000> speed <200.000000> * mASpdFactor / 100;

		turn leg2 to y-axis <-90.000000> speed <180.000000> * mASpdFactor / 100;

		turn leg3 to y-axis <15.000000> speed <140.000000> * mASpdFactor / 100;
		
		turn leg1 to y-axis <-5.000000> speed <200.000000> * mASpdFactor / 100;

		/* Z */
		turn bleg4 to z-axis <0.000000> speed <260.000000> * mASpdFactor / 100;
		turn bleg to z-axis <0.000000> speed <260.000000> * mASpdFactor / 100;
		turn hips to z-axis <0.500000> speed <4.000000> * mASpdFactor / 100;
		
		/* move */
		move hips to x-axis [0.000000] speed [2.000000] * mASpdFactor / 100;
		move hips to z-axis [0.000000] speed [2.000000] * mASpdFactor / 100;
		
		turn leg1 to z-axis <-10.000000> speed <200.000000> * mASpdFactor / 100;
		sleep 100 * 100 / mASpdFactor;
		turn leg1 to z-axis <0.000000> speed <200.000000> * mASpdFactor / 100;
		sleep 100 * 100 / mASpdFactor;

	}
	if( bMoving )
	{
		/* X */
		turn hips to x-axis <-1.000000> speed <8.000000> * mASpdFactor / 100;

		/* Y */
		turn leg4 to y-axis <-5.000000> speed <140.000000> * mASpdFactor / 100;

		turn leg2 to y-axis <-25.000000> speed <260.000000> * mASpdFactor / 100;

		turn leg3 to y-axis <80.000000> speed <260.000000> * mASpdFactor / 100;
		
		turn leg1 to y-axis <35.000000> speed <120.000000> * mASpdFactor / 100;

		/* Z */
		turn bleg2 to z-axis <10.000000> speed <260.000000> * mASpdFactor / 100;
		turn bleg3 to z-axis <10.000000> speed <260.000000> * mASpdFactor / 100;
		turn hips to z-axis <-0.500000> speed <4.000000> * mASpdFactor / 100;


		/* move */
		move hips to x-axis [0.2500000] speed [2.000000] * mASpdFactor / 100;
		move hips to z-axis [-0.2500000] speed [2.000000] * mASpdFactor / 100;
		
		turn leg3 to z-axis <10.000000> speed <200.000000> * mASpdFactor / 100;
		sleep 100 * 100 / mASpdFactor;
		turn leg3 to z-axis <0.000000> speed <200.000000> * mASpdFactor / 100;
		sleep 100 * 100 / mASpdFactor;

	}
	if( bMoving )
	{
		turn hips to x-axis <1.000000> speed <8.000000> * mASpdFactor / 100;

		/* Y */
		turn leg4 to y-axis <-15.000000> speed <140.000000> * mASpdFactor / 100;

		turn leg2 to y-axis <5.000000> speed <200.000000> * mASpdFactor / 100;

		turn leg3 to y-axis <35.000000> speed <200.000000> * mASpdFactor / 100;

		turn leg1 to y-axis <90.000000> speed <180.000000> * mASpdFactor / 100;			

		/* Z */
		turn bleg3 to z-axis <0.000000> speed <260.000000> * mASpdFactor / 100;
		turn bleg2 to z-axis <0.000000> speed <260.000000> * mASpdFactor / 100;
		turn hips to z-axis <0.500000> speed <4.000000> * mASpdFactor / 100;

		/* move */
		move hips to x-axis [0.000000] speed [2.000000] * mASpdFactor / 100;
		move hips to z-axis [0.000000] speed [2.000000] * mASpdFactor / 100;

		turn leg2 to z-axis <10.000000> speed <200.000000> * mASpdFactor / 100;
		sleep 100 * 100 / mASpdFactor;
		turn leg2 to z-axis <0.000000> speed <200.000000> * mASpdFactor / 100;
		sleep 100 * 100 / mASpdFactor;
	}
}

MotionControl(moving, aiming, justmoved)
{
	justmoved = TRUE;
	while( TRUE )
	{
		moving = bMoving;
		
		if( moving )
		{
			justmoved = TRUE;
			call-script walk();
		}
		if( !moving )
		{
			if( justmoved )
			{
				turn leg1 to x-axis <0.000000> speed <360.000000>;
				turn leg2 to x-axis <0.000000> speed <360.000000>;
				turn leg3 to x-axis <0.000000> speed <360.000000>;
				turn leg4 to x-axis <0.000000> speed <360.000000>;
				turn leg1 to y-axis <45.000000> speed <360.000000>;
				turn leg2 to y-axis <-45.000000> speed <360.000000>;
				turn leg3 to y-axis <45.000000> speed <360.000000>;
				turn leg4 to y-axis <-45.000000> speed <360.000000>;
			
				turn leg1 to z-axis <0.000000> speed <360.000000>;
				turn leg2 to z-axis <0.000000> speed <360.000000>;
				turn leg3 to z-axis <0.000000> speed <360.000000>;
				turn leg4 to z-axis <0.000000> speed <360.000000>;
				turn hips to z-axis <0.000000> speed <260.000000>;
				turn hips to x-axis <0.000000> speed <360.000000>;
	
				move hips to x-axis [0.000000] speed [3.000000];
				move hips to z-axis [0.000000] speed [3.000000];

				turn bleg2 to z-axis <0.000000> speed <160.000000>;
				turn bleg4 to z-axis <0.000000> speed <160.000000>;
				turn bleg3 to z-axis <0.000000> speed <160.000000>;
				turn bleg to z-axis <0.000000> speed <160.000000>;
				justmoved = FALSE;
			}
			sleep 100;
		}
	}
	return (0);
}



SmokeUnit(healthpercent, sleeptime, smoketype)
{
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 400;
	}
	while( TRUE )
	{
		healthpercent = get HEALTH;
		if( healthpercent < 66 )
		{
			smoketype = 256 | 2;
			if( Rand( 1, 66 ) < healthpercent )
			{
				smoketype = 256 | 1;
			}
			emit-sfx smoketype from turret;
		}
		sleeptime = healthpercent * 50;
		if( sleeptime < 200 )
		{
			sleeptime = 200;
		}
		sleep sleeptime;
	}
	return (0);
}

StartMoving()
{
	bMoving = TRUE;
	return (0);
}

StopMoving()
{
	bMoving = FALSE;
	return (0);
}


RestoreAfterDelay()
{
	sleep DEFAULT_WEAPON_RESTORE_DELAY;
	call-script stopAimHelper1(<100>,<100>);
	turn turret to y-axis <0> speed <100.000000>;
	turn sleeve to x-axis <0> speed <100.000000>;
	bAiming = FALSE;
}

RestoreAfterDelay2()
{
	sleep DEFAULT_WEAPON_RESTORE_DELAY;
	move ldoor to x-axis [0] speed [6];
	move rdoor to x-axis [0] speed [6];
	wait-for-move ldoor along x-axis;
}
Create()
{
	turn b1f1 to x-axis <-90> now;
	turn b1f2 to x-axis <-90> now;
	turn b1f3 to x-axis <-90> now;
	turn b1f4 to x-axis <-90> now;
	turn b2f1 to x-axis <-90> now;
	turn b2f2 to x-axis <-90> now;
	turn b2f3 to x-axis <-90> now;
	turn b2f4 to x-axis <-90> now;
	bMoving = FALSE;
	bAiming = FALSE;
	gun_1 = 0;
	gun_2 = 0;
	call-script stopAimHelper1(<1000>,<1000>);
	start-script MotionSpeedControl();
	start-script MotionControl();
	start-script SmokeUnit();
	return (0);
}


AimFromPrimary(piecenum)
{
	piecenum = turret;
	return (0);
}

QueryPrimary(piecenum)
{
	if (gun_1 == 0) 
	{
		piecenum = flare11;
		return (0);
	}
	if (gun_1 == 1) 
	{
		piecenum = flare12;
		return (0);
	}
	if (gun_1 == 2) 
	{
		piecenum = flare13;
		return (0);
	}
	
}


AimPrimary(heading, pitch)
{
	
	call-script updateAimHelper1(heading,pitch,<100>,<100>,HEADING_TOLERANCE,PITCH_TOLERANCE);
	signal SIG_AIM;
	set-signal-mask SIG_AIM;

	turn turret to y-axis heading speed <100.000000>;
	turn sleeve to x-axis <0>-pitch speed <100.000000>;
	if (!aimReady1)
	{
		wait-for-turn turret around y-axis;
		wait-for-turn sleeve around x-axis;
	}
	bAiming = TRUE;
	start-script RestoreAfterDelay();
	return (1);
}

FirePrimary()
{
	if (gun_1 == 0) 
	{
		move barrel11 to z-axis [-5] now;
		emit-sfx 1024 from flare11;
		sleep 150;
		gun_1 = 1;
		move barrel11 to z-axis [0] speed [10];
		return (0);
	}
	if (gun_1 == 1) 
	{
		move barrel12 to z-axis [-5] now;
		emit-sfx 1024 from flare12;
		sleep 150;
		gun_1 = 2;
		move barrel12 to z-axis [0] speed [10];
		return (0);
	}
	if (gun_1 == 2) 
	{
		move barrel13 to z-axis [-5] now;
		emit-sfx 1024 from flare13;
		sleep 150;
		gun_1 = 0;
		move barrel13 to z-axis [0] speed [10];
		return (0);
	}
}



AimFromTertiary(piecenum)
{
	piecenum = launcher;
	return (0);
}

QueryTertiary(piecenum)
{
	if (gun_2 == 0)
	{
		piecenum = b1f1;
		return (0);
	}
	if (gun_2 == 1)
	{
		piecenum = b1f2;
		return (0);
	}
	if (gun_2 == 2)
	{
		piecenum = b1f3;
		return (0);
	}
	if (gun_2 == 3)
	{
		piecenum = b1f4;
		return (0);
	}
	if (gun_2 == 4)
	{
		piecenum = b2f1;
		return (0);
	}
	if (gun_2 == 5)
	{
		piecenum = b2f2;
		return (0);
	}
	if (gun_2 == 6)
	{
		piecenum = b2f3;
		return (0);
	}
	if (gun_2 == 7)
	{
		piecenum = b2f4;
		return (0);
	}
}


AimTertiary(heading, pitch)
{
	signal SIG_AIM2;
	set-signal-mask SIG_AIM2;
	
	move ldoor to x-axis [-9] speed [9];
	move rdoor to x-axis [9] speed [9];
	wait-for-move ldoor along x-axis;
	start-script restoreAfterDelay2();
	return (1);
}

Shot3()
{
	if (gun_2 == 0)
	{
		emit-sfx 1024+1 from b1f1;
		sleep 30;
		gun_2 = 1;
		return(0);
	}
	if (gun_2 == 1)
	{
		emit-sfx 1024+1 from b1f2;
		sleep 30;
		gun_2 = 2;
		return(0);
	}
	if (gun_2 == 2)
	{
		emit-sfx 1024+1 from b1f3;
		sleep 30;
		gun_2 = 3;
		return(0);
	}
	if (gun_2 == 3)
	{
		emit-sfx 1024+1 from b1f4;
		sleep 30;
		gun_2 = 4;
		return(0);
	}	
	if (gun_2 == 4)
	{
		emit-sfx 1024+1 from b2f1;
		sleep 30;
		gun_2 = 5;
		return(0);
	}
	if (gun_2 == 5)
	{
		emit-sfx 1024+1 from b2f2;
		sleep 30;
		gun_2 = 6;
		return(0);
	}
	if (gun_2 == 6)
	{
		emit-sfx 1024+1 from b2f3;
		sleep 30;
		gun_2 = 7;
		return(0);
	}
	if (gun_2 == 7)
	{
		emit-sfx 1024+1 from b2f4;
		sleep 30;
		gun_2 = 0;
		return(0);
	}	
}


Killed(severity, corpsetype)
{
	if( severity <= 50 )
	{
		explode body type SHATTER;
		explode turret type SHATTER;
		return (1);
	}
	explode body type SHATTER;
	explode turret type SHATTER;
	return (2);
}
