#define TA			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"

#define SPEEDUP_FACTOR 220

#define HEADING_TOLERANCE	<25>
#define PITCH_TOLERANCE		<15>

piece  GP, base, torso,legs,lfrontleg, lmidleg,rmidleg, rfrontleg,lbackleg,rbackleg, rmid2, rback2, lback2,rfront2,lmid2,lfront2,body,sphere, turret2, sleeve2, flash2, turbase,luparm,ruparm,lflare,rflare;

static-var  bMoving,bAiming, justmoved, gun_1, mASpdFactor;

#include "aimhelper1.h"
#include "aimhelper2.h"

// Signal definitions
#define SIG_AIM				2
#define SIG_AIM2			4


SmokeUnit(healthpercent, sleeptime, smoketype)
{
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 400;
	}
	while( TRUE )
	{
		healthpercent = get HEALTH;
		if( healthpercent < 66 )
		{
			smoketype = 256 | 2;
			if( Rand( 1, 66 ) < healthpercent )
			{
				smoketype = 256 | 1;
			}
			emit-sfx smoketype from base;
		}
		sleeptime = healthpercent * 50;
		if( sleeptime < 200 )
		{
			sleeptime = 200;
		}
		sleep sleeptime;
	}
}


MotionSpeedControl(minSpeed, maxSpeed,currentSpeed)
{
	maxSpeed = get MAX_SPEED;
	currentSpeed = 0;
	mASpdFactor = SPEEDUP_FACTOR;
	minSpeed = 3 * SPEEDUP_FACTOR / 4;
	
	while(TRUE)
	{
		currentSpeed = get CURRENT_SPEED;
		mASpdFactor = SPEEDUP_FACTOR * currentSpeed / maxSpeed;

		if ( mASpdFactor < minSpeed )
		{
			mASpdFactor = minSpeed;
		}

		sleep 60;
	}
}

walk()
{
	if( bMoving )
	{
		turn rmid2 to z-axis <0.000000> speed <80.000000> * mASpdFactor / 100;
		turn lmid2 to z-axis <0.000000> speed <80.000000> * mASpdFactor / 100;
		
		turn base to x-axis <2.000000> speed <16.000000> * mASpdFactor / 100;
		turn base to z-axis <0.000000> speed <10.000000> * mASpdFactor / 100;

		turn lfrontleg to y-axis <20.000000> speed <100.967033> * mASpdFactor / 100;
		turn lfrontleg to z-axis <5.016484> speed <550.104396> * mASpdFactor / 100;

		turn lmidleg to y-axis <-20.000000> speed <300.038462> * mASpdFactor / 100;
		turn lmidleg to z-axis <-15.016484> speed <60.104396> * mASpdFactor / 100;

		turn lbackleg to y-axis <45.060440> speed <120.038462> * mASpdFactor / 100;
		turn lbackleg to z-axis <5.016484> speed <550.104396> * mASpdFactor / 100;
		
		turn rfrontleg to y-axis <40.412088> speed <300.060440> * mASpdFactor / 100;
		turn rfrontleg to z-axis <15.016484> speed <60.104396> * mASpdFactor / 100;
		
		turn rmidleg to y-axis <-20.093407> speed <100.368132> * mASpdFactor / 100;
		turn rmidleg to z-axis <-5.016484> speed <550.104396> * mASpdFactor / 100;
		
		turn rbackleg to y-axis <15.137363> speed <300.681319> * mASpdFactor / 100;
		turn rbackleg to z-axis <15.016484> speed <60.104396> * mASpdFactor / 100;
		
		
		sleep 200 * 100 / mASpdFactor;
	}

	// only vertical
	if( bMoving )
	{
		turn base to x-axis <-2.000000> speed <16.000000> * mASpdFactor / 100;
		turn base to z-axis <1.000000> speed <10.000000> * mASpdFactor / 100;

		//turn lfrontleg to z-axis <-15.016484> speed <60.104396> * mASpdFactor / 100;

		turn lmidleg to z-axis <5.016484> speed <150.104396> * mASpdFactor / 100;

		//turn lbackleg to z-axis <-15.016484> speed <60.104396> * mASpdFactor / 100;

		turn rfrontleg to z-axis <-5.016484> speed <150.104396> * mASpdFactor / 100;
		
		//turn rmidleg to z-axis <15.016484> speed <60.104396> * mASpdFactor / 100;
		
		turn rbackleg to z-axis <-5.016484> speed <150.104396> * mASpdFactor / 100;
		
		sleep 200 * 100 / mASpdFactor;
	}
	
	if( bMoving )
	{
		turn base to x-axis <2.000000> speed <16.000000> * mASpdFactor / 100;
		turn base to z-axis <0.000000> speed <10.000000> * mASpdFactor / 100;

		turn lfrontleg to y-axis <-40.000000> speed <300.967033> * mASpdFactor / 100;
		turn lfrontleg to z-axis <-15.016484> speed <60.104396> * mASpdFactor / 100;

		turn lmidleg to y-axis <20.000000> speed <100.038462> * mASpdFactor / 100;
		turn lmidleg to z-axis <5.016484> speed <550.104396> * mASpdFactor / 100;

		turn lbackleg to y-axis <-15.060440> speed <300.038462> * mASpdFactor / 100;
		turn lbackleg to z-axis <-15.016484> speed <60.104396> * mASpdFactor / 100;

		turn rfrontleg to y-axis <-20.412088> speed <100.060440> * mASpdFactor / 100;
		turn rfrontleg to z-axis <-5.016484> speed <550.104396> * mASpdFactor / 100;
		
		turn rmidleg to y-axis <20.093407> speed <300.368132> * mASpdFactor / 100;
		turn rmidleg to z-axis <15.016484> speed <60.104396> * mASpdFactor / 100;
		
		turn rbackleg to y-axis <-45.137363> speed <120.681319> * mASpdFactor / 100;
		turn rbackleg to z-axis <-5.016484> speed <550.104396> * mASpdFactor / 100;
		
		sleep 200 * 100 / mASpdFactor;
	}
	
	// only vertical
	if( bMoving )
	{
		turn base to x-axis <-2.000000> speed <16.000000> * mASpdFactor / 100;
		turn base to z-axis <-1.000000> speed <10.000000> * mASpdFactor / 100;

		turn rmid2 to z-axis <0.000000> speed <80.000000> * mASpdFactor / 100;
		turn lmid2 to z-axis <0.000000> speed <80.000000> * mASpdFactor / 100;

		turn lfrontleg to z-axis <5.016484> speed <150.104396> * mASpdFactor / 100;

		//turn lmidleg to z-axis <-15.016484> speed <60.104396> * mASpdFactor / 100;

		turn lbackleg to z-axis <5.016484> speed <150.104396> * mASpdFactor / 100;
		
		//turn rfrontleg to z-axis <15.016484> speed <60.104396> * mASpdFactor / 100;
		
		turn rmidleg to z-axis <-5.016484> speed <150.104396> * mASpdFactor / 100;
		
		//turn rbackleg to z-axis <15.016484> speed <60.104396> * mASpdFactor / 100;
		
		
		sleep 200 * 100 / mASpdFactor;
	}
	
}

Stop()
{
	turn base to z-axis <0.000000> speed <7.000000>;
	turn base to x-axis <0.000000> speed <7.000000>;
	turn lfrontleg to y-axis <0.000000> speed <237.000000>;
	turn lfrontleg to z-axis <0.000000> speed <237.000000>;
	turn lmidleg to y-axis <0.000000> speed <237.000000>;
	turn lmidleg to z-axis <0.000000> speed <237.000000>;
	turn lbackleg to y-axis <0.000000> speed <237.000000>;
	turn lbackleg to z-axis <0.000000> speed <237.000000>;
	turn rbackleg to y-axis <0.000000> speed <237.000000>;
	turn rbackleg to z-axis <0.000000> speed <237.000000>;
	turn rmidleg to y-axis <0.000000> speed <237.000000>;
	turn rmidleg to z-axis <0.000000> speed <237.000000>;
	turn rfrontleg to y-axis <0.000000> speed <237.000000>;
	turn rfrontleg to z-axis <0.000000> speed <237.000000>;
	turn lbackleg to y-axis <20.000000> speed <300.000000>;
	turn rbackleg to y-axis <-20.000000> speed <300.000000>;
	turn rfrontleg to y-axis <30.000000> speed <300.000000>;
	turn lfrontleg to y-axis <-30.000000> speed <300.000000>;

}



MotionControl()
{
	while( TRUE )
	{
		if( bMoving )
		{
			justmoved=TRUE;
			call-script walk();
		}
		if( !bMoving )
		{
			if(justmoved)
			{
				call-script Stop();
				justmoved=FALSE;
			}
			sleep 100;
		}
	}
}



StartMoving()
{
	bMoving = TRUE;
}

StopMoving()
{
	bMoving = FALSE;
}

Create()
{
	
	bMoving = FALSE;
	justmoved = FALSE;
	gun_1=0;
	call-script stopAimHelper1(<1000>,<1000>);
	call-script stopAimHelper2(<1000>,<1000>);
	start-script MotionSpeedControl();
	start-script MotionControl();
	start-script SmokeUnit();
	
}

RestoreAfterDelay1()
{
	sleep DEFAULT_WEAPON_RESTORE_DELAY;
	call-script stopAimHelper1(<100>,<100>);
	turn torso to y-axis <0.000000> speed <100.000000>;
	turn luparm to x-axis <0.000000> speed <100.000000>;
	turn ruparm to x-axis <0.000000> speed <100.000000>;
}

RestoreAfterDelay2()
{
	sleep DEFAULT_WEAPON_RESTORE_DELAY;
	call-script stopAimHelper2(<100>,<100>);
	turn turret2 to y-axis <0.000000> speed <100.000000>;
	turn sleeve2 to x-axis <0.000000> speed <100.000000>;
}


AimPrimary(heading,pitch)
{
	call-script updateAimHelper1(heading,pitch,<400>,<400>,HEADING_TOLERANCE,PITCH_TOLERANCE);
	signal SIG_AIM;
	set-signal-mask SIG_AIM;

	turn torso to y-axis heading speed <400.000000>;
	turn luparm to x-axis <0.000000> - pitch speed <400.000000>;
	turn ruparm to x-axis <0.000000> - pitch speed <400.000000>;
	if (!aimReady1)
	{
		wait-for-turn luparm around x-axis;
		wait-for-turn ruparm around x-axis;
		wait-for-turn torso around y-axis;
	}
	
	start-script RestoreAfterDelay1();
	return (1);
}

FirePrimary()
{
	if (gun_1 == 0) 
	{
		emit-sfx 1024 from lflare;
		sleep 100;
		gun_1 = 1;
		return (0);
	}
	else
	{
		emit-sfx 1024 from rflare;
		sleep 100;
		gun_1 = 0;
		return (0);
	}
}

AimFromPrimary(piecenum)
{
	piecenum = torso;
	return 0;
}

QueryPrimary(piecenum)
{
	if (gun_1 == 0) 
	{
		piecenum = lflare;
		return (0);
	}
	else
	{
		piecenum = rflare;
		return (0);
	}
}


AimSecondary(heading,pitch)
{
	call-script updateAimHelper2(heading,pitch,<600>,<600>,HEADING_TOLERANCE,PITCH_TOLERANCE);
	signal SIG_AIM2;
	set-signal-mask SIG_AIM2;

	turn turret2 to y-axis heading speed <600.000000>;
	turn sleeve2 to x-axis <0.000000> - pitch speed <600.000000>;
	if (!aimReady2)
	{
		wait-for-turn sleeve2 around x-axis;
		wait-for-turn turret2 around y-axis;
	}
	
	start-script RestoreAfterDelay2();
	return (1);
}

FireSecondary()
{
	emit-sfx 1024+1 from flash2;
	return (0);
}

AimFromSecondary(piecenum)
{
	piecenum = turret2;
	return 0;
}

QuerySecondary(piecenum)
{
	piecenum = flash2;
}


Killed(severity, corpsetype)
{
	if( severity <= 50 )
	{
		explode turbase type SHATTER;
		explode torso type SHATTER;
		explode luparm type SHATTER;
		explode ruparm type SHATTER;
		return (1);
	}
	explode turbase type SHATTER;
	explode torso type SHATTER;
	explode luparm type SHATTER;
	explode ruparm type SHATTER;
	explode lbackleg type SHATTER;
	explode lmidleg type SHATTER;
	explode lfrontleg type SHATTER;
	explode rbackleg type SHATTER;
	explode rmidleg type SHATTER;
	explode rfrontleg type SHATTER;

	return (2);
}
