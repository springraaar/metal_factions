#define TA			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"

piece  base, rwing, lwing, tail, jet, ljp, jet2, rjp,cjet,cjp, lweapon1,lweapon2,lbarrel1,lbarrel2,lflare1,lflare2,rweapon1,rweapon2,rbarrel1,rbarrel2,rflare1,rflare2, base2, base3;

static-var  statechg_DesiredState, statechg_StateChanging, isFlying, gun_1;



takeoff()
{
	if( !isFlying)
	{
		sleep 100;
		isFlying = TRUE;
	}
	sleep 66;
}


landing()
{
	if( isFlying )
	{
		isFlying = FALSE;
		sleep 500;
	}
	sleep 66;
}

SmokeUnit(healthpercent, sleeptime, smoketype)
{
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 400;
	}
	while( TRUE )
	{
		healthpercent = get HEALTH;
		if( healthpercent < 66 )
		{
			smoketype = 256 | 2;
			if( Rand( 1, 66 ) < healthpercent )
			{
				smoketype = 256 | 1;
			}
			emit-sfx smoketype from base;
		}
		sleeptime = healthpercent * 50;
		if( sleeptime < 200 )
		{
			sleeptime = 200;
		}
		sleep sleeptime;
	}
}

InitState()
{
	statechg_DesiredState = TRUE;
	statechg_StateChanging = FALSE;
}

RequestState(requestedstate, currentstate)
{
	if( statechg_StateChanging )
	{
		statechg_DesiredState = requestedstate;
		return (0);
	}
	statechg_StateChanging = TRUE;
	currentstate = statechg_DesiredState;
	statechg_DesiredState = requestedstate;
	while( statechg_DesiredState != currentstate )
	{
		if( statechg_DesiredState == 0 )
		{
			start-script takeoff();
			currentstate = 0;
		}
		if( statechg_DesiredState == 1 )
		{
			start-script landing();
			currentstate = 1;
		}
	}
	statechg_StateChanging = FALSE;
}


Create()
{
	isFlying = FALSE;
	gun_1 = 0;
	call-script InitState();
	start-script SmokeUnit();
}

Activate()
{
	start-script RequestState(0);
}

Deactivate()
{
	start-script RequestState(1);
}

AimPrimary()
{
	if(!isFlying)
	{
		return (0);
	}
	return (1);
}

Shot1()
{
	if (gun_1 == 0) 
	{
		emit-sfx 1024 from lflare1;
		sleep 30;
		gun_1 = 1;
		return(0);
	}
	if (gun_1 == 1) 
	{
		emit-sfx 1024 from rflare2;
		sleep 30;
		gun_1 = 2;
		return(0);
	}	
	if (gun_1 == 2) 
	{
		emit-sfx 1024 from lflare2;
		sleep 30;
		gun_1 = 3;

		return(0);
	}
	if (gun_1 == 3) 
	{
		emit-sfx 1024 from rflare1;
		sleep 30;
		gun_1 = 0;
		return(0);
	}	
}

QueryPrimary(piecenum)
{
	if (gun_1 == 0) 
	{
		piecenum = lflare1;
		return(0);
	}
	if (gun_1 == 1) 
	{
		piecenum = rflare2;
		return(0);
	}	
	if (gun_1 == 2) 
	{
		piecenum = lflare2;
		return(0);
	}
	if (gun_1 == 3) 
	{
		piecenum = rflare1;
		return(0);
	}	
}

AimFromPrimary(piecenum)
{
	piecenum = base2;
}

Killed(severity, corpsetype)
{

	corpsetype = 3;
	explode base2 type SHATTER | EXPLODE_ON_HIT | BITMAP5;
	explode lwing type SHATTER | EXPLODE_ON_HIT | BITMAP5;
	explode rwing type SHATTER | EXPLODE_ON_HIT | BITMAP5;
	explode base3 type SHATTER | EXPLODE_ON_HIT | BITMAP5;
}
