#define TA			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"

piece  base, pad, beam1, beam2, side1, side2, door1, door2, plate1, plate2, nano1, nano2, post1, post2, floater;

static-var  Static_Var_1, Static_Var_2, Static_Var_3, Static_Var_4, bBuilding;


Build()
{
	while (TRUE)
	{
		if( bBuilding == 1 )
		{
			emit-sfx 1024 + 0 from beam1;
			emit-sfx 1024 + 0 from beam2;
			sleep 60;
		}
		sleep 40;
	}
	return (0);
}

activatescr()
{
	if( TRUE )
	{
		turn door1 to x-axis <-90.000000> speed <200.000000>;
		turn door2 to x-axis <-90.000000> speed <200.000000>;
		sleep 428;
	}
	if( TRUE )
	{
		move door1 to y-axis [-17.500000] speed [40.000000];
		move door2 to y-axis [-17.500000] speed [40.000000];
		sleep 428;
	}
	if( TRUE )
	{
		move plate1 to y-axis [14.620000] speed [40.000000];
		move plate2 to y-axis [14.620000] speed [40.000000];
		sleep 429;
	}
	if( TRUE )
	{
		turn nano2 to x-axis <20.000000> speed <100.000000>;
		turn nano1 to x-axis <20.000000> speed <100.000000>;
		sleep 431;
	}
	sleep 19;
}

deactivatescr()
{
	if( TRUE )
	{
		turn nano2 to x-axis <0.000000> speed <100.000000>;
		turn nano1 to x-axis <0.000000> speed <100.000000>;
		sleep 418;
	}
	if( TRUE )
	{
		move plate1 to y-axis [0.000000] speed [40.000000];
		move plate2 to y-axis [0.000000] speed [40.000000];
		sleep 426;
	}
	if( TRUE )
	{
		move door1 to y-axis [0.000000] speed [40.000000];
		move door2 to y-axis [0.000000] speed [40.000000];
		sleep 428;
	}
	if( TRUE )
	{
		turn door1 to x-axis <0.000000> speed <200.000000>;
		turn door2 to x-axis <0.000000> speed <200.000000>;
		sleep 430;
	}
	sleep 20;
}

SmokeUnit(healthpercent, sleeptime, smoketype)
{
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 400;
	}
	while( TRUE )
	{
		healthpercent = get HEALTH;
		if( healthpercent < 66 )
		{
			smoketype = 256 | 2;
			if( Rand( 1, 66 ) < healthpercent )
			{
				smoketype = 256 | 1;
			}
			emit-sfx smoketype from base;
		}
		sleeptime = healthpercent * 50;
		if( sleeptime < 200 )
		{
			sleeptime = 200;
		}
		sleep sleeptime;
	}
}

OpenYard()
{
	set YARD_OPEN to 1;
	while( !get YARD_OPEN )
	{
		set BUGGER_OFF to 1;
		sleep 1500;
		set YARD_OPEN to 1;
	}
	set BUGGER_OFF to 0;
}

CloseYard()
{
	set YARD_OPEN to 0;
	while( get YARD_OPEN )
	{
		set BUGGER_OFF to 1;
		sleep 1500;
		set YARD_OPEN to 0;
	}
	set BUGGER_OFF to 0;
}

Go()
{

	call-script activatescr();
	call-script OpenYard();
	set INBUILDSTANCE to 1;
}

Stop()
{
	bBuilding = 0;
	set INBUILDSTANCE to 0;
	call-script CloseYard();
	call-script deactivatescr();
}

InitState()
{
	Static_Var_3 = 1;
	Static_Var_4 = 0;
}

RequestState(requestedstate, currentstate)
{
	if( Static_Var_4 )
	{
		Static_Var_3 = requestedstate;
		return (0);
	}
	Static_Var_4 = 1;
	currentstate = Static_Var_3;
	Static_Var_3 = requestedstate;
	while( Static_Var_3 != currentstate )
	{
		if( Static_Var_3 == 0 )
		{
			call-script Go();
			currentstate = 0;
		}
		if( Static_Var_3 == 1 )
		{
			call-script Stop();
			currentstate = 1;
		}
	}
	Static_Var_4 = 0;
}

Create()
{
	hide floater;
	if ( GET GROUND_WATER_HEIGHT(GET UNIT_XZ) < 0)
	{
		show floater;
	}
	Static_Var_2 = 0;
	Static_Var_1 = 0;
	call-script InitState();
	start-script SmokeUnit();
	start-script Build();
}

QueryNanoPiece(piecenum)
{
	if( Static_Var_1 == 0 )
	{
		piecenum = beam1;
	}
	if( Static_Var_1 != 0 )
	{
		piecenum = beam2;
	}
	Static_Var_1 = !Static_Var_1;
}

Demo()
{
	Static_Var_2 = 1;
}

Activate()
{
	signal 2;
	start-script RequestState(0);
}

Deactivate()
{
	signal 2;
	set-signal-mask 2;
	if( !Static_Var_2 )
	{
		sleep 5000;
	}
	set-signal-mask 0;
	start-script RequestState(1);
}

StartBuilding()
{
	bBuilding = 1;
}

StopBuilding()
{
	bBuilding = 0;
}

QueryBuildInfo(piecenum)
{
	piecenum = pad;
}

SweetSpot(piecenum)
{
	piecenum = base;
}

Killed(severity, corpsetype)
{
	if( severity <= 50 )
	{
		explode pad type SHATTER;
		explode plate1 type SHATTER;
		explode post1 type SHATTER;
		explode post2 type SHATTER;
		return (1);
	}
	explode side1 type SHATTER;
	explode side2 type SHATTER;
	explode door1 type SHATTER;
	explode nano1 type SHATTER;
	explode nano2 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
	explode pad type SHATTER;
	explode plate1 type SHATTER | EXPLODE_ON_HIT | BITMAP4;
	explode post1 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
	explode post2 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
	return (2);
}
