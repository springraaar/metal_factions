#define TA			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"

#define HEADING_TOLERANCE	<25>
#define PITCH_TOLERANCE		<15>

piece  ignite1, ignite2, ignite3, ignite4, ignite5, flare1, flare2, flare3, base, turret, barrel1, barrel2, wake1, wake2,sleeve;

#include "aimhelper1.h"

static-var  gun_1, Static_Var_3, Static_Var_4, Static_Var_5, Static_Var_6, Static_Var_7;

// Signal definitions
#define SIG_AIM				2
#define SIG_MOVE			4


FlameControl()
{
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 400;
	}
	while( TRUE )
	{
		if( Static_Var_3 )
		{
			emit-sfx 1024 + 1 from ignite1;
			sleep 10;
		}
		if( Static_Var_4 )
		{
			emit-sfx 1024 + 1 from ignite2;
			sleep 10;
		}
		if( Static_Var_5 )
		{
			emit-sfx 1024 + 1 from ignite3;
			sleep 10;
		}
		if( Static_Var_6 )
		{
			emit-sfx 1024 + 1 from ignite4;
			sleep 10;
		}
		if( Static_Var_7 )
		{
			emit-sfx 1024 + 1 from ignite5;
			sleep 10;
		}
		sleep 10;
		return (0);
	}
	sleep 10;
	return (0);
}

Flameon(Func_Var_1, Func_Var_2, Func_Var_3)
{
	start-script FlameControl();
	Func_Var_3 = get HEALTH;
	if( Func_Var_3 <= 80 )
	{
		if( Static_Var_3 == 0 )
		{
			Static_Var_3 = 1;
			sleep 10;
		}
	}
	if( Func_Var_3 <= 60 )
	{
		if( Static_Var_4 == 0 )
		{
			Static_Var_4 = 1;
			sleep 10;
		}
	}
	if( Func_Var_3 <= 45 )
	{
		if( Static_Var_5 == 0 )
		{
			Static_Var_5 = 1;
			sleep 10;
		}
	}
	if( Func_Var_3 <= 25 )
	{
		if( Static_Var_6 == 0 )
		{
			Static_Var_6 = 1;
			sleep 10;
		}
	}
	if( Func_Var_3 <= 10 )
	{
		if( Static_Var_7 == 0 )
		{
			Static_Var_7 = 1;
			sleep 10;
		}
	}
	if( Func_Var_3 >= 90 )
	{
		if( Static_Var_3 == 1 )
		{
			Static_Var_3 = 0;
			sleep 10;
		}
	}
	if( Func_Var_3 >= 90 )
	{
		if( Static_Var_4 == 1 )
		{
			Static_Var_4 = 0;
			sleep 10;
		}
	}
	if( Func_Var_3 >= 55 )
	{
		if( Static_Var_5 == 1 )
		{
			Static_Var_5 = 0;
			sleep 10;
		}
	}
	if( Func_Var_3 >= 35 )
	{
		if( Static_Var_6 == 1 )
		{
			Static_Var_6 = 0;
			sleep 10;
		}
	}
	if( Func_Var_3 >= 20 )
	{
		if( Static_Var_7 == 1 )
		{
			Static_Var_7 = 0;
			sleep 10;
		}
	}
	start-script Flameon();
	sleep 10;
	return (0);
}

SmokeUnit(healthpercent, sleeptime, smoketype)
{
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 400;
	}
	while( TRUE )
	{
		healthpercent = get HEALTH;
		if( healthpercent < 66 )
		{
			smoketype = 256 | 2;
			if( Rand( 1, 66 ) < healthpercent )
			{
				smoketype = 256 | 1;
			}
			emit-sfx smoketype from base;
		}
		sleeptime = healthpercent * 50;
		if( sleeptime < 200 )
		{
			sleeptime = 200;
		}
		sleep sleeptime;
	}
	return (0);
}

Create()
{
	hide flare1;
	hide flare2;
	hide flare3;
	hide ignite1;
	hide ignite2;
	hide ignite3;
	hide ignite4;
	hide ignite5;
	Static_Var_3 = 0;
	Static_Var_4 = 0;
	Static_Var_5 = 0;
	Static_Var_6 = 0;
	Static_Var_7 = 0;
	gun_1 = [0];
	call-script stopAimHelper1(<1000>,<1000>);
	start-script SmokeUnit();
	start-script Flameon();
	return (0);
}

RestoreAfterDelay()
{
	sleep DEFAULT_WEAPON_RESTORE_DELAY;
	call-script stopAimHelper1(<60>,<60>);
	turn turret to y-axis <0.000000> speed <60.000000>;
	turn sleeve to x-axis <0.000000> speed <60.000000>;
	return (0);
}

StartMoving()
{
	signal SIG_MOVE;
	set-signal-mask SIG_MOVE;
	while( TRUE )
	{
		emit-sfx 2 from wake1;
		emit-sfx 2 from wake2;
		sleep 300;
	}
	return (0);
}

StopMoving()
{
	signal SIG_MOVE;
	return (0);
}

AimPrimary(heading, pitch)
{
	call-script updateAimHelper1(heading,pitch,<60>,<60>,HEADING_TOLERANCE,PITCH_TOLERANCE);
	signal SIG_AIM;
	set-signal-mask SIG_AIM;
	turn turret to y-axis heading speed <60.000000>;
	turn sleeve to x-axis <0.000000> - pitch speed <60.000000>;
	if (!aimReady1)
	{
		wait-for-turn turret around y-axis;
		wait-for-turn sleeve around x-axis;
	}
	start-script RestoreAfterDelay();
	return (1);
}

AimSecondary(heading, pitch)
{
	return (1);
}

FirePrimary()
{
	if( gun_1 == [0] )
	{
		move barrel1 to z-axis [-7.500000] now;
		emit-sfx 1024 + 0 from flare1;
		move barrel1 to z-axis [0.000000] speed [7.500000];
		sleep 200;
		gun_1 = [1];
		return (0);
	}
	if( gun_1 == [1] )
	{
		move barrel2 to z-axis [-7.500000] now;
		emit-sfx 1024 + 0 from flare2;
		sleep 200;
		move barrel2 to z-axis [0.000000] speed [7.500000];
		gun_1 = [0];
		return (0);
	}
}

AimFromPrimary(piecenum)
{
	piecenum = turret;
	return (0);
}

FireSecondary()
{
	return (1);
}

AimFromSecondary(piecenum)
{
	piecenum = turret;
	return (0);
}

QueryPrimary(piecenum)
{
	if( gun_1 == [0] )
	{
		piecenum = flare1;
	}
	if( gun_1 == [1] )
	{
		piecenum = flare2;
	}
	return (0);
}

QuerySecondary(piecenum)
{
	piecenum = flare3;
	return (0);
}

Killed(severity, corpsetype)
{
	hide flare1;
	hide flare2;
	hide flare3;
	if( severity <= 50 )
	{
		explode barrel1 type SHATTER;
		explode barrel2 type SHATTER;
		explode turret type SHATTER;
		return (1);
	}
	explode barrel1 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
	explode barrel2 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
	explode base type BITMAPONLY | BITMAP3;
	explode flare1 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP4;
	explode flare2 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP5;
	explode turret type SHATTER | EXPLODE_ON_HIT | BITMAP1;
	explode wake1 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
	explode wake2 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
	return (2);
}
