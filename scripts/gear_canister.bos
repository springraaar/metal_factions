#define TA			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"

#define SPEEDUP_FACTOR 210

piece  base,torso, hips, l_thigh, r_thigh, left, right, rleg, rfoot, lleg, lfoot, canister, barrel, flare,c2,c3,c4;

static-var  bMoving, bAiming, oldPitch, targetPitch, mATurnSpd1,mATurnSpd2,mATurnSpd3,mASpdFactor, mAMoveSpd1, mAVertFactor, legAngle1, legAngle2, legAngle3;

// Signal definitions
#define SIG_AIM				2

lua_turnToTarget() { return 0; }



MotionSpeedControl(maxSpeed,currentSpeed)
{
	maxSpeed = get MAX_SPEED;
	currentSpeed = 0;
	mASpdFactor = SPEEDUP_FACTOR;
	
	while(TRUE)
	{
		currentSpeed = get CURRENT_SPEED;
		mASpdFactor = SPEEDUP_FACTOR * currentSpeed / maxSpeed;

		//call-script lua_cobDebug(mASpdFactor);
		if ( mASpdFactor < SPEEDUP_FACTOR/2 )
		{
			mASpdFactor = SPEEDUP_FACTOR/2;
		}
		
		
		mAMoveSpd1 = [20.000000] * mASpdFactor / 100;
		mATurnSpd1 = <285.000000> * (100 + mASpdFactor) / 200;
		mATurnSpd2 = <180.000000> * (100 + mASpdFactor) / 200;
		mATurnSpd3 = <50.000000> * (100 + mASpdFactor) / 200;

		mAVertFactor = [0.000000]-[1.000000] * mASpdFactor / SPEEDUP_FACTOR;
		legAngle1 = <40.000000>;
		legAngle2 = <30.000000>;
		legAngle3 = <10.000000>;
		if ( mASpdFactor < SPEEDUP_FACTOR )
		{
			legAngle1 = legAngle1 * (SPEEDUP_FACTOR + mASpdFactor) / (2*SPEEDUP_FACTOR);
			legAngle2 = legAngle2 * (SPEEDUP_FACTOR + mASpdFactor) / (2*SPEEDUP_FACTOR);
			legAngle3 = legAngle3 * (SPEEDUP_FACTOR + mASpdFactor) / (2*SPEEDUP_FACTOR);

		}
	
		sleep 60;
	}
}


walk()
{
	var slowTurnSpd, slowTurnSpd2;

	slowTurnSpd = mATurnSpd2 / 4;
	slowTurnSpd2 = mATurnSpd2 / 12;
	
	
	// back contact point : right foot behind, left foot forward
	if( bMoving )
	{
		turn l_thigh to x-axis <0.000000>-legAngle1 speed mATurnSpd1;
		turn lleg to x-axis legAngle2 speed mATurnSpd2;
		turn lfoot to x-axis <0> speed mATurnSpd3;

		turn r_thigh to x-axis legAngle2 speed mATurnSpd2;
		turn rleg to x-axis legAngle3 speed mATurnSpd2;
		turn rfoot to x-axis <0.000000>-legAngle2 speed mATurnSpd1;

		move hips to y-axis mAVertFactor speed mAMoveSpd1;
		turn hips to x-axis <8.000000> speed slowTurnSpd2;
		if(!bAiming)
		{
			// turn torso left, right arm forward
			turn torso to y-axis <10.000000> speed slowTurnSpd2;
			//turn luparm to x-axis <5.000000> speed slowTurnSpd;
			//turn ruparm to x-axis <-20.000000> speed slowTurnSpd;
			//turn rloarm to x-axis <-20.000000> speed slowTurnSpd2;
		}
		
		wait-for-turn l_thigh around x-axis;
		wait-for-turn r_thigh around x-axis;
		wait-for-turn lleg around x-axis;
		wait-for-turn rleg around x-axis;
	}

	// intermediate pose 2 : left stomp ground
	if( bMoving)
	{
		turn lfoot to x-axis legAngle3 speed mATurnSpd1*5;
		wait-for-turn lfoot around x-axis;
	}

	// passing pose 2 : right foot raising, left foot on the ground
	if( bMoving )
	{
		turn l_thigh to x-axis <0.000000> speed mATurnSpd2;
		turn lleg to x-axis <0.000000> speed mATurnSpd2;
		turn lfoot to x-axis <0.000000> speed mATurnSpd3;

		turn r_thigh to x-axis <-20.000000> speed mATurnSpd2;
		turn rleg to x-axis <30.000000> speed mATurnSpd2;
		turn rfoot to x-axis <10.000000> speed mATurnSpd1;

		if(!bAiming)
		{
			// restore position
			turn torso to y-axis <0.000000> speed slowTurnSpd2;
			//turn luparm to x-axis <-10.000000> speed slowTurnSpd;
			//turn ruparm to x-axis <-10.000000> speed slowTurnSpd;
			//turn rloarm to x-axis <-15.000000> speed slowTurnSpd2;

		}

		move hips to y-axis [0.000000] speed mAMoveSpd1;
		turn hips to x-axis <0.000000> speed slowTurnSpd2;		
		
		wait-for-turn l_thigh around x-axis;
		wait-for-turn r_thigh around x-axis;
		wait-for-turn lleg around x-axis;
		wait-for-turn rleg around x-axis;

	}
	
	// forward contact point : right foot forward, left foot behind
	if( bMoving )
	{
		turn l_thigh to x-axis legAngle2 speed mATurnSpd2;
		turn lleg to x-axis legAngle3 speed mATurnSpd2;
		turn lfoot to x-axis <0>-legAngle2 speed mATurnSpd1;

		turn r_thigh to x-axis <0>-legAngle1 speed mATurnSpd1;
		turn rleg to x-axis legAngle2 speed mATurnSpd2;
		turn rfoot to x-axis <0> speed mATurnSpd3;
		
		move hips to y-axis mAVertFactor speed mAMoveSpd1;
		turn hips to x-axis <8.000000> speed slowTurnSpd2;
		
		if(!bAiming)
		{
			// turn torso right, left arm forward
			turn torso to y-axis <-10.000000> speed slowTurnSpd2;
			//turn luparm to x-axis <-20.000000> speed slowTurnSpd;
			//turn ruparm to x-axis <5.000000> speed slowTurnSpd;
			//turn rloarm to x-axis <-10.000000> speed slowTurnSpd2;
		}

		wait-for-turn l_thigh around x-axis;
		wait-for-turn r_thigh around x-axis;
		wait-for-turn lleg around x-axis;
		wait-for-turn rleg around x-axis;
	}

	// intermediate pose 1 : right stomp ground
	if( bMoving)
	{
		turn rfoot to x-axis legAngle3 speed mATurnSpd1*5;
		wait-for-turn rfoot around x-axis;
	}

	// passing pose 1 : right foot on ground, left foot raising
	if( bMoving )
	{
		turn l_thigh to x-axis <-20.000000> speed mATurnSpd2;
		turn lleg to x-axis <30.000000> speed mATurnSpd2;
		turn lfoot to x-axis <10.000000> speed mATurnSpd1;
		
		turn r_thigh to x-axis <0.000000> speed mATurnSpd2;
		turn rleg to x-axis <0.000000> speed mATurnSpd2;
		turn rfoot to x-axis <0.000000> speed mATurnSpd3;

		
		if(!bAiming)
		{
			// restore position
			turn torso to y-axis <0.000000> speed slowTurnSpd2;
			//turn luparm to x-axis <-10.000000> speed slowTurnSpd;
			//turn ruparm to x-axis <-10.000000> speed slowTurnSpd;
			//turn rloarm to x-axis <-15.000000> speed slowTurnSpd2;
		}
		
		move hips to y-axis [0.000000] speed mAMoveSpd1;
		turn hips to x-axis <0.000000> speed slowTurnSpd2;
		
		wait-for-turn l_thigh around x-axis;
		wait-for-turn r_thigh around x-axis;
		wait-for-turn lleg around x-axis;
		wait-for-turn rleg around x-axis;
	}
	
	return;
}


SmokeUnit(healthpercent, sleeptime, smoketype)
{
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 400;
	}
	while( TRUE )
	{
		healthpercent = get HEALTH;
		if( healthpercent < 66 )
		{
			smoketype = 256 | 2;
			if( Rand( 1, 66 ) < healthpercent )
			{
				smoketype = 256 | 1;
			}
			emit-sfx smoketype from torso;
		}
		sleeptime = healthpercent * 50;
		if( sleeptime < 200 )
		{
			sleeptime = 200;
		}
		sleep sleeptime;
	}
}

MotionControl(moving, aiming, justmoved)
{
	justmoved = TRUE;
	while( TRUE )
	{
		moving = bMoving;
		aiming = bAiming;
		if( moving )
		{
			call-script walk();
			justmoved = TRUE;
		}
		else
		{
			if( justmoved )
			{
				move r_thigh to y-axis [0.000000] speed [10.000000];
				move l_thigh to y-axis [0.000000] speed [10.000000];
				turn r_thigh to x-axis <0.000000> speed <200.038462>;
				turn rleg to x-axis <0.000000> speed <200.038462>;
				turn rfoot to x-axis <0.000000> speed <200.038462>;
				turn l_thigh to x-axis <0.000000> speed <200.038462>;
				turn lleg to x-axis <0.000000> speed <200.038462>;
				turn lfoot to x-axis <0.000000> speed <200.038462>;
				turn hips to x-axis <0.000000> speed <200.038462>;
				if( !aiming )
				{
					turn torso to y-axis <0.000000> speed <90.016484>;
				}
				justmoved = FALSE;
			}
			sleep 100;
		}
	}
}

aimTracker() {
	targetPitch = <0>;
	while(TRUE) {
		if (targetPitch > <-91>) {
			if (targetPitch != oldPitch ) {
				wait-for-turn canister around x-axis;
				oldPitch = targetPitch;
			}
		}
		sleep 30;
	}
}

Create()
{
	hide flare;
	turn canister to x-axis <-90.000000> now;
	oldPitch = <90>;
	targetPitch = <-91>;
	bMoving = FALSE;
	bAiming = FALSE;
	start-script aimTracker();
	start-script MotionControl();
	start-script SmokeUnit();
	start-script MotionSpeedControl();
}

StartMoving()
{
	bMoving = TRUE;
}

StopMoving()
{
	bMoving = FALSE;
}


RestoreAfterDelay()
{
	sleep DEFAULT_WEAPON_RESTORE_DELAY;
	turn canister to x-axis <-90.000000> speed <45.005495>;
	wait-for-turn canister around x-axis;
	oldPitch = <90>;
	targetPitch = <-91>;
	bAiming = FALSE;
}

AimFromPrimary(piecenum)
{
	piecenum = torso;
}

QueryPrimary(piecenum)
{
	piecenum = flare;
}

Shot1()
{
	emit-sfx 1024 from flare;
	turn base to x-axis <-15.000000> speed <150.005495>;
	wait-for-turn base around x-axis;
	turn base to x-axis <0.000000> speed <20.000000>;
}

AimPrimary(heading, pitch)
{
	signal SIG_AIM;
	set-signal-mask SIG_AIM;
	targetPitch = pitch;
	bAiming = TRUE;

	// make unit turn to face target
	if (!bMoving && (get ABS(heading) > <10>)) {
		call-script lua_turnToTarget(1,10);
	}
	if (get ABS(heading) > <20>) {
		sleep 100;
	}
	
	turn canister to x-axis <0.000000> - (pitch) speed <130.038462>;
	if (get ABS (pitch - oldPitch) > <20>) {
		wait-for-turn canister around x-axis;
	}
	start-script RestoreAfterDelay();
	
	return (1);
}

Killed(severity, corpsetype)
{
	if( severity <= 25 )
	{
		corpsetype = 1;
		explode c3 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
		explode c4 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
		explode c2 type SHATTER | BITMAP5;
		explode left type SHATTER | BITMAP5;
		explode right type SHATTER | BITMAP5;
		return (0);
	}
	if( severity <= 50 )
	{
		corpsetype = 2;
		explode c3 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
		explode c4 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
		explode c2 type SHATTER | BITMAP5;
		explode left type SHATTER | BITMAP5;
		explode right type SHATTER | BITMAP5;
		explode barrel type SHATTER | BITMAP5;
		explode canister type SHATTER | BITMAP5;		
		explode rfoot type SHATTER | BITMAP5;
		explode lfoot type SHATTER | BITMAP5;
		return (0);
	}
	if( severity <= 99 )
	{
		corpsetype = 3;
		explode c3 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
		explode c4 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
		explode c2 type SHATTER | BITMAP5;
		explode left type SHATTER | BITMAP5;
		explode right type SHATTER | BITMAP5;
		explode barrel type SHATTER | BITMAP5;
		explode canister type SHATTER | BITMAP5;		
		explode rfoot type SHATTER | BITMAP5;
		explode lfoot type SHATTER | BITMAP5;
		return (0);
	}
	corpsetype = 3;
	explode c3 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
	explode c4 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
	explode c2 type SHATTER | BITMAP5;
	explode left type SHATTER | BITMAP5;
	explode right type SHATTER | BITMAP5;
	explode barrel type SHATTER | BITMAP5;
	explode canister type SHATTER | BITMAP5;		
	explode rfoot type SHATTER | BITMAP5;
	explode lfoot type SHATTER | BITMAP5;
}
