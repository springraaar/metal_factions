#define TA			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"


piece ground, hips,torso,support,turret1,turret2,turret3,turret4,sleeve1,sleeve2,sleeve3,sleeve4, flare11,flare12,flare21,flare22,flare31,flare32,flare41,flare42,sphere,shieldpt,m1on,m1off,m2on,m2off,m3on,m3off,m4on,m4off,m5on,m5off,m6on,m6off,m7on,m7off;
	
static-var bMoving,bAiming, firept1, energyBoostedMovement, reloadTime, chargeState, isReady;

// Signal definitions
#define SIG_AIM				2


lua_checkEnergy() { return 0; }
lua_resetReload() { return 0; }

SetMaxReloadTime(time)
{
	reloadTime = time;
	return (0);
}


ChargeControl()
{
	while(TRUE) {
		while( get BUILD_PERCENT_LEFT )
		{
			chargeState = [0];
			sleep 100;
		}
		
		if (isReady == FALSE) {
			chargeState = [0];
			sleep reloadTime / 5;
			chargeState = [1];
			sleep reloadTime / 5;
			chargeState = [2];
			sleep reloadTime / 5;
			chargeState = [3];
			sleep reloadTime / 5;
			chargeState = [4];
			sleep reloadTime / 5;
			isReady = TRUE;
		}
		sleep 100;
	}
}

MotionControl(hasEnergy)
{
	hasEnergy = 1;
	while (TRUE)
	{
		bMoving = (get CURRENT_SPEED) * 50 / (get MAX_SPEED);

		// lua check for energy availability		
		call-script lua_checkEnergy(2000);
		hasEnergy = get LUA1;
		
		// update speed and activation state
		if (bMoving && hasEnergy)
		{
			energyBoostedMovement = TRUE;
			hide m1off;
			hide m2off;
			hide m3off;
			hide m4off;
			hide m5off;
			hide m6off;
			hide m7off;
			show m1on;
			show m2on;
			show m3on;
			show m4on;
			show m5on;
			show m6on;
			show m7on;
		}
		if (!bMoving || !hasEnergy)
		{
			energyBoostedMovement = FALSE;
			show m1off;
			show m2off;
			show m3off;
			show m4off;
			show m5off;
			show m6off;
			show m7off;
			hide m1on;
			hide m2on;
			hide m3on;
			hide m4on;
			hide m5on;
			hide m6on;
			hide m7on;
			
		}

		sleep 60;
	}
}

Effect()
{
	while (TRUE)
	{
		if (energyBoostedMovement)
		{
			emit-sfx 1024+1 from shieldpt;
		}

		sleep 90;
	}
}


ChargeEffect()
{
	while (TRUE)
	{
		if (chargeState == [1])
		{
			emit-sfx 1024+2 from flare11;
			emit-sfx 1024+2 from flare12;
		}
		if (chargeState == [2])
		{
			emit-sfx 1024+2 from flare11;
			emit-sfx 1024+2 from flare12;
			emit-sfx 1024+2 from flare21;
			emit-sfx 1024+2 from flare22;
		}
		if (chargeState == [3])
		{
			emit-sfx 1024+2 from flare11;
			emit-sfx 1024+2 from flare12;
			emit-sfx 1024+2 from flare21;
			emit-sfx 1024+2 from flare22;
			emit-sfx 1024+2 from flare31;
			emit-sfx 1024+2 from flare32;
		}
		if (chargeState == [4])
		{
			emit-sfx 1024+3 from flare11;
			emit-sfx 1024+3 from flare12;
			emit-sfx 1024+3 from flare21;
			emit-sfx 1024+3 from flare22;
			emit-sfx 1024+3 from flare31;
			emit-sfx 1024+3 from flare32;
			emit-sfx 1024+3 from flare41;
			emit-sfx 1024+3 from flare42;
		}
		sleep 10; // every frame
	}
}

Create()
{

	energyBoostedMovement = FALSE;
	firept1 = [0];
	bMoving=FALSE;
	bAiming=FALSE;
	isReady=FALSE;
	chargeState=[0];
	
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 100;
	}
	turn flare12 to y-axis <180> now;
	turn flare22 to y-axis <180> now;
	turn flare32 to y-axis <180> now;
	turn flare42 to y-axis <180> now;
	
	turn turret1 to y-axis <45> now;
	turn turret2 to y-axis <-45> now;


	turn turret3 to y-axis <0> now;
	turn turret4 to y-axis <90> now;

	turn turret3 to z-axis <45> now;
	turn turret4 to z-axis <-45> now;


	spin sleeve1 around x-axis speed <360>;
	spin sleeve2 around x-axis speed <310>;
	spin sleeve3 around x-axis speed <340>;
	spin sleeve4 around x-axis speed <370>;

	start-script MotionControl();
	start-script Effect();
	start-script ChargeControl();
	start-script ChargeEffect();
	call-script lua_resetReload();
}



SweetSpot(piecenum)
{
	piecenum = sphere;
}

RestoreAfterDelayWeapon()
{
	//aim1=FALSE;
	sleep DEFAULT_WEAPON_RESTORE_DELAY;
	turn torso to y-axis <0.000000> speed <100>;
	
	bAiming = FALSE;
}


AimFromPrimary(piecenum)
{
	piecenum = torso;
}


QueryPrimary(piecenum)
{
	if(firept1 == [0])
	{
		piecenum = flare11;
		return;
	}
	if(firept1 == [1])
	{
		piecenum = flare12;
		return;
	}
	if(firept1 == [2])
	{
		piecenum = flare21;
		return;
	}
	if(firept1 == [3])
	{
		piecenum = flare22;
		return;
	}
	if(firept1 == [4])
	{
		piecenum = flare31;
		return;
	}
	if(firept1 == [5])
	{
		piecenum = flare32;
		return;
	}
	if(firept1 == [6])
	{
		piecenum = flare41;
		return;
	}
	if(firept1 == [7])
	{
		piecenum = flare42;
		return;
	}	
}


Shot1()
{
	if( firept1==[0] )
	{
		emit-sfx 1024 + 0 from flare11;
		firept1=[1];
		return (0);
	}
	if( firept1==[1] )
	{
		emit-sfx 1024 + 0 from flare12;
		firept1=[2];
		return (0);
	}
	if( firept1==[2] )
	{
		emit-sfx 1024 + 0 from flare21;
		firept1=[3];
		return (0);
	}
	if( firept1==[3] )
	{
		emit-sfx 1024 + 0 from flare22;
		firept1=[4];
		return (0);
	}
	if( firept1==[4] )
	{
		emit-sfx 1024 + 0 from flare31;
		firept1=[5];
		return (0);
	}
	if( firept1==[5] )
	{
		emit-sfx 1024 + 0 from flare32;
		firept1=[6];
		return (0);
	}
	if( firept1==[6] )
	{
		emit-sfx 1024 + 0 from flare41;
		firept1=[7];
		return (0);
	}	
	if( firept1==[7] )
	{
		emit-sfx 1024 + 0 from flare42;
		firept1=[0];
		return (0);
	}	
}



AimPrimary(heading, pitch)
{

	signal SIG_AIM;
	set-signal-mask SIG_AIM;
	bAiming = TRUE;
	start-script RestoreAfterDelayWeapon();
	return (1);
}

FirePrimary()
{
	chargeState = [0];
	isReady = FALSE;
	emit-sfx 1024 + 4 FROM torso;
}

QuerySecondary(piecenum)
{
	piecenum = shieldpt;
	return (0);
}

AimFromSecondary(piecenum)
{
	piecenum = shieldpt;
	return (0);
}

AimSecondary(heading, pitch)
{
	return (1);
}

Killed(severity, corpsetype)
{
	chargeState = [0];
	if( severity <= 50 )
	{
		explode sphere type SHATTER | BITMAP4;
		explode sphere type SHATTER | BITMAP4;
		return (1);
	}
	explode sphere type SHATTER | BITMAP4;
	explode sphere type SHATTER | BITMAP4;
	return (2);		
}

