#define TA			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"

#define SPEEDUP_FACTOR 180

#define HEADING_TOLERANCE	<25>
#define PITCH_TOLERANCE		<15>

piece  torso, ruparm, luparm, rf1,rf2,lf1,lf2, pelvis, rleg, rfoot,lleg, lfoot, head, visor,lthigh, rthigh, ground;

static-var  bMoving, bAiming, gun_1,mASpdFactor, moveSpd1, turnSpd1, turnSpd2, turnSpd3;

#include "aimhelper1.h"

// Signal definitions
#define SIG_AIM				4


MotionSpeedControl(maxSpeed,currentSpeed)
{
	maxSpeed = get MAX_SPEED;
	currentSpeed = 0;
	mASpdFactor = SPEEDUP_FACTOR;
	
	while(TRUE)
	{
		currentSpeed = get CURRENT_SPEED;
		mASpdFactor = SPEEDUP_FACTOR * currentSpeed / maxSpeed;

		//call-script lua_cobDebug(mASpdFactor);
		if ( mASpdFactor < SPEEDUP_FACTOR/2 )
		{
			mASpdFactor = SPEEDUP_FACTOR/2;
		}
		
		
		moveSpd1 = [20.000000] * mASpdFactor / 100;
		turnSpd1 = <215.000000> * (100 + mASpdFactor) / 200;
		turnSpd2 = <150.000000> * (100 + mASpdFactor) / 200;
		turnSpd3 = <30.000000> * (100 + mASpdFactor) / 200;

		sleep 60;
	}
}


walk()
{
	if( bMoving )
	{
		move pelvis to y-axis [-0.450000] speed moveSpd1;
		turn pelvis to x-axis <-0.434066> speed turnSpd3;
		turn lthigh to x-axis <11.071429>  speed turnSpd2;
		turn rthigh to x-axis <-38.071429> speed turnSpd2;
		turn rleg to x-axis <-4.868132>  speed turnSpd1;
		turn rfoot to x-axis <23.945055> speed turnSpd3;
		turn lleg to x-axis <45.005495>  speed turnSpd1;
		turn lfoot to x-axis <-25.390110> speed turnSpd3;
		sleep 120 * 100 / mASpdFactor;
	}
	if( bMoving )
	{
		move pelvis to y-axis [-0.400000] speed moveSpd1;
		turn pelvis to x-axis <-3.093407> speed turnSpd3;
		turn lthigh to x-axis <30.093407> speed turnSpd2;
		turn rthigh to x-axis <-27.901099> speed turnSpd2;
		turn rleg to x-axis <-6.637363> speed turnSpd1;
		turn rfoot to x-axis <18.637363> speed turnSpd3;
		turn lleg to x-axis <29.626374> speed turnSpd1;
		turn lfoot to x-axis <-12.615385> speed turnSpd3;
		sleep 120 * 100 / mASpdFactor;
	}
	if( bMoving )
	{
		move pelvis to y-axis [-0.300000] speed moveSpd1;
		turn pelvis to x-axis <-4.868132> speed turnSpd3;
		turn lthigh to x-axis <25.758242> speed turnSpd2;
		turn rthigh to x-axis <-19.038462> speed turnSpd2;
		turn rleg to x-axis <-4.423077> speed turnSpd1;
		turn rfoot to x-axis <13.901099> speed turnSpd3;
		turn lleg to x-axis <13.736264> speed turnSpd1;
		turn lfoot to x-axis <-12.989011> speed turnSpd3;
		sleep 120 * 100 / mASpdFactor;
	}
	if( bMoving )
	{
		move pelvis to y-axis [-0.100000] speed moveSpd1;
		turn pelvis to x-axis <-6.192308> speed turnSpd3;
		turn lthigh to x-axis <12.824176> speed turnSpd2;
		turn rthigh to x-axis <0.000000> speed turnSpd2;
		turn rleg to x-axis <3.093407> speed turnSpd1;
		turn rfoot to x-axis <1.214286> speed turnSpd3;
		turn lleg to x-axis <-12.346154> speed turnSpd1;
		turn lfoot to x-axis <4.659341> speed turnSpd3;
		sleep 120 * 100 / mASpdFactor;
	}
	if( bMoving )
	{
		move pelvis to y-axis [0.000000] speed moveSpd1;
		turn pelvis to x-axis <-4.868132> speed turnSpd3;
		turn lthigh to x-axis <-19.478022> speed turnSpd2;
		turn rthigh to x-axis <1.769231> speed turnSpd2;
		turn rleg to x-axis <8.412088> speed turnSpd1;
		turn rfoot to x-axis <-3.192308> speed turnSpd3;
		turn lleg to x-axis <-16.824176> speed turnSpd1;
		turn lfoot to x-axis <21.516484> speed turnSpd3;
		sleep 120 * 100 / mASpdFactor;
	}
	if( bMoving )
	{
		move pelvis to y-axis [-0.350000] speed moveSpd1;
		turn pelvis to x-axis <-3.093407> speed turnSpd3;
		turn lthigh to x-axis <-28.324176> speed turnSpd2;
		turn rthigh to x-axis <13.280220> speed turnSpd2;
		turn rleg to x-axis <23.170330> speed turnSpd1;
		turn rfoot to x-axis <-16.181319> speed turnSpd3;
		turn lfoot to x-axis <3.357143> speed turnSpd3;
		sleep 120 * 100 / mASpdFactor;
	}
	if( bMoving )
	{
		move pelvis to y-axis [-0.400000] speed moveSpd1;
		turn pelvis to x-axis <-0.434066> speed turnSpd3;
		turn lthigh to x-axis <-36.313187> speed turnSpd2;
		turn rleg to x-axis <35.582418> speed turnSpd1;
		turn rfoot to x-axis <-22.148352> speed turnSpd3;
		turn lleg to x-axis <-10.093407> speed turnSpd1;
		turn lfoot to x-axis <14.236264> speed turnSpd3;
		sleep 120 * 100 / mASpdFactor;
	}
	if( bMoving )
	{
		move pelvis to y-axis [-0.450000] speed moveSpd1;
		turn pelvis to x-axis <-0.434066> speed turnSpd3;
		turn lthigh to x-axis <-38.071429> speed turnSpd2;
		turn rthigh to x-axis <12.835165> speed turnSpd2;
		turn rleg to x-axis <45.692308> speed turnSpd1;
		turn rfoot to x-axis <-22.835165> speed turnSpd3;
		turn lleg to x-axis <-4.423077> speed turnSpd1;
		turn lfoot to x-axis <23.945055> speed turnSpd3;
		sleep 120 * 100 / mASpdFactor;
	}
	if( bMoving )
	{
		move pelvis to y-axis [-0.400000] speed moveSpd1;
		turn pelvis to x-axis <-3.093407> speed turnSpd3;
		turn lthigh to x-axis <-32.769231> speed turnSpd2;
		turn rthigh to x-axis <30.093407> speed turnSpd2;
		turn rleg to x-axis <23.626374> speed turnSpd1;
		turn rfoot to x-axis <-5.802198> speed turnSpd3;
		turn lleg to x-axis <-5.747253> speed turnSpd1;
		turn lfoot to x-axis <21.516484> speed turnSpd3;
		sleep 120 * 100 / mASpdFactor;
	}
	if( bMoving )
	{
		move pelvis to y-axis [-0.300000] speed moveSpd1;
		turn pelvis to x-axis <-4.868132> speed turnSpd3;
		turn lthigh to x-axis <-23.236264> speed turnSpd2;
		turn rthigh to x-axis <26.780220> speed turnSpd2;
		turn rleg to x-axis <10.527473> speed turnSpd1;
		turn rfoot to x-axis <-10.989011> speed turnSpd3;
		turn lleg to x-axis <-3.978022> speed turnSpd1;
		turn lfoot to x-axis <16.659341> speed turnSpd3;
		sleep 120 * 100 / mASpdFactor;
	}
	if( bMoving )
	{
		move pelvis to y-axis [-0.099994] speed moveSpd1;
		turn pelvis to x-axis <-6.192308> speed turnSpd3;
		turn lthigh to x-axis <-12.401099> speed turnSpd2;
		turn rthigh to x-axis <-0.434066> speed turnSpd2;
		turn rleg to x-axis <-11.670330> speed turnSpd1;
		turn rfoot to x-axis <11.989011> speed turnSpd3;
		turn lleg to x-axis <4.126374> speed turnSpd1;
		turn lfoot to x-axis <7.027473> speed turnSpd3;
		sleep 120 * 100 / mASpdFactor;
	}
	if( bMoving )
	{
		move pelvis to y-axis [0.000000] speed moveSpd1;
		turn pelvis to x-axis <-4.868132> speed turnSpd3;
		turn lthigh to x-axis <0.000000> speed turnSpd2;
		turn rthigh to x-axis <-19.478022> speed turnSpd2;
		turn rleg to x-axis <-20.313187> speed turnSpd1;
		turn rfoot to x-axis <12.445055> speed turnSpd3;
		turn lleg to x-axis <22.203297> speed turnSpd1;
		turn lfoot to x-axis <-10.747253> speed turnSpd3;
		sleep 120 * 100 / mASpdFactor;
	}
	if( bMoving )
	{
		move pelvis to y-axis [-0.350000] speed moveSpd1;
		turn pelvis to x-axis <-3.093407> speed turnSpd3;
		turn lthigh to x-axis <9.291209> speed turnSpd2;
		turn rthigh to x-axis <-26.780220> speed turnSpd2;
		turn rleg to x-axis <-23.236264> speed turnSpd1;
		turn rfoot to x-axis <13.126374> speed turnSpd3;
		turn lleg to x-axis <31.879121> speed turnSpd1;
		turn lfoot to x-axis <-18.637363> speed turnSpd3;
		sleep 120 * 100 / mASpdFactor;
	}
	if (bMoving) {
		move pelvis to y-axis [-0.400000] speed moveSpd1;
		turn pelvis to x-axis <-0.434066> speed turnSpd3;
		turn lthigh to x-axis <11.071429> speed turnSpd2;
		turn rthigh to x-axis <-34.203297> speed turnSpd2;
		turn rleg to x-axis <-9.291209> speed turnSpd1;
		turn rfoot to x-axis <3.115385> speed turnSpd3;
		turn lleg to x-axis <38.615385> speed turnSpd1;
		turn lfoot to x-axis <-22.423077> speed turnSpd3;
		sleep 120 * 100 / mASpdFactor;
	}
}

SmokeUnit(healthpercent, sleeptime, smoketype)
{
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 400;
	}
	while( TRUE )
	{
		healthpercent = get HEALTH;
		if( healthpercent < 66 )
		{
			smoketype = 256 | 2;
			if( Rand( 1, 66 ) < healthpercent )
			{
				smoketype = 256 | 1;
			}
			emit-sfx smoketype from torso;
		}
		sleeptime = healthpercent * 50;
		if( sleeptime < 200 )
		{
			sleeptime = 200;
		}
		sleep sleeptime;
	}
}

MotionControl(moving, aiming, justmoved)
{
	justmoved = TRUE;
	while( TRUE )
	{
		moving = bMoving;
		aiming = bAiming;
		if( moving )
		{
			call-script walk();
			justmoved = TRUE;
		}
		if( !moving )
		{
			if( justmoved )
			{
				turn torso to x-axis <0.000000> speed <100.038462>;
				move pelvis to y-axis [0.000000] speed [1.000000];
				turn pelvis to x-axis <0> speed <200>;
				turn rthigh to x-axis <0.000000> speed <200.038462>;
				turn rleg to x-axis <0.000000> speed <200.038462>;
				turn rfoot to x-axis <0.000000> speed <200.038462>;
				turn lthigh to x-axis <0.000000> speed <200.038462>;
				turn lleg to x-axis <0.000000> speed <200.038462>;
				turn lfoot to x-axis <0.000000> speed <200.038462>;
				if( !aiming )
				{
					turn torso to y-axis <0.000000> speed <90.016484>;
					turn ruparm to x-axis <0.000000> speed <200.038462>;
					turn luparm to x-axis <0.000000> speed <200.038462>;
				}
				justmoved = FALSE;
			}
			sleep 100;
		}
	}
}

Create()
{
	bMoving = FALSE;
	bAiming = FALSE;
	gun_1 = 0;
	call-script stopAimHelper1(<1000>,<1000>);
	start-script MotionSpeedControl();
	start-script MotionControl();
	start-script SmokeUnit();
}

StartMoving()
{
	bMoving = TRUE;
}

StopMoving()
{
	bMoving = FALSE;
}

RestoreAfterDelay()
{
	sleep DEFAULT_WEAPON_RESTORE_DELAY;
	call-script stopAimHelper1(<90>,<90>);
	turn torso to y-axis <0.000000> speed <90.016484>;
	turn ruparm to x-axis <0.000000> speed <95.005495>;
	turn luparm to x-axis <0.000000> speed <95.005495>;
	wait-for-turn torso around y-axis;
	wait-for-turn ruparm around x-axis;
	wait-for-turn luparm around x-axis;
	bAiming = FALSE;
}

AimFromPrimary(piecenum)
{
	piecenum = torso;
}

QueryPrimary(piecenum)
{
	if( gun_1 == 0 )
	{
		piecenum = lf1;
		return(0);
	}
	if( gun_1 == 1 )
	{
		piecenum = rf1;
		return(0);
	}
	if( gun_1 == 2 )
	{
		piecenum = lf2;
		return(0);
	}
	if( gun_1 == 3 )
	{
		piecenum = rf2;
		return(0);
	}

}

AimPrimary(heading, pitch)
{
	call-script updateAimHelper1(heading,pitch,<120>,<120>,HEADING_TOLERANCE,PITCH_TOLERANCE);
	signal SIG_AIM;
	set-signal-mask SIG_AIM;
	bAiming = TRUE;

	turn torso to y-axis heading speed <120.016484>;
	turn luparm to x-axis <0.000000> - pitch speed <120.005495>;
	turn ruparm to x-axis <0.000000> - pitch speed <120.005495>;
	if (!aimReady1)
	{
		wait-for-turn torso around y-axis;
		wait-for-turn luparm around x-axis;
		wait-for-turn ruparm around x-axis;
	}
	start-script RestoreAfterDelay();
	return (1);
}

Shot1()
{
	if( gun_1 == 0 )
	{
		emit-sfx 1024 from lf1;
		sleep 50;
		gun_1 = 1;
		return (0);
	}
	if( gun_1 == 1 )
	{
		emit-sfx 1024 from rf1;
		sleep 50;
		gun_1 = 2;
		return (0);
	}
	if( gun_1 == 2 )
	{
		emit-sfx 1024 from lf2;
		sleep 50;
		gun_1 = 3;
		return (0);
	}
	if( gun_1 == 3 )
	{
		emit-sfx 1024 from rf2;
		sleep 50;
		gun_1 = 0;
		return (0);
	}		
}

Killed(severity, corpsetype)
{
	if( severity <= 50 )
	{
		explode head type SHATTER;
		explode luparm type SHATTER;
		explode ruparm type SHATTER;
		return (1);
	}
	explode head type SHATTER;
	explode luparm type SHATTER;
	explode ruparm type SHATTER;
	explode lthigh type SHATTER;
	explode rthigh type SHATTER;
	return (2);
}
