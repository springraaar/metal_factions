#define TA			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"

#define SPEEDUP_FACTOR 	100

#define HEADING_TOLERANCE	<25>
#define PITCH_TOLERANCE		<15>


piece  flare, turret, base, sleeve, barrel, t1,t2,t3,t4,t1cover,t2cover,t3cover,t4cover,left,right,center,center2,body;

static-var  restore_delay, bMoving;

#include "aimhelper1.h"

// Signal definitions
#define SIG_AIM				2


StartMoving()
{
 	bMoving = TRUE;
}

StopMoving()
{
 	bMoving = FALSE;
}

AnimateTracks(current,maxSpeed,currentSpeed, delay)
{
	maxSpeed = get MAX_SPEED;
	current = 0;
	
	while(TRUE)
	{
		currentSpeed = get CURRENT_SPEED;
		
		delay = 140;
		if ( currentSpeed > 0 AND bMoving )
		{
			delay = delay - ((currentSpeed * 100) / maxSpeed);
			
			if( current == 0 )
			{
				turn t1 to y-axis <180.000000> now;
				turn t2 to y-axis <180.000000> now;
				turn t3 to y-axis <180.000000> now;
				turn t4 to y-axis <180.000000> now;

			}
			if( current == 1 )
			{
				turn t1 to y-axis <0.000000> now;
				turn t2 to y-axis <0.000000> now;
				turn t3 to y-axis <0.000000> now;
				turn t4 to y-axis <0.000000> now;
			}
			
			current = current + 1;
			if( current == 2 )
			{
				current = 0;
			}
		}
		
		if( delay > 0)
		{
			sleep delay;
		}
		if( delay <= 0)
		{
			sleep 100;
		}
	}
}

SmokeUnit(healthpercent, sleeptime, smoketype)
{
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 400;
	}
	while( TRUE )
	{
		healthpercent = get HEALTH;
		if( healthpercent < 66 )
		{
			smoketype = 256 | 2;
			if( Rand( 1, 66 ) < healthpercent )
			{
				smoketype = 256 | 1;
			}
			emit-sfx smoketype from base;
		}
		sleeptime = healthpercent * 50;
		if( sleeptime < 200 )
		{
			sleeptime = 200;
		}
		sleep sleeptime;
	}
	return (0);
}



Create()
{
	hide flare;
	call-script stopAimHelper1(<1000>,<1000>);
	start-script SmokeUnit();
	start-script AnimateTracks();
	return (0);
}


RestoreAfterDelay()
{
	sleep DEFAULT_WEAPON_RESTORE_DELAY;
	call-script stopAimHelper1(<100>,<100>);
	turn turret to y-axis <0.000000> speed <100.000000>;
	turn sleeve to x-axis <0.000000> speed <100.000000>;
	return (0);
}

AimPrimary(heading, pitch)
{
	call-script updateAimHelper1(heading,pitch,<170>,<170>,HEADING_TOLERANCE,PITCH_TOLERANCE);
	signal SIG_AIM;
	set-signal-mask SIG_AIM;
	turn turret to y-axis heading speed <170.000000>;
	turn sleeve to x-axis <0.000000> - pitch speed <170.000000>;
	if (!aimReady1)
	{
		wait-for-turn turret around y-axis;
		wait-for-turn sleeve around x-axis;
	}
	start-script RestoreAfterDelay();
	return (1);
}

FirePrimary()
{
	emit-sfx 1024 + 0 from flare;
	sleep 150;
	return (0);
}

QueryPrimary(piecenum)
{
	piecenum = flare;
	return (0);
}

AimFromPrimary(piecenum)
{
	piecenum = turret;
	return (0);
}

Killed(severity, corpsetype)
{
	if( severity <= 50 )
	{
		explode barrel type SHATTER;
		explode turret type SHATTER;
		return (1);
	}
	explode barrel type SHATTER;
	explode turret type SHATTER;
	explode t1 type SHATTER;
	explode t2 type SHATTER;
	explode t3 type SHATTER;
	explode t4 type SHATTER;
	explode sleeve type SHATTER | EXPLODE_ON_HIT | BITMAP1;
	return (2);
}
