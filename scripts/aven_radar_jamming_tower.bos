#define TA			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"

piece  base, dish, ear1, ear2, bak, huva, b1, b2, floatbase;

static-var  statechg_DesiredState, statechg_StateChanging, isFloating;


SmokeUnit(healthpercent, sleeptime, smoketype)
{
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 400;
	}
	while( TRUE )
	{
		healthpercent = get HEALTH;
		if( healthpercent < 66 )
		{
			smoketype = 256 | 2;
			if( Rand( 1, 66 ) < healthpercent )
			{
				smoketype = 256 | 1;
			}
			emit-sfx smoketype from base;
		}
		sleeptime = healthpercent * 50;
		if( sleeptime < 200 )
		{
			sleeptime = 200;
		}
		sleep sleeptime;
	}
	return (0);
}

Go()
{
	spin dish around y-axis speed <60.000000>;
	spin ear1 around x-axis speed <360.000000>;
	spin ear2 around x-axis speed <-360.000000>;
	return (0);
}

Stop()
{
	spin dish around y-axis speed <0.000000>;
	spin ear1 around x-axis speed <0.000000>;
	spin ear2 around x-axis speed <0.000000>;
	return (0);
}

InitState()
{
	statechg_DesiredState = TRUE;
	statechg_StateChanging = FALSE;
	return (0);
}

RequestState(requestedstate, currentstate)
{
	if( statechg_StateChanging )
	{
		statechg_DesiredState = requestedstate;
		return (0);
	}
	statechg_StateChanging = TRUE;
	currentstate = statechg_DesiredState;
	statechg_DesiredState = requestedstate;
	while( statechg_DesiredState != currentstate )
	{
		if( statechg_DesiredState == 0 )
		{
			call-script Go();
			currentstate = 0;
		}
		if( statechg_DesiredState == 1 )
		{
			call-script Stop();
			currentstate = 1;
		}
	}
	statechg_StateChanging = FALSE;
	return (0);
}

Create()
{
	hide floatbase;
	isFloating = FALSE;
	if ( GET GROUND_WATER_HEIGHT(GET UNIT_XZ) < [0])
	{
		isFloating = TRUE;
		show floatbase;
	}
	
	call-script InitState();
	start-script SmokeUnit();
	return (0);
}

Activate()
{
	start-script RequestState(0);
	return (0);
}

Deactivate()
{
	start-script RequestState(1);
	return (0);
}

Killed(severity, corpsetype)
{
	if( severity <= 50 )
	{
		if (isFloating) 
		{
			corpsetype = 1;
		}
		if (!isFloating) 
		{
			corpsetype = 2;
		}
		explode dish type SHATTER | BITMAP1;
		explode ear1 type SHATTER | BITMAP1;
		explode ear2 type SHATTER | BITMAP1;
		return corpsetype;
	}

	corpsetype = 3;
	explode dish type SHATTER | BITMAP1;
	explode ear1 type SHATTER | BITMAP1;
	explode ear2 type SHATTER | BITMAP1;
	explode b1 type SHATTER | BITMAP1;
	explode b2 type SHATTER | BITMAP1;
	return corpsetype;
}
