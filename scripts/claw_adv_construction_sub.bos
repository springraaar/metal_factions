#define TA			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"

piece  base, aimh, aimv, wake1, wake2, nano1, nano2, beam1, beam2, front, nose, back, turret;

static-var  buildHeading, bBuilding, nanoPt;

// Signal definitions
#define SIG_MOVE			2
#define SIG_BUILD			4


StartMoving() {
	signal SIG_MOVE;
	set-signal-mask SIG_MOVE;
	while( TRUE ) {
		emit-sfx 256 | 3 from wake1;
		emit-sfx 256 | 3 from wake2;
		sleep 250;
	}
	return (0);
}

StopMoving() {
	signal SIG_MOVE;
	return (0);
}

Go() {
	turn turret to y-axis buildHeading speed <240.000000>;
	wait-for-turn turret around y-axis;
	set INBUILDSTANCE to 1;
	return (0);
}

Stop() {
	set INBUILDSTANCE to 0;
	turn turret to y-axis <0.000000> speed <240.000000>;
	wait-for-turn turret around y-axis;
	return (0);
}

Create() {
	buildHeading = 0;
	nanoPt = 0;
	return (0);
}

StartBuilding(heading) {
	signal SIG_BUILD;
	buildHeading = heading;
	start-script Go();
	return (0);
}

StopBuilding() {
	set INBUILDSTANCE to 0;
	set-signal-mask SIG_BUILD;
	Sleep DEFAULT_BUILDER_RESTORE_DELAY;
	start-script Stop();
	return (0);
}

QueryNanoPiece(piecenum) {
	if( nanoPt == 0) {
		piecenum = beam1;
		nanoPt = 1;
	} else {
		piecenum = beam2;
		nanoPt = 0;
	}
	return (0);
}

TargetHeading(heading) {
	buildHeading = 0 - heading;
	return (0);
}

Killed(severity, corpsetype) {
	if( severity <= 50 ) {
		corpsetype = 1;
		explode nose type SHATTER | EXPLODE_ON_HIT | BITMAP5;
		explode back type SHATTER | EXPLODE_ON_HIT | BITMAP5;
		explode turret type SHATTER | EXPLODE_ON_HIT | BITMAP5;
	}
	corpsetype = 2;
	explode front type SHATTER | EXPLODE_ON_HIT | BITMAP5;
	explode nose type SHATTER | EXPLODE_ON_HIT | BITMAP5;
	explode back type SHATTER | EXPLODE_ON_HIT | BITMAP5;
	explode turret type SHATTER | EXPLODE_ON_HIT | BITMAP5;
	return (corpsetype);
}
