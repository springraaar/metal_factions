#define TA			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"

#define HEADING_TOLERANCE	<25>
#define PITCH_TOLERANCE		<35>

piece base,hull,wingsup, wingsup2,bwingl,bwingr,fwingl,fwingr,weapon1,barrels,flash,lj1p,lj2p,rj1p,rj2p,charge1,ljb,rjb;

static-var   gun_1, bAiming;

#include "aimhelper1.h"

// signal definitions
#define SIG_AIM				2
#define SIG_AIM_2			4

#define MAX_CHARGES 75
#define CHARGE_RELOAD 400


thrusterAngleControl(maxSpeed,currentSpeed,thrusterAngle) {
	while(TRUE) {
	
		maxSpeed = get MAX_SPEED;
		currentSpeed = get CURRENT_SPEED;
		
		thrusterAngle = currentSpeed * <30> / maxSpeed;
		if ( bAiming ) {
			thrusterAngle = <0>;
		}
	
		if (thrusterAngle > <-45> && thrusterAngle < <45>) {
			turn ljb to x-axis thrusterangle speed <20>;
			turn rjb to x-axis thrusterangle speed <20>;
		}
	
		sleep 50;
	}
}



SmokeUnit(healthpercent, sleeptime, smoketype)
{
	while( get BUILD_PERCENT_LEFT )	{
		sleep 400;
	}
	while( TRUE ) {
		healthpercent = get HEALTH;
		if( healthpercent < 66 )
		{
			smoketype = 256 | 2;
			if( Rand( 1, 66 ) < healthpercent ) {
				smoketype = 256 | 1;
			}
			emit-sfx smoketype from base;
		}
		sleeptime = healthpercent * 50;
		if( sleeptime < 200 ) {
			sleeptime = 200;
		}
		sleep sleeptime;
	}
	return (0);
}



RestoreAfterDelay() {
	sleep DEFAULT_WEAPON_RESTORE_DELAY;

	call-script stopAimHelper1(<200>,<200>);
	turn base to y-axis <0> speed <200>;
	turn hull to x-axis <0> speed <200>;
	wait-for-turn base around y-axis;
	wait-for-turn hull around x-axis;
	bAiming = FALSE;
}


Create() {
	gun_1 = 0;
	bAiming = FALSE;
	turn lj1p to x-axis <-90.000000> now;
	turn lj2p to x-axis <-90.000000> now;
	turn rj1p to x-axis <-90.000000> now;	
	turn rj2p to x-axis <-90.000000> now;
	call-script stopAimHelper1(<1000>,<1000>);
	start-script thrusterAngleControl();
	start-script SmokeUnit();
}

Activate() {
	return(0);
}

Deactivate() {
	return(0);
}


Shot1()
{
	emit-sfx 1024 + 0 from flash;
	sleep 10;
	
	// turn barrel to next position
	if( gun_1 == [0] )
	{
		sleep 10;
		turn barrels to z-axis <60.000000> speed <1200.000000>;
		gun_1 = [1];
		return (0);
	}
	if( gun_1 == [1] )
	{
		sleep 10;
		turn barrels to z-axis <120.000000> speed <1200.000000>;
		gun_1 = [2];
		return (0);
	}
	if( gun_1 == [2] )
	{
		sleep 10;
		turn barrels to z-axis <180.000000> speed <1200.000000>;
		gun_1 = [3];
		return (0);
	}
	if( gun_1 == [3] )
	{
		sleep 10;
		turn barrels to z-axis <240.000000> speed <1200.000000>;
		gun_1 = [4];
		return (0);
	}
	if( gun_1 == [4] )
	{
		sleep 10;
		turn barrels to z-axis <300.000000> speed <1200.000000>;
		gun_1 = [5];
		return (0);
	}
		if( gun_1 == [5] )
	{
		sleep 10;
		turn barrels to z-axis <360.000000> speed <1200.000000>;
		gun_1 = [0];
		return (0);
	}
			
}

QueryPrimary(piecenum)
{
	piecenum = flash;
}


AimFromPrimary(piecenum) {
	piecenum = base;
	return (0);
}

AimPrimary(heading, pitch) {
	call-script updateAimHelper1(heading,pitch,<350>,<350>,HEADING_TOLERANCE,PITCH_TOLERANCE);
	signal SIG_AIM;
	set-signal-mask SIG_AIM;
	bAiming = TRUE;
	turn base to y-axis heading speed <300>;
	turn hull to x-axis <0> - pitch speed <300>;
	if (!aimReady1) {
		wait-for-turn base around y-axis;
		wait-for-turn hull around x-axis;
	}
	start-script RestoreAfterDelay();
	return (1);
}


Killed(severity, corpsetype) {
	explode fwingl type SHATTER | EXPLODE_ON_HIT | BITMAP1;
	explode fwingr type SHATTER | EXPLODE_ON_HIT | BITMAP1;
	explode weapon1 type SHATTER | EXPLODE_ON_HIT | BITMAP1;
	explode wingsup type SHATTER | EXPLODE_ON_HIT | BITMAP1;
	explode wingsup2 type SHATTER | EXPLODE_ON_HIT | BITMAP1;
	return (3);
}
