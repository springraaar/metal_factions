#define TA			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"

#define SPEEDUP_FACTOR 	100

piece  base,walls,w1,w2,front, beam, door1, door2, plate, nano, turret, t1,t2,t1cover,t2cover;

static-var  Static_Var_1, Static_Var_4, isOpen;

// Signal definitions
#define SIG_BUILD			2

#include "tankthreads.h"

Build()
{
	while(TRUE)
	{
		if( Static_Var_4 == 1 )
		{
			emit-sfx 1024 + 0 from beam;
			
		}
		sleep 100;
	}
	return (0);
}

activatescr()
{
	if( !isOpen )
	{
		turn door1 to z-axis <0.000000> now;
		turn door1 to z-axis <-65.714286> speed <400.000000>;
		turn door2 to z-axis <0.000000> now;
		turn door2 to z-axis <65.258242> speed <400.000000>;
		sleep 230;
		move door1 to y-axis [-7.749985] speed [50.000000];
		move door2 to y-axis [-7.625000] speed [50.000000];
		sleep 230;
		move plate to y-axis [8.000000] speed [60.000000];
		sleep 230;
		isOpen = TRUE;
	}
	sleep 22;
	return (0);
}

deactivatescr()
{
	if( isOpen )
	{
		isOpen = FALSE;
		move plate to y-axis [8.000000] now;
		move door1 to y-axis [-7.749985] now;
		move door2 to y-axis [-7.625000] now;
		turn door1 to z-axis <-65.714286> now;
		turn door2 to z-axis <65.258242> now;
		sleep 220;
		move plate to y-axis [0.000000] speed [24.421585];
		sleep 389;
		move door1 to y-axis [0.000000] speed [60.000000];
		move door2 to y-axis [0.000000] speed [60.000000];
		sleep 230;
		turn door1 to z-axis <0.000000> speed <500.000000>;
		turn door2 to z-axis <0.000000> speed <500.000000>;
		sleep 130;
	}
	sleep 20;
	return (0);
}

SmokeUnit(healthpercent, sleeptime, smoketype)
{
	var Func_Var_4;
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 400;
	}
	while( TRUE )
	{
		healthpercent = get HEALTH;
		if( healthpercent < 66 )
		{
			smoketype = 256 | 2;
			if( Rand( 1, 66 ) < healthpercent )
			{
				smoketype = 256 | 1;
			}
			Func_Var_4 = Rand( 1, 2 );
			if( Func_Var_4 == 1 )
			{
				emit-sfx smoketype from door1;
			}
			if( Func_Var_4 == 2 )
			{
				emit-sfx smoketype from door2;
			}
		}
		sleeptime = healthpercent * 50;
		if( sleeptime < 200 )
		{
			sleeptime = 200;
		}
		sleep sleeptime;
	}
	return (0);
}

Go()
{
	call-script activatescr();
	turn turret to y-axis Static_Var_1 speed <480.000000>;
	wait-for-turn turret around y-axis;
	set INBUILDSTANCE to 1;
	return (0);
}

Stop()
{
	set INBUILDSTANCE to 0;
	turn turret to y-axis <0.000000> speed <480.000000>;
	wait-for-turn turret around y-axis;
	call-script deactivatescr();
	return (0);
}

Create()
{
	Static_Var_1 = 0;
	isOpen = FALSE;
	start-script SmokeUnit();
	start-script Build();
	start-script AnimateTracks();
	return (0);
}


TargetHeading(Func_Var_1)
{
	Static_Var_1 = 0 - Func_Var_1;
	return (0);
}

StartBuilding(Func_Var_1)
{
	signal SIG_BUILD;
	Static_Var_1 = Func_Var_1;
	start-script Go();
	Static_Var_4 = 1;
	return (0);
}

StopBuilding()
{
	set-signal-mask SIG_BUILD;
	set INBUILDSTANCE to 0;
	Static_Var_4 = 0;
	Sleep DEFAULT_BUILDER_RESTORE_DELAY;	
	start-script Stop();
	return (0);
}

QueryNanoPiece(piecenum)
{
	piecenum = beam;
	return (0);
}

Killed(severity, corpsetype)
{
	if( severity <= 50 )
	{
		explode door1 type SHATTER;
		explode door2 type SHATTER;
		explode turret type SHATTER;
		explode plate type SHATTER;
		return (1);
	}
	explode base type BITMAPONLY | BITMAP2;
	explode nano type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
	explode beam type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP4;
	explode door1 type BITMAPONLY | BITMAP5;
	explode door2 type BITMAPONLY | BITMAP1;
	explode turret type SHATTER | EXPLODE_ON_HIT | BITMAP2;
	explode plate type BITMAPONLY | BITMAP3;
	return (2);
}
