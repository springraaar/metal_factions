#define TAK			// This is a TAK script

#include "sfxtype.h"
#include "exptype.h"

#define SPEEDUP_FACTOR 140

#define HEADING_TOLERANCE	<25>
#define PITCH_TOLERANCE		<15>

piece base,body,box,s3,walls,stand,turret,sleeve,barrel,barrel2,flare,plate,door1,door2,rmidsup,rmidleg,rmid2,rfrontsup,rfrontleg,rfront2,rbacksup,rbackleg,rback2,lbacksup,lbackleg,lback2,lmidsup,lmidleg,lmid2,lfrontsup,lfrontleg,lfront2,lbolts,rbolts;

static-var  bMoving, bAiming, bSwimming, terrainStatus, waterSpeed, landSpeed, lastHeading, isDeployed;

lua_setMobility() { return 0; }

#include "aimhelper1.h"

// Signal definitions
#define SIG_MOVE			2
#define SIG_AIM				4



shake()
{
	set CEG_DAMAGE to 10;
	play-sound( "burrow", 15 );
	sleep 30;
	emit-sfx 1024+1 from rbolts;
	emit-sfx 1024+1 from lbolts;
	
}

deploy()
{
	if (!isDeployed)
	{
		call-script lua_setMobility(0);
		
		// open
		turn door1 to z-axis <-75> speed <400.000000>;
		turn door2 to z-axis <75> speed <400.000000>;
		wait-for-turn door1 around z-axis;
		move door1 to y-axis [-12] speed [50.000000];
		move door2 to y-axis [-12] speed [50.000000];
		wait-for-move door1 along y-axis;
		move stand to y-axis [17.000000] speed [60.000000];
		wait-for-move stand along y-axis;

				
		move lbolts to y-axis [-1.5] speed [100.000000];
		move rbolts to y-axis [-1.5] speed [100.000000];
		call-script shake();

		// barrels
		move barrel to z-axis [0] speed [20];
		wait-for-move barrel along z-axis;
		
		
		isDeployed = TRUE;
	}
}

undeploy()
{
	if (isDeployed)
	{
		isDeployed = FALSE;
		call-script stopAimHelper1(<1000>,<1000>);
	
		turn turret to y-axis <0> speed <80>;
		turn sleeve to x-axis <0> speed <80>;
		wait-for-turn turret around y-axis;
		wait-for-turn sleeve around x-axis;
		
		// unburrow
		move lbolts to y-axis [0] speed [10.000000];
		move rbolts to y-axis [0] speed [10.000000];

		move barrel to z-axis [-20] speed [20];
		wait-for-move barrel along z-axis;
		call-script lua_setMobility(100);
		
		// close
		sleep 220;
		//move plate to y-axis [0.000000] speed [24.421585];
		move stand to y-axis [0.000000] speed [60.000000];
		wait-for-move stand along y-axis;
		move door1 to y-axis [0.000000] speed [60.000000];
		move door2 to y-axis [0.000000] speed [60.000000];
		wait-for-move door1 along y-axis;
		turn door1 to z-axis <0.000000> speed <500.000000>;
		turn door2 to z-axis <0.000000> speed <500.000000>;
		wait-for-turn door1 around z-axis;
	}
	isDeployed = FALSE;
}


handleActivation()
{
	while (TRUE)
	{ 
		if (get ACTIVATION) 
		{
			if ((terrainStatus == 2 OR terrainStatus == 1)) 
			{
				call-script undeploy();
			}
			else
			{
				call-script deploy();
			}
		}
		else
		{
			call-script undeploy();
		}
		sleep 100;
	}
}


recoil(anglex, anglez)
{
	anglex = <-1.000000> * (get KCOS(lastHeading)) / 100;
	anglez = <-1.000000> * (get KSIN(lastHeading)) / 100;
	
	turn base to x-axis anglex speed <150.005495>;
	turn base to z-axis anglez speed <150.005495>;
	wait-for-turn base around z-axis;
	wait-for-turn base around x-axis;
	turn base to z-axis <0.000000> speed <20.000000>;
	turn base to x-axis <0.000000> speed <20.000000>;
}

SmokeUnit(healthpercent, sleeptime, smoketype)
{
	var Func_Var_4;
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 400;
	}
	while( TRUE )
	{
		healthpercent = get HEALTH;
		if( healthpercent < 66 )
		{
			smoketype = 256 | 2;
			if( Rand( 1, 66 ) < healthpercent )
			{
				smoketype = 256 | 1;
			}
			emit-sfx smoketype from turret;
		}
		sleeptime = healthpercent * 50;
		if( sleeptime < 200 )
		{
			sleeptime = 200;
		}
		sleep sleeptime;
	}
	return (0);
}


walk()
{
	if( bMoving )
	{
		turn rmid2 to z-axis <0.000000> speed <80.000000> * SPEEDUP_FACTOR / 100;
		turn lmid2 to z-axis <0.000000> speed <80.000000> * SPEEDUP_FACTOR / 100;
		
		turn base to z-axis <-1.000000> speed <10.000000> * SPEEDUP_FACTOR / 100;

		turn lfrontleg to y-axis <20.000000> speed <100.967033> * SPEEDUP_FACTOR / 100;
		turn lfrontleg to z-axis <5.016484> speed <550.104396> * SPEEDUP_FACTOR / 100;

		turn lmidleg to y-axis <-20.000000> speed <300.038462> * SPEEDUP_FACTOR / 100;
		turn lmidleg to z-axis <-15.016484> speed <60.104396> * SPEEDUP_FACTOR / 100;

		turn lbackleg to y-axis <45.060440> speed <120.038462> * SPEEDUP_FACTOR / 100;
		turn lbackleg to z-axis <5.016484> speed <550.104396> * SPEEDUP_FACTOR / 100;
		
		turn rfrontleg to y-axis <40.412088> speed <300.060440> * SPEEDUP_FACTOR / 100;
		turn rfrontleg to z-axis <15.016484> speed <60.104396> * SPEEDUP_FACTOR / 100;
		
		turn rmidleg to y-axis <-20.093407> speed <100.368132> * SPEEDUP_FACTOR / 100;
		turn rmidleg to z-axis <-5.016484> speed <550.104396> * SPEEDUP_FACTOR / 100;
		
		turn rbackleg to y-axis <15.137363> speed <300.681319> * SPEEDUP_FACTOR / 100;
		turn rbackleg to z-axis <15.016484> speed <60.104396> * SPEEDUP_FACTOR / 100;
		
		
		sleep 200 * 100 / SPEEDUP_FACTOR;
	}

	// only vertical
	if( bMoving )
	{
		//turn lfrontleg to z-axis <-15.016484> speed <60.104396> * SPEEDUP_FACTOR / 100;

		turn lmidleg to z-axis <5.016484> speed <150.104396> * SPEEDUP_FACTOR / 100;

		//turn lbackleg to z-axis <-15.016484> speed <60.104396> * SPEEDUP_FACTOR / 100;

		turn rfrontleg to z-axis <-5.016484> speed <150.104396> * SPEEDUP_FACTOR / 100;
		
		//turn rmidleg to z-axis <15.016484> speed <60.104396> * SPEEDUP_FACTOR / 100;
		
		turn rbackleg to z-axis <-5.016484> speed <150.104396> * SPEEDUP_FACTOR / 100;
		
		sleep 200 * 100 / SPEEDUP_FACTOR;
	}
	
	
	if( bMoving )
	{
		turn base to z-axis <1.000000> speed <10.000000> * SPEEDUP_FACTOR / 100;

		turn lfrontleg to y-axis <-40.000000> speed <300.967033> * SPEEDUP_FACTOR / 100;
		turn lfrontleg to z-axis <-15.016484> speed <60.104396> * SPEEDUP_FACTOR / 100;

		turn lmidleg to y-axis <20.000000> speed <100.038462> * SPEEDUP_FACTOR / 100;
		turn lmidleg to z-axis <5.016484> speed <550.104396> * SPEEDUP_FACTOR / 100;

		turn lbackleg to y-axis <-15.060440> speed <300.038462> * SPEEDUP_FACTOR / 100;
		turn lbackleg to z-axis <-15.016484> speed <60.104396> * SPEEDUP_FACTOR / 100;

		turn rfrontleg to y-axis <-20.412088> speed <100.060440> * SPEEDUP_FACTOR / 100;
		turn rfrontleg to z-axis <-5.016484> speed <550.104396> * SPEEDUP_FACTOR / 100;
		
		turn rmidleg to y-axis <20.093407> speed <300.368132> * SPEEDUP_FACTOR / 100;
		turn rmidleg to z-axis <15.016484> speed <60.104396> * SPEEDUP_FACTOR / 100;
		
		turn rbackleg to y-axis <-45.137363> speed <120.681319> * SPEEDUP_FACTOR / 100;
		turn rbackleg to z-axis <-5.016484> speed <550.104396> * SPEEDUP_FACTOR / 100;
		
		sleep 200 * 100 / SPEEDUP_FACTOR;
	}
	
	// only vertical
	if( bMoving )
	{
		turn rmid2 to z-axis <0.000000> speed <80.000000> * SPEEDUP_FACTOR / 100;
		turn lmid2 to z-axis <0.000000> speed <80.000000> * SPEEDUP_FACTOR / 100;

		turn lfrontleg to z-axis <5.016484> speed <150.104396> * SPEEDUP_FACTOR / 100;

		//turn lmidleg to z-axis <-15.016484> speed <60.104396> * SPEEDUP_FACTOR / 100;

		turn lbackleg to z-axis <5.016484> speed <150.104396> * SPEEDUP_FACTOR / 100;
		
		//turn rfrontleg to z-axis <15.016484> speed <60.104396> * SPEEDUP_FACTOR / 100;
		
		turn rmidleg to z-axis <-5.016484> speed <150.104396> * SPEEDUP_FACTOR / 100;
		
		//turn rbackleg to z-axis <15.016484> speed <60.104396> * SPEEDUP_FACTOR / 100;
		
		
		sleep 200 * 100 / SPEEDUP_FACTOR;
	}
	
	
	return (0);
}


MotionControl(justMoved)
{
	justMoved = TRUE;
	while( TRUE )
	{
		// on water
		if( ( !bSwimming ) AND (terrainStatus == 2 OR terrainStatus == 1))
		{
			bSwimming = TRUE;
			justMoved = TRUE;
		}
		// over land
		if( bSwimming AND terrainStatus == 4 )
		{
			bSwimming = FALSE;
			justMoved = TRUE;
		}
		if( bMoving )
		{
			call-script walk();
			justMoved = TRUE;
		}
		if( !bMoving )
		{
			if( justMoved )
			{
				turn lfrontleg to y-axis <0.000000> speed <237.000000>;
				turn lfrontleg to z-axis <0.000000> speed <237.000000>;
				turn lmidleg to y-axis <0.000000> speed <237.000000>;
				turn lmidleg to z-axis <0.000000> speed <237.000000>;
				turn lbackleg to y-axis <0.000000> speed <237.000000>;
				turn lbackleg to z-axis <0.000000> speed <237.000000>;
				turn rbackleg to y-axis <0.000000> speed <237.000000>;
				turn rbackleg to z-axis <0.000000> speed <237.000000>;
				turn rmidleg to y-axis <0.000000> speed <237.000000>;
				turn rmidleg to z-axis <0.000000> speed <237.000000>;
				turn rfrontleg to y-axis <0.000000> speed <237.000000>;
				turn rfrontleg to z-axis <0.000000> speed <237.000000>;
				turn lbackleg to y-axis <25.000000> speed <300.000000>;
				turn rbackleg to y-axis <-25.000000> speed <300.000000>;
				turn rfrontleg to y-axis <25.000000> speed <300.000000>;
				turn lfrontleg to y-axis <-25.000000> speed <300.000000>;
	
				justMoved = FALSE;
			}
			sleep 100;
		}
	}
	return (0);
}

Create()
{
	landSpeed = get MAX_SPEED;
	waterSpeed = landSpeed * 100/150;
	//landSpeed = waterSpeed;	// same as land
	move barrel to z-axis [-20] now;
	//move barrel2 to z-axis [-12] now;
	bMoving = FALSE;
	bAiming = FALSE;
	bSwimming = FALSE;
	isDeployed = FALSE;
	lastHeading = 0;
	call-script stopAimHelper1(<1000>,<1000>);
	start-script MotionControl();
	start-script SmokeUnit();
	start-script handleActivation();
	return (0);
}

StartMoving()
{
	bMoving = TRUE;
	signal SIG_MOVE;
	set-signal-mask SIG_MOVE;
	return (0);
}

StopMoving()
{
	bMoving = FALSE;
	signal SIG_MOVE;
	return (0);
}

setSFXoccupy(Func_Var_1)
{
	terrainStatus = Func_Var_1;
	return (0);
}


RestoreAfterDelay()
{
	sleep DEFAULT_WEAPON_RESTORE_DELAY;
	call-script stopAimHelper1(<80>,<80>);
	turn turret to y-axis <0.000000> speed <80.000000>;
	turn sleeve to x-axis <0.000000> speed <80.000000>;
	lastHeading = 0;
	return (0);
}


AimPrimary(heading, pitch)
{
	if (!isDeployed)
	{
		return 0;
	}

	call-script updateAimHelper1(heading,pitch,<80>,<80>,HEADING_TOLERANCE,PITCH_TOLERANCE);
	signal SIG_AIM;
	set-signal-mask SIG_AIM;
	bAiming = TRUE;
	turn turret to y-axis heading speed <80.000000>;
	turn sleeve to x-axis <0.000000> - pitch speed <80.000000>;
	if (!aimReady1)
	{
		wait-for-turn turret around y-axis;
		wait-for-turn sleeve around x-axis;
	}
	lastHeading = heading;
	start-script RestoreAfterDelay();
	return (1);
}


FirePrimary()
{
	move barrel to z-axis [-6.000000] now;
	emit-sfx 1024 from flare;
	//call-script recoil();
	sleep 130;
	move barrel to z-axis [0.00000] speed [4.000000];
	return (1);
}


AimFromPrimary(piecenum)
{
	piecenum = turret;
	return (0);
}

QueryPrimary(piecenum)
{
	piecenum = flare;
	return (0);
}

SweetSpot(piecenum)
{
	piecenum = turret;
	return (0);
}




Killed(severity, corpsetype)
{
	if( severity <= 50 )
	{
		explode turret type SHATTER;
		explode body type SHATTER;
		explode walls type SHATTER;
		return (1);
	}
	explode body type SHATTER;
	explode walls type SHATTER;
	explode turret type SHATTER;
	explode sleeve type SHATTER;
	explode barrel type SHATTER;
	return (2);
}
