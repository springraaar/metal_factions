#define TA			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"

#define SPEEDUP_FACTOR	250

piece  torso, rfirept, lfirept, hips, rfoot, lfoot, launcher, lthigh,lpack,rpack, rthigh, rleg, lleg, ground, lbarrels, rbarrels, visor, t2, lcover1,lcover2,lcover3,rcover1,rcover2,rcover3;

static-var  gun_1, drumpos, isFiring, fireHeading, unitFireHeading, mATurnSpd1,mATurnSpd2,mATurnSpd3,mASpdFactor, mAMoveSpd1, mADelay1, legAngle1, legAngle2, legAngle3, bMoving, bAiming;

// Signal definitions
#define SIG_MOVE			2
#define SIG_AIM				4


MotionSpeedControl(maxSpeed,currentSpeed)
{
	maxSpeed = get MAX_SPEED;
	currentSpeed = 0;
	mASpdFactor = SPEEDUP_FACTOR;

	
	while(TRUE)
	{
		currentSpeed = get CURRENT_SPEED;
		mASpdFactor = SPEEDUP_FACTOR * currentSpeed / maxSpeed;

		//call-script lua_cobDebug(mASpdFactor);
		if ( mASpdFactor < 120 )
		{
			mASpdFactor = 120;
		}
		
		
		mAMoveSpd1 = [20.000000] * mASpdFactor / 100;
		mATurnSpd1 = <315.000000> * (100 + mASpdFactor) / 200;
		mATurnSpd2 = <200.000000> * (100 + mASpdFactor) / 200;
		mATurnSpd3 = <50.000000> * (100 + mASpdFactor) / 200;

		legAngle1 = <45.000000>;
		legAngle2 = <30.000000>;
		legAngle3 = <15.000000>;
		if ( mASpdFactor < 100 )
		{
			legAngle1 = legAngle1 * (100 + mASpdFactor) / 200;
			legAngle2 = legAngle2 * (100 + mASpdFactor) / 200;
			legAngle3 = legAngle3 * (100 + mASpdFactor) / 200;
		}
		mADelay1 = 50;

		if(!bMoving)
		{
			mADelay1 = 50;
		}
		if ( mASpdFactor >= 50 AND bMoving  )
		{
			mADelay1 = mADelay1 * 100 / mASpdFactor;
		}
	
		sleep 30;
	}
}

walk()
{
	var slowTurnSpd, slowTurnSpd2;

	slowTurnSpd = mATurnSpd2 / 4;
	slowTurnSpd2 = mATurnSpd2 / 6;
	
	
	// back contact point : right foot behind, left foot forward
	if( bMoving )
	{
		turn lthigh to x-axis <0.000000>-legAngle1 speed mATurnSpd1;
		turn lleg to x-axis legAngle2 speed mATurnSpd2;
		turn lfoot to x-axis legAngle3 speed mATurnSpd1;

		turn rthigh to x-axis legAngle2 speed mATurnSpd2;
		turn rleg to x-axis legAngle3 speed mATurnSpd2;
		turn rfoot to x-axis <0.000000>-legAngle2 speed mATurnSpd1;

		move hips to y-axis [-0.500000] speed mAMoveSpd1;
		move hips to z-axis [2.000000] speed mAMoveSpd1;
		turn hips to x-axis <4.000000> speed slowTurnSpd2;

		if(!bAiming)
		{
			// turn torso left, right arm forward
			turn torso to y-axis <5.000000> speed slowTurnSpd2;
		}
		
		wait-for-turn lthigh around x-axis;
		wait-for-turn rthigh around x-axis;
		wait-for-turn lleg around x-axis;
		wait-for-turn rleg around x-axis;
	}

	// passing pose 2 : right foot raising, left foot on the ground
	if( bMoving )
	{
		turn lthigh to x-axis <0.000000> speed mATurnSpd2;
		turn lleg to x-axis <0.000000> speed mATurnSpd2;
		turn lfoot to x-axis <10.000000> speed mATurnSpd3;

		turn rthigh to x-axis <60.000000> speed mATurnSpd1;
		turn rleg to x-axis <-60.000000> speed mATurnSpd1;
		turn rfoot to x-axis <10.000000> speed mATurnSpd1;

		if(!bAiming)
		{
			// restore position
			turn torso to y-axis <0.000000> speed slowTurnSpd2;
		}

		sleep mADelay1;
		move hips to y-axis [0.000000] speed mAMoveSpd1;
		move hips to z-axis [0.000000] speed mAMoveSpd1;
		turn hips to x-axis <0.000000> speed slowTurnSpd2;
		
		wait-for-turn lthigh around x-axis;
		wait-for-turn rthigh around x-axis;
		wait-for-turn lleg around x-axis;
		wait-for-turn rleg around x-axis;

	}
	
	// forward contact point : right foot forward, left foot behind
	if( bMoving )
	{
		turn lthigh to x-axis legAngle2 speed mATurnSpd2;
		turn lleg to x-axis legAngle3 speed mATurnSpd2;
		turn lfoot to x-axis <0>-legAngle2 speed mATurnSpd1;

		turn rthigh to x-axis <0>-legAngle1 speed mATurnSpd1;
		turn rleg to x-axis legAngle2 speed mATurnSpd2;
		turn rfoot to x-axis legAngle3 speed mATurnSpd1;
		
		move hips to y-axis [-0.500000] speed mAMoveSpd1;
		move hips to z-axis [2.000000] speed mAMoveSpd1;
		turn hips to x-axis <4.000000> speed slowTurnSpd2;
		
		if(!bAiming)
		{
			// turn torso right, left arm forward
			turn torso to y-axis <-10.000000> speed slowTurnSpd2;
		}

		sleep mADelay1;
		wait-for-turn lthigh around x-axis;
		wait-for-turn rthigh around x-axis;
		wait-for-turn lleg around x-axis;
		wait-for-turn rleg around x-axis;
	}

	// passing pose 1 : right foot on ground, left foot raising
	if( bMoving )
	{
		turn lthigh to x-axis <60.000000> speed mATurnSpd1;
		turn lleg to x-axis <-60.000000> speed mATurnSpd1;
		turn lfoot to x-axis <10.000000> speed mATurnSpd1;
		
		turn rthigh to x-axis <0.000000> speed mATurnSpd2;
		turn rleg to x-axis <0.000000> speed mATurnSpd2;
		turn rfoot to x-axis <10.000000> speed mATurnSpd3;

		
		if(!bAiming)
		{
			// restore position
			turn torso to y-axis <0.000000> speed slowTurnSpd2;
		}
		
		sleep mADelay1;
		move hips to y-axis [0.000000] speed mAMoveSpd1;
		move hips to z-axis [0.000000] speed mAMoveSpd1;
		turn hips to x-axis <0.000000> speed slowTurnSpd2;
		
		wait-for-turn lthigh around x-axis;
		wait-for-turn rthigh around x-axis;
		wait-for-turn lleg around x-axis;
		wait-for-turn rleg around x-axis;
	}
	
	return;
}




SmokeUnit(healthpercent, sleeptime, smoketype)
{
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 400;
	}
	while( TRUE )
	{
		healthpercent = get HEALTH;
		if( healthpercent < 66 )
		{
			smoketype = 256 | 2;
			if( Rand( 1, 66 ) < healthpercent )
			{
				smoketype = 256 | 1;
			}
			emit-sfx smoketype from torso;
		}
		sleeptime = healthpercent * 50;
		if( sleeptime < 200 )
		{
			sleeptime = 200;
		}
		sleep sleeptime;
	}
	return (0);
}


MotionControl(moving, aiming, justmoved)
{
	justmoved = TRUE;
	while( TRUE )
	{
		moving = bMoving;
		aiming = bAiming;
		if( moving )
		{
			call-script walk();
			justmoved = TRUE;
		}
		if( !moving )
		{
			if( justMoved )
			{
				move hips to y-axis [0.000000] speed [25.000000];
				turn hips to x-axis <0.000000> speed <20.000000>;
				turn rthigh to x-axis <0.000000> speed <200.000000>;
				turn rleg to x-axis <0.000000> speed <200.000000>;
				turn lthigh to x-axis <0.000000> speed <200.000000>;
				turn lleg to x-axis <0.000000> speed <200.000000>;
				turn rfoot to x-axis <0.000000> speed <200.000000>;
				turn lfoot to x-axis <0.000000> speed <200.000000>;

				if( !aiming )
				{
					turn torso to y-axis <0.000000> speed <200.000000>;
				}

				justMoved = FALSE;
			}
			sleep 100;
		}
	}
	return (0);
}

StartMoving()
{
	bMoving = TRUE;
	return (0);
}

StopMoving()
{
	bMoving = FALSE;
	return (0);
}


RestoreAfterDelay(setMask)
{
	if (setMask) {
		set-signal-mask SIG_AIM;
	}
	sleep DEFAULT_WEAPON_RESTORE_DELAY;
	turn torso to y-axis <0.000000> speed <90.000000>;
	turn launcher to x-axis <0.000000> speed <45.000000>;
	wait-for-turn torso around y-axis;
	wait-for-turn launcher around x-axis;
	bAiming = FALSE;
	return (0);
}
AimLock() 
{
	var heading;
	while(TRUE) {
		// override aim when firing to compensate for the body orientation if the unit turns
		if (isFiring) {
			heading = (get HEADING);
			if (heading != unitFireHeading) {
				turn torso to y-axis (fireHeading - heading + unitFireHeading) speed <360.000000>;
				start-script RestoreAfterDelay(TRUE);
			}
		}
		sleep 30;
	}
}

Create()
{
	gun_1 = [0];
	drumpos = [0];
	bMoving = FALSE;
	bAiming = FALSE;
	isFiring = FALSE;
	fireHeading = <999>;
	unitFireHeading = <999>;	
	start-script SmokeUnit();
	start-script MotionControl();
	start-script MotionSpeedControl();
	start-script AimLock();
	return (0);
}

SweetSpot(piecenum)
{
	piecenum = torso;
	return (0);
}

AimFromPrimary(piecenum)
{
	piecenum = torso;
	return (0);
}

QueryPrimary(piecenum)
{
	if( gun_1 == [0] )
	{
		piecenum = rfirept;
		return 0;
	}
	if( gun_1 == [1] )
	{
		piecenum = lfirept;
		return 0;
	}
	return (0);
}


AimPrimary(heading, pitch)
{
	signal SIG_AIM;
	set-signal-mask SIG_AIM;
	bAiming = TRUE;
	if (!isFiring) {
		turn torso to y-axis heading speed <90.000000>;
		turn launcher to x-axis <0.000000> - pitch speed <90.000000>;
		wait-for-turn torso around y-axis;
		wait-for-turn launcher around x-axis;
		fireHeading = heading;
	}
	
	start-script RestoreAfterDelay();
	return (1);
}


DrumRoll()
{
	if( drumpos == [0] )
	{
		sleep 50;
		drumpos = [1];
		sleep 100;
		turn lbarrels to z-axis <0.000000> speed <900.093407>;
		turn rbarrels to z-axis <0.000000> speed <900.093407>;
		return 0;
	}
	if( drumpos == [1] )
	{
		sleep 50;
		drumpos = [2];
		sleep 100;
		turn lbarrels to z-axis <120.000000> speed <900.093407>;
		turn rbarrels to z-axis <120.000000> speed <900.093407>;
		return 0;
	}
	if( drumpos == [2] )
	{
		sleep 50;
		drumpos = [0];
		sleep 100;
		turn lbarrels to z-axis <0.000000> - <120.027473> speed <900.093407>;
		turn rbarrels to z-axis <0.000000> - <120.027473> speed <900.093407>;
		return 0;
	}
	return 0;
}

Shot1()
{
	if( gun_1 == [0] )
	{
		emit-sfx 1024 + 0 from rfirept;
		gun_1 = [1];
		return (0);
	}
	if( gun_1 == [1] )
	{
		start-script DrumRoll();
		emit-sfx 1024 + 0 from lfirept;
		gun_1 = [0];
		return (0);
	}
}

FirePrimary()
{
	unitFireHeading = get HEADING;
	isFiring = TRUE;
	sleep 4000;
	isFiring = FALSE;
	return;
}

Killed(severity, corpsetype)
{
	if( severity <= 50 )
	{
		explode launcher type SHATTER | BITMAP2;
		explode lleg type SHATTER;
		explode rleg type SHATTER;
		explode torso type SHATTER;
		explode lpack type SHATTER | BITMAP2;
		explode rpack type SHATTER | BITMAP2;
		return (1);
	}
	explode ground type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
	explode launcher type SHATTER | EXPLODE_ON_HIT | BITMAP2;
	explode lfirept type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
	explode lfoot type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP4;
	explode lleg type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP5;
	explode lthigh type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
	explode hips type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
	explode rfirept type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
	explode rfoot type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP4;
	explode rleg type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP5;
	explode rthigh type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
	explode torso type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
	explode lpack type SHATTER | BITMAP2;
	explode rpack type SHATTER | BITMAP2;
	return (2);
}
