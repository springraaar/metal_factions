#define TA			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"

#define SPEEDUP_FACTOR 100

#define HEADING_TOLERANCE	<25>
#define PITCH_TOLERANCE		<15>

piece  ground, hips, lbackleg,bleg,rbackleg,bleg2,rfrontleg,bleg3,lfrontleg,bleg4, body, turret, sleeve, barrel1, flare1, barrel2, flare2, cover, b2, legsup1, legsup2, legsup3, legsup4, lcover1, lcover2, lcover3, lcover4;

static-var  bMoving, gun_1, mASpdFactor;

#include "aimhelper1.h"

// Signal definitions
#define SIG_MOVE			2
#define SIG_AIM				4


MotionSpeedControl(minSpeed, maxSpeed,currentSpeed)
{
	maxSpeed = get MAX_SPEED;
	currentSpeed = 0;
	mASpdFactor = SPEEDUP_FACTOR;
	minSpeed = 3 * SPEEDUP_FACTOR / 4;
	
	while(TRUE)
	{
		currentSpeed = get CURRENT_SPEED;
		mASpdFactor = SPEEDUP_FACTOR * currentSpeed / maxSpeed;

		if ( mASpdFactor < minSpeed )
		{
			mASpdFactor = minSpeed;
		}

		sleep 60;
	}
}

walk()
{
	if( bMoving )
	{
		
		turn hips to x-axis <1.000000> speed <10.000000> * mASpdFactor / 100;

		turn lfrontleg to y-axis <20.000000> speed <100.967033> * mASpdFactor / 100;
		turn lfrontleg to z-axis <5.016484> speed <550.104396> * mASpdFactor / 100;

		turn lbackleg to y-axis <-0.000000> speed <300.038462> * mASpdFactor / 100;
		turn lbackleg to z-axis <-15.016484> speed <60.104396> * mASpdFactor / 100;

		
		turn rfrontleg to y-axis <40.412088> speed <300.060440> * mASpdFactor / 100;
		turn rfrontleg to z-axis <15.016484> speed <60.104396> * mASpdFactor / 100;
		
		turn rbackleg to y-axis <-40.093407> speed <100.368132> * mASpdFactor / 100;
		turn rbackleg to z-axis <-5.016484> speed <550.104396> * mASpdFactor / 100;
		
		sleep 200 * 100 / mASpdFactor;
	}

	// only vertical
	if( bMoving )
	{
		turn hips to x-axis <-1.000000> speed <10.000000> * mASpdFactor / 100;

		turn lbackleg to z-axis <5.016484> speed <150.104396> * mASpdFactor / 100;
		turn rfrontleg to z-axis <-5.016484> speed <150.104396> * mASpdFactor / 100;
		
		sleep 200 * 100 / mASpdFactor;
	}
	
	
	if( bMoving )
	{
		turn hips to x-axis <1.000000> speed <10.000000> * mASpdFactor / 100;

		turn lfrontleg to y-axis <-40.000000> speed <300.967033> * mASpdFactor / 100;
		turn lfrontleg to z-axis <-15.016484> speed <60.104396> * mASpdFactor / 100;

		turn lbackleg to y-axis <40.000000> speed <100.038462> * mASpdFactor / 100;
		turn lbackleg to z-axis <5.016484> speed <550.104396> * mASpdFactor / 100;

		turn rfrontleg to y-axis <-20.412088> speed <100.060440> * mASpdFactor / 100;
		turn rfrontleg to z-axis <-5.016484> speed <550.104396> * mASpdFactor / 100;
		
		turn rbackleg to y-axis <00.093407> speed <300.368132> * mASpdFactor / 100;
		turn rbackleg to z-axis <15.016484> speed <60.104396> * mASpdFactor / 100;
		
		
		sleep 200 * 100 / mASpdFactor;
	}
	
	// only vertical
	if( bMoving )
	{
		turn hips to x-axis <-1.000000> speed <10.000000> * mASpdFactor / 100;
		turn lfrontleg to z-axis <5.016484> speed <150.104396> * mASpdFactor / 100;
		turn rbackleg to z-axis <-5.016484> speed <150.104396> * mASpdFactor / 100;
		
		
		sleep 200 * 100 / mASpdFactor;
	}
	
}




MotionControl(moving, aiming, justmoved)
{
	justmoved = TRUE;
	while( TRUE )
	{
		moving = bMoving;
		
		if( moving )
		{
			justmoved = TRUE;
			call-script walk();
		}
		if( !moving )
		{
			if( justmoved )
			{
				turn lbackleg to x-axis <0.000000> speed <360.000000>;
				turn rbackleg to x-axis <0.000000> speed <360.000000>;
				turn rfrontleg to x-axis <0.000000> speed <360.000000>;
				turn lfrontleg to x-axis <0.000000> speed <360.000000>;
				turn lbackleg to y-axis <45.000000> speed <360.000000>;
				turn rbackleg to y-axis <-45.000000> speed <360.000000>;
				turn rfrontleg to y-axis <45.000000> speed <360.000000>;
				turn lfrontleg to y-axis <-45.000000> speed <360.000000>;
			
				turn lbackleg to z-axis <0.000000> speed <360.000000>;
				turn rbackleg to z-axis <0.000000> speed <360.000000>;
				turn rfrontleg to z-axis <0.000000> speed <360.000000>;
				turn lfrontleg to z-axis <0.000000> speed <360.000000>;
				turn hips to z-axis <0.000000> speed <260.000000>;
				turn hips to x-axis <0.000000> speed <360.000000>;
	
				move hips to x-axis [0.000000] speed [3.000000];
				move hips to z-axis [0.000000] speed [3.000000];

				turn bleg2 to z-axis <0.000000> speed <160.000000>;
				turn bleg4 to z-axis <0.000000> speed <160.000000>;
				turn bleg3 to z-axis <0.000000> speed <160.000000>;
				turn bleg to z-axis <0.000000> speed <160.000000>;

				justmoved = FALSE;
			}
			sleep 100;
		}
	}
	return (0);
}



SmokeUnit(healthpercent, sleeptime, smoketype)
{
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 400;
	}
	while( TRUE )
	{
		healthpercent = get HEALTH;
		if( healthpercent < 66 )
		{
			smoketype = 256 | 2;
			if( Rand( 1, 66 ) < healthpercent )
			{
				smoketype = 256 | 1;
			}
			emit-sfx smoketype from turret;
		}
		sleeptime = healthpercent * 50;
		if( sleeptime < 200 )
		{
			sleeptime = 200;
		}
		sleep sleeptime;
	}
	return (0);
}

StartMoving()
{
	bMoving = TRUE;
	return (0);
}

StopMoving()
{
	bMoving = FALSE;
	return (0);
}

RestoreAfterDelay()
{
	sleep DEFAULT_WEAPON_RESTORE_DELAY;
	call-script stopAimHelper1(<100>,<100>);
	turn turret to y-axis <0.000000> speed <100.000000>;
	turn sleeve to x-axis <0.000000> speed <100.000000>;
}

Create()
{
	bMoving = FALSE;
	gun_1 = [0];
	call-script stopAimHelper1(<1000>,<1000>);
	start-script MotionSpeedControl();
	start-script MotionControl();
	start-script SmokeUnit();
	return (0);
}

SweetSpot(piecenum)
{
	piecenum = body;
	return (0);
}

AimFromPrimary(piecenum)
{
	piecenum = turret;
	return (0);
}

QueryPrimary(piecenum)
{
	if( gun_1 == [0])
	{
		piecenum = flare1;
	}
	if( gun_1 == [1])
	{
		piecenum = flare2;
	}
	
	return (0);
}


AimPrimary(heading, pitch)
{
	call-script updateAimHelper1(heading,pitch,<150>,<150>,HEADING_TOLERANCE,PITCH_TOLERANCE);
	signal SIG_AIM;
	set-signal-mask SIG_AIM;

	turn turret to y-axis heading speed <150.000000>;
	turn sleeve to x-axis <0.000000> - pitch speed <150.000000>;
	if (!aimReady1)
	{
		wait-for-turn turret around y-axis;
		wait-for-turn sleeve around x-axis;
	}

	start-script RestoreAfterDelay();
	return (1);
}

FireWeapon1()
{
	if( gun_1 == [0])
	{
		emit-sfx 1024 from flare1;
		sleep 100;
		gun_1 = [1];
		return (0);
	}
	if( gun_1 == [1])
	{
		emit-sfx 1024 from flare2;
		sleep 100;
		gun_1 = [0];
		return (0);
	}	
}

Killed(severity, corpsetype)
{
	if( severity <= 50 )
	{
		explode cover type SHATTER | BITMAP2;
		explode legsup1 type SHATTER | BITMAP2;
		explode legsup2 type SHATTER | BITMAP2;
		explode legsup3 type SHATTER | BITMAP2;
		explode legsup4 type SHATTER | BITMAP2;
		return (1);
	}
	explode body type SHATTER | BITMAP2;
	explode turret type SHATTER | BITMAP2;
	explode b2 type SHATTER | BITMAP2;	
	explode cover type SHATTER | BITMAP2;
	explode legsup1 type SHATTER | BITMAP2;
	explode legsup2 type SHATTER | BITMAP2;
	explode legsup3 type SHATTER | BITMAP2;
	explode legsup4 type SHATTER | BITMAP2;
	explode lbackleg type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP5;
	explode rbackleg type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP5;
	explode rfrontleg type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP5;
	explode lfrontleg type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP5;
	return (2);
}
