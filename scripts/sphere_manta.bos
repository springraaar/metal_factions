#define TA			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"

piece  base, hull,hull2,bombpt,c1,c2,jet,jp1;

static-var   Static_Var_2, statechg_DesiredState, statechg_StateChanging,canaim;


SmokeUnit(healthpercent, sleeptime, smoketype)
{
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 400;
	}
	while( TRUE )
	{
		healthpercent = get HEALTH;
		if( healthpercent < 66 )
		{
			smoketype = 256 | 2;
			if( Rand( 1, 66 ) < healthpercent )
			{
				smoketype = 256 | 1;
			}
			emit-sfx smoketype from base;
		}
		sleeptime = healthpercent * 50;
		if( sleeptime < 200 )
		{
			sleeptime = 200;
		}
		sleep sleeptime;
	}
	return (0);
	// Build by COBBLER Ver4.0 Copyright @1998 DIGITAL CONCEPT SOFTWARE (MANU@inext.fr) / http://www.annihilationcenter.com/DCS/  
}

Takeoff()
{
	Static_Var_2 = 1;
}

Landing()
{
	
	Static_Var_2 = 0;
}

InitState()
{
	statechg_DesiredState = TRUE;
	statechg_StateChanging = FALSE;
}

RequestState(requestedstate, currentstate)
{
	if( statechg_StateChanging )
	{
		statechg_DesiredState = requestedstate;
		return (0);
	}
	statechg_StateChanging = TRUE;
	currentstate = statechg_DesiredState;
	statechg_DesiredState = requestedstate;
	while( statechg_DesiredState != currentstate )
	{
		if( statechg_DesiredState == 0 )
		{
			start-script Takeoff();
			currentstate = 0;
		}
		if( statechg_DesiredState == 1 )
		{
			start-script Landing();
			currentstate = 1;
		}
	}
	statechg_StateChanging = FALSE;
}



Create()
{
	Static_Var_2 = 0;
	turn bombpt to x-axis <90.000000> now;
	call-script InitState();
	start-script SmokeUnit();
}

Activate()
{
	start-script RequestState(0);
}

Deactivate()
{
	start-script RequestState(1);
}

SweetSpot(piecenum)
{
	piecenum = base;
}


QueryPrimary(piecenum)
{
		piecenum = bombpt;
}

AimFromPrimary(piecenum)
{
		piecenum = bombpt;
}

AimPrimary(heading,pitch)
{
	return (1);
}

Killed(severity, corpsetype)
{
	if( severity <= 25 )
	{
		corpsetype = 1;
		explode base type BITMAPONLY | BITMAP1;
		explode c1 type BITMAPONLY | BITMAP1;
		explode c2 type BITMAPONLY | BITMAP2;
		explode hull type BITMAPONLY | BITMAP3;
		explode hull type SHATTER;
		explode hull2 type SHATTER;
		return (0);
	}
	if( severity <= 50 )
	{
		corpsetype = 2;
		explode base type BITMAPONLY | BITMAP1;
		explode c1 type FALL | BITMAP1;
		explode c2 type FALL | BITMAP2;
		explode hull type BITMAPONLY | BITMAP3;
		explode hull type SHATTER;
		explode hull2 type SHATTER;
		return (0);
	}
	if( severity <= 99 )
	{
		corpsetype = 3;
		explode base type BITMAPONLY | BITMAP1;
		explode c1 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
		explode c2 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
		explode hull type BITMAPONLY | BITMAP3;
		explode hull type SHATTER;
		explode hull2 type SHATTER;
		return (0);
	}
	corpsetype = 3;
	explode base type BITMAPONLY | BITMAP1;
	explode c1 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
	explode c2 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
	explode hull type BITMAPONLY | BITMAP3;
	explode hull type SHATTER;
	explode hull2 type SHATTER;
}