#define TA			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"

#define SPEEDUP_FACTOR 180

#define HEADING_TOLERANCE	<25>
#define PITCH_TOLERANCE		<15>

piece  torso, ruparm, luparm, rgun,rg,lgun, flare, pelvis, rleg, rfoot,lleg, lfoot, head, visor,lthigh, rthigh, ground;

static-var  bMoving, bAiming, mASpdFactor, moveSpd1, turnSpd1, turnSpd2, turnSpd3;

#include "aimhelper1.h"

// Signal definitions
#define SIG_AIM				4


MotionSpeedControl(maxSpeed,currentSpeed)
{
	maxSpeed = get MAX_SPEED;
	currentSpeed = 0;
	mASpdFactor = SPEEDUP_FACTOR;
	
	while(TRUE)
	{
		currentSpeed = get CURRENT_SPEED;
		mASpdFactor = SPEEDUP_FACTOR * currentSpeed / maxSpeed;

		//call-script lua_cobDebug(mASpdFactor);
		if ( mASpdFactor < SPEEDUP_FACTOR/2 )
		{
			mASpdFactor = SPEEDUP_FACTOR/2;
		}
		
		
		moveSpd1 = [20.000000] * mASpdFactor / 100;
		turnSpd1 = <300.000000> * (100 + mASpdFactor) / 200;
		turnSpd2 = <150.000000> * (100 + mASpdFactor) / 200;
		turnSpd3 = <30.000000> * (100 + mASpdFactor) / 200;

		sleep 60;
	}
}

RockUnit(anglex, anglez)
{
	anglex = anglex;
	anglez = anglez;
	turn pelvis to x-axis anglex speed <50.005495>;
	turn pelvis to z-axis <0>-anglez speed <50.005495>;
	wait-for-turn pelvis around z-axis;
	wait-for-turn pelvis around x-axis;
	turn pelvis to z-axis <0.000000> speed <20.000000>;
	turn pelvis to x-axis <0.000000> speed <20.000000>;
}

walk()
{
	// start left forward, right back
	if( bMoving)
	{
		move pelvis to y-axis [-0.2] speed moveSpd1;
		turn pelvis to x-axis <1.000000> speed turnSpd3;
		
		turn lthigh to x-axis <-20.0> speed turnSpd2;
		turn lleg to x-axis <7.0> speed turnSpd1;
		turn lfoot to x-axis <3.0> speed turnSpd3;

		turn rthigh to x-axis <20.0> speed turnSpd2;
		turn rleg to x-axis <-7.0> speed turnSpd2;
		turn rfoot to x-axis <-3.0> speed turnSpd3;
		
		if (!bAiming) {
			turn luparm to x-axis <10> speed turnSpd3;
		}
		sleep 190 * 100 / mASpdFactor;
	}
	if( bMoving)
	{
		move pelvis to y-axis [-0.4] speed moveSpd1;
		turn pelvis to x-axis <3.000000> speed turnSpd3;
		
		turn lthigh to x-axis <-50.0> speed turnSpd2 * 2.5;
		turn lleg to x-axis <10.0> speed turnSpd1 * 1.5;
		turn lfoot to x-axis <7.0> speed turnSpd3;
		
		turn rthigh to x-axis <30.0> speed turnSpd2;
		turn rleg to x-axis <-10.0> speed turnSpd2;
		turn rfoot to x-axis <-7.0> speed turnSpd3;

		if (!bAiming) {
			turn luparm to x-axis <20> speed turnSpd3;
		}
		sleep 190 * 100 / mASpdFactor;
	}
	// finish left forward, right back
	if( bMoving)
	{
		move pelvis to y-axis [-0.6] speed moveSpd1;
		turn pelvis to x-axis <10.000000> speed turnSpd3;
		
		turn lthigh to x-axis <-40.0> speed turnSpd2;
		turn lleg to x-axis <20.0> speed turnSpd1;
		turn lfoot to x-axis <10.0> speed turnSpd1;
		
		turn rthigh to x-axis <30.0> speed turnSpd2;
		turn rleg to x-axis <-20.0> speed turnSpd2;
		turn rfoot to x-axis <-10.0> speed turnSpd3;

		if (!bAiming) {
			turn luparm to x-axis <25> speed turnSpd3;
		}
		sleep 190 * 100 / mASpdFactor;
	}
	// start left back, right forward
	if( bMoving)
	{
		move pelvis to y-axis [-0.2] speed moveSpd1;
		turn pelvis to x-axis <1.000000> speed turnSpd3;

		turn lthigh to x-axis <20.0> speed turnSpd2;
		turn lleg to x-axis <-7.0> speed turnSpd2;
		turn lfoot to x-axis <-3.0> speed turnSpd3;

		turn rthigh to x-axis <-20.0> speed turnSpd2;
		turn rleg to x-axis <7.0> speed turnSpd1;
		turn rfoot to x-axis <3.0> speed turnSpd3;
		
		if (!bAiming) {
			turn luparm to x-axis <0> speed turnSpd3;
		}
		sleep 190 * 100 / mASpdFactor;
	}
	if( bMoving)
	{
		move pelvis to y-axis [-0.4] speed moveSpd1;
		turn pelvis to x-axis <3.000000> speed turnSpd3;
		
		turn lthigh to x-axis <30.0> speed turnSpd2;
		turn lleg to x-axis <-10.0> speed turnSpd2;
		turn lfoot to x-axis <-7.0> speed turnSpd3;

		turn rthigh to x-axis <-50.0> speed turnSpd2 * 2.5;
		turn rleg to x-axis <10.0> speed turnSpd1 * 1.5;
		turn rfoot to x-axis <7.0> speed turnSpd3;
		
		if (!bAiming) {
			turn luparm to x-axis <-5> speed turnSpd3;
		}
		sleep 190 * 100 / mASpdFactor;
	}
	// finish left back, right forward
	if( bMoving)
	{
		move pelvis to y-axis [-0.6] speed moveSpd1;
		turn pelvis to x-axis <10.000000> speed turnSpd3;
		
		turn lthigh to x-axis <30.0> speed turnSpd2;
		turn lleg to x-axis <-20.0> speed turnSpd2;
		turn lfoot to x-axis <-10.0> speed turnSpd3;
		
		turn rthigh to x-axis <-40.0> speed turnSpd2;
		turn rleg to x-axis <20.0> speed turnSpd1;
		turn rfoot to x-axis <10.0> speed turnSpd1;

		if (!bAiming) {
			turn luparm to x-axis <-10> speed turnSpd3;
		}
		sleep 190 * 100 / mASpdFactor;
	}
	
	return;
}

SmokeUnit(healthpercent, sleeptime, smoketype)
{
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 400;
	}
	while( TRUE )
	{
		healthpercent = get HEALTH;
		if( healthpercent < 66 )
		{
			smoketype = 256 | 2;
			if( Rand( 1, 66 ) < healthpercent )
			{
				smoketype = 256 | 1;
			}
			emit-sfx smoketype from torso;
		}
		sleeptime = healthpercent * 50;
		if( sleeptime < 200 )
		{
			sleeptime = 200;
		}
		sleep sleeptime;
	}
}

MotionControl(moving, aiming, justmoved)
{
	justmoved = TRUE;
	while( TRUE )
	{
		moving = bMoving;
		aiming = bAiming;
		if( moving )
		{
			call-script walk();
			justmoved = TRUE;
		}
		if( !moving )
		{
			if( justmoved )
			{
				turn torso to x-axis <0.000000> speed <100.038462>;
				move pelvis to y-axis [0.000000] speed [7.000000];
				turn pelvis to x-axis <0> speed <200>;
				turn rthigh to x-axis <0.000000> speed <200.038462>;
				turn rleg to x-axis <0.000000> speed <200.038462>;
				turn rfoot to x-axis <0.000000> speed <200.038462>;
				turn lthigh to x-axis <0.000000> speed <200.038462>;
				turn lleg to x-axis <0.000000> speed <200.038462>;
				turn lfoot to x-axis <0.000000> speed <200.038462>;
				if( !aiming )
				{
					turn torso to y-axis <0.000000> speed <90.016484>;
					turn ruparm to x-axis <0.000000> speed <200.038462>;
					turn luparm to x-axis <0.000000> speed <200.038462>;
				}
				justmoved = FALSE;
			}
			sleep 100;
		}
	}
}

Create()
{
	bMoving = FALSE;
	bAiming = FALSE;
	turn lgun to x-axis <40> now;
	call-script stopAimHelper1(<1000>,<1000>);
	start-script MotionSpeedControl();
	start-script MotionControl();
	start-script SmokeUnit();
}

StartMoving()
{
	bMoving = TRUE;
}

StopMoving()
{
	bMoving = FALSE;
}

RestoreAfterDelay()
{
	sleep DEFAULT_WEAPON_RESTORE_DELAY;
	call-script stopAimHelper1(<90>,<90>);
	turn torso to y-axis <0.000000> speed <90.016484>;
	turn ruparm to x-axis <0.000000> speed <95.005495>;
	turn luparm to x-axis <0.000000> speed <95.005495>;
	wait-for-turn torso around y-axis;
	wait-for-turn ruparm around x-axis;
	wait-for-turn luparm around x-axis;
	bAiming = FALSE;
}

AimFromPrimary(piecenum)
{
	piecenum = torso;
}

QueryPrimary(piecenum)
{
	piecenum = flare;
	return(0);
}

AimPrimary(heading, pitch)
{
	call-script updateAimHelper1(heading,pitch,<200>,<200>,HEADING_TOLERANCE,PITCH_TOLERANCE);
	signal SIG_AIM;
	set-signal-mask SIG_AIM;
	bAiming = TRUE;

	turn torso to y-axis heading speed <200.016484>;
	turn ruparm to x-axis <0.000000> - pitch speed <200.005495>;
	if (!aimReady1)
	{
		wait-for-turn torso around y-axis;
		wait-for-turn ruparm around x-axis;
	}
	start-script RestoreAfterDelay();
	return (1);
}

FirePrimary()
{
	move rg to z-axis [-2] now;
	move pelvis to z-axis [-0.3] now;
	emit-sfx 1024 from flare;
	sleep 50;
	move pelvis to z-axis [0] speed [10];

	sleep 150;
	move rg to z-axis [0] speed [10];
	return (0);
}

Killed(severity, corpsetype)
{
	if( severity <= 50 )
	{
		explode head type SHATTER;
		explode luparm type SHATTER;
		explode ruparm type SHATTER;
		return (1);
	}
	explode head type SHATTER;
	explode luparm type SHATTER;
	explode ruparm type SHATTER;
	explode lthigh type SHATTER;
	explode rthigh type SHATTER;
	return (2);
}
