#define TA			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"

#define SPEEDUP_FACTOR 180

#define HEADING_TOLERANCE	<25>
#define PITCH_TOLERANCE		<15>

piece  groundx2, hips, h2, wheel, torso,tl,tr,sleeve, barrel, flare;

static-var  bMoving, bAiming;

#include "aimhelper1.h"

// Signal definitions
#define SIG_AIM				2



walk()
{
	turn hips to x-axis <5.000000> speed <10.000000>;
	spin wheel around x-axis speed <200.000000> accelerate <10.000000>;
	sleep 100;
	return (0);
}

walklegs()
{
	turn hips to x-axis <0.000000> speed <20.000000>;
	spin wheel around x-axis speed <200.000000> accelerate <10.000000>;
	sleep 100;
	return (0);
}

SmokeUnit(healthpercent, sleeptime, smoketype)
{
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 400;
	}
	while( TRUE )
	{
		healthpercent = get HEALTH;
		if( healthpercent < 66 )
		{
			smoketype = 256 | 2;
			if( Rand( 1, 66 ) < healthpercent )
			{
				smoketype = 256 | 1;
			}
			emit-sfx smoketype from torso;
		}
		sleeptime = healthpercent * 50;
		if( sleeptime < 200 )
		{
			sleeptime = 200;
		}
		sleep sleeptime;
	}
}

MotionControl(moving, aiming, justmoved)
{
	while( TRUE )
	{
		justmoved = TRUE;
		while( TRUE )
		{
			moving = bMoving;
			aiming = bAiming;
			if( moving )
			{
				if( aiming )
				{
					call-script walklegs();
				}
				if( !aiming )
				{
					call-script walk();
				}
				justmoved = TRUE;
			}
			if( !moving )
			{
				if( justmoved )
				{
					turn hips to x-axis <0.000000> speed <20.000000>;
					stop-spin wheel around x-axis decelerate <50.000000>;
					if( !aiming )
					{
						turn torso to y-axis <0.000000> speed <90.016484>;
						turn sleeve to x-axis <0.000000> speed <200.038462>;
					}
					justmoved = FALSE;
				}
				sleep 100;
			}
		}
	}
}

Create()
{
	
	bMoving = FALSE;
	bAiming = FALSE;
	call-script stopAimHelper1(<1000>,<1000>);
	start-script MotionControl();
	start-script SmokeUnit();
}

StartMoving()
{
	bMoving = TRUE;
}

StopMoving()
{
	bMoving = FALSE;
}

RestoreAfterDelay()
{
	sleep DEFAULT_WEAPON_RESTORE_DELAY;
	call-script stopAimHelper1(<180>,<180>);
	turn torso to y-axis <0.000000> speed <180.016484>;
	turn sleeve to x-axis <0.000000> speed <180.005495>;
	bAiming = FALSE;
}


AimPrimary(heading, pitch)
{
	call-script updateAimHelper1(heading,pitch,<150>,<150>,HEADING_TOLERANCE,PITCH_TOLERANCE);
	signal SIG_AIM;
	set-signal-mask SIG_AIM;
	bAiming = TRUE;
	turn torso to y-axis heading speed <150.027473>;
	turn sleeve to x-axis <0.000000> - pitch speed <150.038462>;
	if (!aimReady1)
	{
		wait-for-turn torso around y-axis;
		wait-for-turn sleeve around x-axis;
	}
	start-script RestoreAfterDelay();
	return (1);
}


FirePrimary()
{
	emit-sfx 1024 + 0 from flare;
	return 0;
}

QueryPrimary(piecenum)
{
	piecenum = flare;
}

AimFromPrimary(piecenum)
{
	piecenum = torso;
}

SweetSpot(piecenum)
{
	piecenum = torso;
}

Killed(severity, corpsetype)
{
	if( severity <= 50 )
	{
		explode tl type BITMAPONLY | BITMAP2;
	
		explode h2 type BITMAPONLY | BITMAP2;
		explode tr type BITMAPONLY | BITMAP4;
	
		explode sleeve type BITMAPONLY | BITMAP4;
		explode torso type BITMAPONLY | BITMAP5;
		return (1);
	}
	explode tl type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;

	explode barrel type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
	explode tr type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP4;

	explode sleeve type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP4;
	explode torso type SHATTER | EXPLODE_ON_HIT | BITMAP5;
	return (2);
}
