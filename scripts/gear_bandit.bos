#define TA			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"

#define HEADING_TOLERANCE	<30>
#define PITCH_TOLERANCE		<20>

#define SPEEDUP_FACTOR 130

piece  torso, flare, Hip, RLLeg, LLLeg, LULeg, RULeg, LUArm,
       RUArm, RLArm, LLArm, larm, rarm, Head, visor, lgun;

static-var  bMoving, bAiming, mASpdFactor;

#include "aimhelper1.h"


// Signal definitions
#define SIG_AIM				2


MotionSpeedControl(minSpeed, maxSpeed,currentSpeed)
{
	maxSpeed = get MAX_SPEED;
	currentSpeed = 0;
	mASpdFactor = SPEEDUP_FACTOR;
	minSpeed = 3 * SPEEDUP_FACTOR / 4;
	
	while(TRUE)
	{
		currentSpeed = get CURRENT_SPEED;
		mASpdFactor = SPEEDUP_FACTOR * currentSpeed / maxSpeed;

		if ( mASpdFactor < minSpeed )
		{
			mASpdFactor = minSpeed;
		}

		sleep 60;
	}
}

walk()
{
	if( bMoving ) 
	{
		move Hip to y-axis [-0.625000] speed [15]* mASpdFactor / 100;
		move Hip to z-axis [-1.500000] speed [25]* mASpdFactor / 100;
		
		turn Hip to x-axis <10.901099> speed <60> * mASpdFactor / 100;
		turn LULeg to x-axis <-43.945055> speed <360> * mASpdFactor / 100;
		turn RULeg to x-axis <4.214286> speed <360> * mASpdFactor / 100;
		turn RLLeg to x-axis <19.335165> speed <360> * mASpdFactor / 100;
		turn LLLeg to x-axis <43.604396> speed <360> * mASpdFactor / 100;
		
		if( !bAiming )
		{
			turn torso to x-axis <5.269231> speed <60> * mASpdFactor / 100;
			turn LUArm to x-axis <-17.225275> speed <160> * mASpdFactor / 100;
			turn RUArm to x-axis <-9.846154> speed <160> * mASpdFactor / 100;
			turn RLArm to x-axis <-9.137363> speed <360> * mASpdFactor / 100;
			turn LLArm to x-axis <-36.571429> speed <360> * mASpdFactor / 100;
		}
		
		wait-for-turn LULeg around x-axis;
		wait-for-turn RULeg around x-axis;
		wait-for-turn LLLeg around x-axis;
		wait-for-turn RLLeg around x-axis;		
	}
	if( bMoving )
	{
		move Hip to y-axis [0.625000] speed [15]* mASpdFactor / 100;
		move Hip to z-axis [-0.500000] speed [15]* mASpdFactor / 100;
		
		turn LULeg to x-axis <-76.302198>  speed <360> * mASpdFactor / 100;
		turn RULeg to x-axis <18.989011>  speed <360> * mASpdFactor / 100;
		turn RLLeg to x-axis <25.313187>  speed <360> * mASpdFactor / 100;
		turn LLLeg to x-axis <37.269231>  speed <360> * mASpdFactor / 100;
		
		if (!bAiming)
		{
			turn torso to x-axis <-2.637363>  speed <60> * mASpdFactor / 100;
			turn LUArm to x-axis <10.890110>  speed <160> * mASpdFactor / 100;
			turn RUArm to x-axis <-14.934066>  speed <160> * mASpdFactor / 100;
			turn RLArm to x-axis <-29.005495>  speed <360> * mASpdFactor / 100;
			turn LLArm to x-axis <-12.824176>  speed <360> * mASpdFactor / 100;
		}
		wait-for-turn LULeg around x-axis;
		wait-for-turn RULeg around x-axis;
		wait-for-turn LLLeg around x-axis;
		wait-for-turn RLLeg around x-axis;
	}
	if( TRUE )
	{
		move Hip to y-axis [-2.374985] speed [15]* mASpdFactor / 100;
		move Hip to z-axis [6.000000] speed [25]* mASpdFactor / 100;
		
		turn LULeg to x-axis <-32.346154>  speed <360> * mASpdFactor / 100;
		turn RULeg to x-axis <-1.758242>  speed <360> * mASpdFactor / 100;
		turn RLLeg to x-axis <73.137363>  speed <360> * mASpdFactor / 100;
		turn LLLeg to x-axis <21.445055>  speed <360> * mASpdFactor / 100;

		if (!bAiming)
		{
			turn torso to x-axis <5.269231>  speed <60> * mASpdFactor / 100;
			turn LUArm to x-axis <50.637363>  speed <160> * mASpdFactor / 100;
			turn RLArm to x-axis <-78.060440>  speed <360> * mASpdFactor / 100;
			turn LLArm to x-axis <-18.280220>  speed <360> * mASpdFactor / 100;
		}
		wait-for-turn LULeg around x-axis;
		wait-for-turn RULeg around x-axis;
		wait-for-turn LLLeg around x-axis;
		wait-for-turn RLLeg around x-axis;
	}

	if( bMoving )
	{
		move Hip to y-axis [-0.625000] speed [15]* mASpdFactor / 100;
		move Hip to z-axis [-1.500000] speed [25]* mASpdFactor / 100;

		turn Hip to x-axis <10.901099>  speed <60> * mASpdFactor / 100;
		turn LULeg to x-axis <4.214286>  speed <360> * mASpdFactor / 100;
		turn RULeg to x-axis <-43.956044>  speed <360> * mASpdFactor / 100;
		turn LLLeg to x-axis <19.335165>  speed <360> * mASpdFactor / 100;
		if (!bAiming)
		{
			turn torso to x-axis <5.269231>  speed <60> * mASpdFactor / 100;
			turn LUArm to x-axis <-1.401099>  speed <160> * mASpdFactor / 100;
			turn RUArm to x-axis <-8.791209>  speed <160> * mASpdFactor / 100;
			turn RLArm to x-axis <-33.758242>  speed <360> * mASpdFactor / 100;
			turn LLArm to x-axis <-10.549451>  speed <360> * mASpdFactor / 100;
		}
		wait-for-turn LULeg around x-axis;
		wait-for-turn RULeg around x-axis;
		wait-for-turn LLLeg around x-axis;
		wait-for-turn RLLeg around x-axis;		
	}

	if( bMoving )
	{
		move Hip to y-axis [1.250000] speed [15]* mASpdFactor / 100;
		move Hip to z-axis [0.000000] speed [15]* mASpdFactor / 100;
		
		turn LULeg to x-axis <20.038462>  speed <360> * mASpdFactor / 100;
		turn RULeg to x-axis <-81.923077>  speed <360> * mASpdFactor / 100;
		turn RLLeg to x-axis <30.945055>  speed <360> * mASpdFactor / 100;
		turn LLLeg to x-axis <27.780220>  speed <360> * mASpdFactor / 100;
		if (!bAiming)
		{
			turn torso to x-axis <-5.269231>  speed <60> * mASpdFactor / 100;
			turn LUArm to x-axis <-16.879121>  speed <160> * mASpdFactor / 100;
			turn RUArm to x-axis <15.824176>  speed <160> * mASpdFactor / 100;
			turn RLArm to x-axis <-12.302198>  speed <360> * mASpdFactor / 100;
			turn LLArm to x-axis <-25.313187>  speed <360> * mASpdFactor / 100;
		}
		wait-for-turn LULeg around x-axis;
		wait-for-turn RULeg around x-axis;
		wait-for-turn LLLeg around x-axis;
		wait-for-turn RLLeg around x-axis;		
	}

	if( TRUE )
	{
		move Hip to y-axis [-2.374985] speed [15]* mASpdFactor / 100;
		move Hip to z-axis [6.000000] speed [25]* mASpdFactor / 100;
		
		turn LULeg to x-axis <-1.747253>  speed <360> * mASpdFactor / 100;
		turn RULeg to x-axis <-32.346154>  speed <360> * mASpdFactor / 100;
		turn RLLeg to x-axis <21.445055>  speed <360> * mASpdFactor / 100;
		turn LLLeg to x-axis <73.137363>  speed <360> * mASpdFactor / 100;
		if (!bAiming)
		{
			turn torso to x-axis <5.269231>  speed <60> * mASpdFactor / 100;
			turn LUArm to x-axis <-27.423077>  speed <160> * mASpdFactor / 100;
			turn RUArm to x-axis <48.170330>  speed <160> * mASpdFactor / 100;
			turn RLArm to x-axis <-18.989011>  speed <360> * mASpdFactor / 100;
			turn LLArm to x-axis <-79.813187>  speed <360> * mASpdFactor / 100;
		}
		wait-for-turn LULeg around x-axis;
		wait-for-turn RULeg around x-axis;
		wait-for-turn LLLeg around x-axis;
		wait-for-turn RLLeg around x-axis;
	}
	return (0);
}

SmokeUnit(healthpercent, sleeptime, smoketype)
{
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 400;
	}
	while( TRUE )
	{
		healthpercent = get HEALTH;
		if( healthpercent < 66 )
		{
			smoketype = 256 | 2;
			if( Rand( 1, 66 ) < healthpercent )
			{
				smoketype = 256 | 1;
			}
			emit-sfx smoketype from torso;
		}
		sleeptime = healthpercent * 50;
		if( sleeptime < 200 )
		{
			sleeptime = 200;
		}
		sleep sleeptime;
	}
	return (0);
}


MotionControl(moving, aiming, justmoved)
{
	justmoved = TRUE;
	while( TRUE )
	{
		moving = bMoving;
		aiming = bAiming;
		if( moving )
		{
			call-script walk();
			justmoved = TRUE;
		}
		if( !moving )
		{
			if( justmoved )
			{
				if( !aiming )
				{
					turn torso to y-axis <0.000000> speed <90.016484>;
					turn torso to x-axis <0.000000> speed <90.016484>;
					turn RLArm to x-axis <0.000000> speed <200.038462>;
					turn RUArm to x-axis <0.000000> speed <200.038462>;
					turn LLArm to x-axis <0.000000> speed <200.038462>;
					turn LUArm to x-axis <0.000000> speed <200.038462>;
				}
				move Hip to y-axis [0.000000] speed [20.500000];
				move Hip to z-axis [0.000000] speed [50.500000];
				turn Hip to x-axis <0.000000> speed <40.038462>;
				turn RULeg to x-axis <-40.000000> speed <300.038462>;
				turn RLLeg to x-axis <50.000000> speed <600.038462>;
				move LLLeg to y-axis [0] speed [10];
				move RLLeg to y-axis [0] speed [10];
				turn head to y-axis <0.000000> speed <90.016484>;
				justmoved = FALSE;
				sleep 50;
				turn RULeg to x-axis <0.000000> speed <300.038462>;
				turn RLLeg to x-axis <0.000000> speed <600.038462>;
				turn LULeg to x-axis <-40.000000> speed <300.038462>;
				turn LLLeg to x-axis <50.000000> speed <600.038462>;
				sleep 50;
				turn LULeg to x-axis <0.000000> speed <300.038462>;
				turn LLLeg to x-axis <0.000000> speed <600.038462>;
			}
			sleep 100;
		}
	}
	return (0);
}

Create()
{
	hide flare;
	bMoving = FALSE;
	bAiming = FALSE;

	call-script stopAimHelper1(<1000>,<1000>);
	start-script MotionSpeedControl();
	start-script MotionControl();
	start-script SmokeUnit();
	return (0);
}

StartMoving()
{
	bMoving = TRUE;
	return (0);
}

StopMoving()
{
	bMoving = FALSE;
	return (0);
}

SweetSpot(piecenum)
{
	piecenum = torso;
	return (0);
}

RestoreAfterDelay()
{
	sleep DEFAULT_WEAPON_RESTORE_DELAY;
	call-script stopAimHelper1(<150>,<150>);
	//start-script RequestState(1);
	turn torso to y-axis <0.000000> speed <150.027473>;
	turn luarm to x-axis <0.000000> speed <150.027473>;
	wait-for-turn torso around y-axis;
	bAiming = FALSE;
	return (0);
}

AimFromPrimary(piecenum)
{
	piecenum = torso;
	return (0);
}

QueryPrimary(piecenum)
{
	piecenum = flare;
	return (0);
}

AimPrimary(heading, pitch)
{
	call-script updateAimHelper1(heading,pitch + <90>,<550>,<550>,HEADING_TOLERANCE,PITCH_TOLERANCE);	
	signal SIG_AIM;
	set-signal-mask SIG_AIM;
	bAiming = TRUE;
	turn torso to y-axis heading speed <550.060440>;
	turn luArm to x-axis <-90.000000> - pitch speed <550.060440>;
	turn llArm to x-axis <0.000000> speed <550.060440>;
	if (!aimReady1)
	{	
		wait-for-turn torso around y-axis;
		wait-for-turn luarm around x-axis;
		wait-for-turn llarm around x-axis;
	}
	start-script RestoreAfterDelay();
	return (1);
}

FirePrimary()
{
	emit-sfx 1024+0 from flare;
	spin torso around y-axis speed <5>;
	sleep 100;
	stop-spin torso around y-axis;
	return 0;
}



Killed(severity, corpsetype)
{
	
	if( severity <= 35 )
	{
		explode torso type SHATTER;
		explode Head type SHATTER;
		explode Hip type SHATTER;
		return (1);
	}
	explode torso type SHATTER;
	explode Head type SHATTER;
	explode Hip type SHATTER;
	explode LLArm type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
	explode LLLeg type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP4;
	explode LUArm type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP5;
	explode LULeg type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
	explode RLArm type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
	explode RLLeg type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
	explode RUArm type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP4;
	explode RULeg type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP5;
	return (2);
}
