#define TA			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"

piece  GP, Base, Wake1, Wake2,
       Wake3, Wake4, Wake5, Wake6, Wake7, Wake8, turret, jammer, fork, b2,b3,b5, ear1, ear2, t2, jets;

static-var  terrainStatus, wobble;

// Signal definitions
#define SIG_MOVE			4

WobbleUnit()
{
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 400;
	}
	while( TRUE )
	{
		if( wobble == 1 )
		{
			move Base to y-axis [2.000000] speed [2.500000];
		}
		if( wobble == 0 )
		{
			move Base to y-axis [4.500000] speed [2.500000];
		}
		wobble = !wobble;
		sleep 750;
	}
	return (0);
}


HitByWeapon(Func_Var_1, Func_Var_2)
{
	turn Base to z-axis <0.010989> * Func_Var_2 speed <105.016484>;
	turn Base to x-axis <0.010989> * Func_Var_1 speed <105.016484>;
	wait-for-turn Base around z-axis;
	wait-for-turn Base around x-axis;
	turn Base to z-axis <0.000000> speed <30.005495>;
	turn Base to x-axis <0.000000> speed <30.005495>;
	return (0);
}

SmokeUnit(healthpercent, sleeptime, smoketype)
{
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 400;
	}
	while( TRUE )
	{
		healthpercent = get HEALTH;
		if( healthpercent < 66 )
		{
			smoketype = 256 | 2;
			if( Rand( 1, 66 ) < healthpercent )
			{
				smoketype = 256 | 1;
			}
			emit-sfx smoketype from Base;
		}
		sleeptime = healthpercent * 50;
		if( sleeptime < 200 )
		{
			sleeptime = 200;
		}
		sleep sleeptime;
	}
	return (0);
}

StartMoving()
{
	signal SIG_MOVE;
	set-signal-mask SIG_MOVE;
	while( TRUE )
	{
		if( terrainStatus <= 2 )
		{
			//emit-sfx 5 from wake1;
			emit-sfx 5 from wake2;
			//emit-sfx 5 from wake3;
			emit-sfx 5 from wake4;
			//emit-sfx 5 from wake5;
			emit-sfx 5 from wake6;
			//emit-sfx 3 from wake7;
			emit-sfx 5 from wake8;
		}
		sleep 300;
	}
	return (0);
}

StopMoving()
{
	return (0);
}

setSFXoccupy(state)
{
	terrainStatus = state;
	return (0);
}

Create()
{
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 1000;
	}
	start-script SmokeUnit();
	start-script WobbleUnit();
	return (0);
}


Activate()
{
	spin jammer around y-axis speed <360.021978>;
	spin turret around y-axis speed <200.021978>;
	spin ear1 around x-axis speed <200.021978>;
	spin ear2 around x-axis speed <-200.021978>;
	return (0);
}

Deactivate()
{
	stop-spin jammer around y-axis;
	stop-spin turret around y-axis;
	stop-spin ear1 around y-axis;
	stop-spin ear2 around y-axis;
	return (0);
}

Killed(severity, corpsetype)
{
	if( severity <= 50 )
	{
		explode turret type SHATTER | EXPLODE_ON_HIT | BITMAP4;
		explode jammer type SHATTER | EXPLODE_ON_HIT | BITMAP4;
		explode fork type SHATTER | EXPLODE_ON_HIT | BITMAP4;
		explode ear1 type SHATTER | EXPLODE_ON_HIT | BITMAP4;
		explode ear2 type SHATTER | EXPLODE_ON_HIT | BITMAP4;
		return (1);
	}

	explode turret type SHATTER | EXPLODE_ON_HIT | BITMAP4;
	explode jammer type SHATTER | EXPLODE_ON_HIT | BITMAP4;
	explode fork type SHATTER | EXPLODE_ON_HIT | BITMAP4;
	explode ear1 type SHATTER | EXPLODE_ON_HIT | BITMAP4;
	explode ear2 type SHATTER | EXPLODE_ON_HIT | BITMAP4;
	explode t2 type SHATTER | EXPLODE_ON_HIT | BITMAP4;
	explode b2 type SHATTER | EXPLODE_ON_HIT | BITMAP4;
	explode b3 type SHATTER | EXPLODE_ON_HIT | BITMAP4;
	explode b5 type SHATTER | EXPLODE_ON_HIT | BITMAP4;
	explode jets type SHATTER | EXPLODE_ON_HIT | BITMAP4;
		
	return (2);
}
