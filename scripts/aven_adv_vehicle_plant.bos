#define TA			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"

piece  base, pad, beam1, beam2, beam3, beam4,side1, side2, side3, side4, door2, door1, door3, door4, plate2, plate1,  plate3, plate4, nano2, nano1, nano3, nano4, post1, post2, post3, post4;

static-var  beampt, statechg_DesiredState, statechg_StateChanging, bBuilding;


Build()
{
	while (TRUE)
	{
		if( bBuilding == 1 )
		{
			emit-sfx 1024 + 0 from beam1;
			emit-sfx 1024 + 0 from beam2;
			emit-sfx 1024 + 0 from beam3;
			emit-sfx 1024 + 0 from beam4;

			sleep 60;
		}
		sleep 40;
	}
	return (0);
}

activatescr()
{
	if( TRUE )
	{
		move side1 to x-axis [38.000000] speed [30.000000];
		move side2 to x-axis [-38.000000] speed [30.000000];
		move side3 to x-axis [38.000000] speed [30.000000];
		move side4 to x-axis [-38.000000] speed [30.000000];

		sleep 830;
	}
	if( TRUE )
	{
		turn door2 to z-axis <90.000000> speed <200.000000>;
		turn door1 to z-axis <-90.000000> speed <200.000000>;
		turn door4 to z-axis <90.000000> speed <200.000000>;
		turn door3 to z-axis <-90.000000> speed <200.000000>;

		sleep 428;
	}
	if( TRUE )
	{
		move door2 to y-axis [-17.500000] speed [40.000000];
		move door1 to y-axis [-17.500000] speed [40.000000];
		move door4 to y-axis [-17.500000] speed [40.000000];
		move door3 to y-axis [-17.500000] speed [40.000000];

		sleep 428;
	}
	if( TRUE )
	{
		move plate2 to y-axis [14.620000] speed [40.000000];
		move plate1 to y-axis [14.620000] speed [40.000000];
		move plate4 to y-axis [14.620000] speed [40.000000];
		move plate3 to y-axis [14.620000] speed [40.000000];
		turn post2 to y-axis <20.000000> speed <100.000000>;
		turn post1 to y-axis <-20.000000> speed <100.000000>;
		turn post4 to y-axis <-20.000000> speed <100.000000>;
		turn post3 to y-axis <20.000000> speed <100.000000>;
		

		sleep 429;
	}
	if( TRUE )
	{
		turn nano2 to z-axis <-20.000000> speed <100.000000>;
		turn nano1 to z-axis <20.000000> speed <100.000000>;
		turn nano4 to z-axis <-20.000000> speed <100.000000>;
		turn nano3 to z-axis <20.000000> speed <100.000000>;
		sleep 431;
	}
	sleep 19;
}

deactivatescr()
{
	if( TRUE )
	{
		turn nano2 to z-axis <0.000000> speed <100.000000>;
		turn nano1 to z-axis <0.000000> speed <100.000000>;
		turn nano4 to z-axis <0.000000> speed <100.000000>;
		turn nano3 to z-axis <0.000000> speed <100.000000>;

		sleep 418;
	}
	if( TRUE )
	{
		move plate2 to y-axis [0.000000] speed [40.000000];
		move plate1 to y-axis [0.000000] speed [40.000000];
		move plate4 to y-axis [0.000000] speed [40.000000];
		move plate3 to y-axis [0.000000] speed [40.000000];
		turn post2 to y-axis <0.000000> speed <100.000000>;
		turn post1 to y-axis <0.000000> speed <100.000000>;
		turn post4 to y-axis <0.000000> speed <100.000000>;
		turn post3 to y-axis <0.000000> speed <100.000000>;

		sleep 426;
	}
	if( TRUE )
	{
		move door2 to y-axis [0.000000] speed [40.000000];
		move door1 to y-axis [0.000000] speed [40.000000];
		move door4 to y-axis [0.000000] speed [40.000000];
		move door3 to y-axis [0.000000] speed [40.000000];
		sleep 428;
	}
	if( TRUE )
	{
		turn door2 to z-axis <0.000000> speed <200.000000>;
		turn door1 to z-axis <0.000000> speed <200.000000>;
		turn door4 to z-axis <0.000000> speed <200.000000>;
		turn door3 to z-axis <0.000000> speed <200.000000>;
		sleep 430;
	}
	if( TRUE )
	{
		move side1 to x-axis [0.000000] speed [30.000000];
		move side2 to x-axis [0.000000] speed [30.000000];
		move side3 to x-axis [0.000000] speed [30.000000];
		move side4 to x-axis [0.000000] speed [30.000000];
		sleep 830;
	}
	sleep 20;
}

SmokeUnit(healthpercent, sleeptime, smoketype)
{
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 400;
	}
	while( TRUE )
	{
		healthpercent = get HEALTH;
		if( healthpercent < 66 )
		{
			smoketype = 256 | 2;
			if( Rand( 1, 66 ) < healthpercent )
			{
				smoketype = 256 | 1;
			}
			emit-sfx smoketype from base;
		}
		sleeptime = healthpercent * 50;
		if( sleeptime < 200 )
		{
			sleeptime = 200;
		}
		sleep sleeptime;
	}
}

OpenYard()
{
	set YARD_OPEN to 1;
	while( !get YARD_OPEN )
	{
		set BUGGER_OFF to 1;
		sleep 1500;
		set YARD_OPEN to 1;
	}
	set BUGGER_OFF to 0;
}

CloseYard()
{
	set YARD_OPEN to 0;
	while( get YARD_OPEN )
	{
		set BUGGER_OFF to 1;
		sleep 1500;
		set YARD_OPEN to 0;
	}
	set BUGGER_OFF to 0;
}

Go()
{
	dont-cache door2;
	dont-cache door1;
	dont-cache nano1;
	dont-cache nano2;
	dont-cache pad;
	dont-cache plate1;
	dont-cache plate2;
	dont-cache post1;
	dont-cache post2;
	dont-cache side1;
	dont-cache side2;
	call-script activatescr();
	call-script OpenYard();
	set INBUILDSTANCE to 1;
}

Stop()
{
	bBuilding = 0;
	set INBUILDSTANCE to 0;
	call-script CloseYard();
	call-script deactivatescr();
	cache door2;
	cache door1;
	cache nano1;
	cache nano2;
	cache pad;
	cache plate1;
	cache plate2;
	cache post1;
	cache post2;
	cache side1;
	cache side2;
}

InitState()
{
	statechg_DesiredState = 1;
	statechg_StateChanging = 0;
}

RequestState(requestedstate, currentstate)
{
	if( statechg_StateChanging )
	{
		statechg_DesiredState = requestedstate;
		return (0);
	}
	statechg_StateChanging = 1;
	currentstate = statechg_DesiredState;
	statechg_DesiredState = requestedstate;
	while( statechg_DesiredState != currentstate )
	{
		if( statechg_DesiredState == 0 )
		{
			call-script Go();
			currentstate = 0;
		}
		if( statechg_DesiredState == 1 )
		{
			call-script Stop();
			currentstate = 1;
		}
	}
	statechg_StateChanging = 0;
}

Create()
{
	dont-shade door2;
	dont-shade door1;
	dont-shade nano1;
	dont-shade nano2;
	dont-shade pad;
	dont-shade plate1;
	dont-shade plate2;
	dont-shade post1;
	dont-shade post2;
	dont-shade side1;
	dont-shade side2;
	beampt = 0;
	call-script InitState();
	start-script SmokeUnit();
	start-script Build();
}

QueryNanoPiece(piecenum)
{
	if( beampt == 0 )
	{
		piecenum = beam1;
		beampt=1;
		return 0;
	}
	if( beampt == 1 )
	{
		piecenum = beam2;
		beampt=2;
		return 0;
	}
	if( beampt == 2 )
	{
		piecenum = beam3;
		beampt=3;
		return 0;
	}
	if( beampt == 3 )
	{
		piecenum = beam4;
		beampt=0;
		return 0;
	}
}

Activate()
{
	signal 2;
	start-script RequestState(0);
}

Deactivate()
{
	signal 2;
	set-signal-mask 2;
	sleep 5000;
	set-signal-mask 0;
	start-script RequestState(1);
}

StartBuilding()
{
	bBuilding = 1;
}

StopBuilding()
{
	bBuilding = 0;
}

QueryBuildInfo(piecenum)
{
	piecenum = pad;
}

SweetSpot(piecenum)
{
	piecenum = base;
}

Killed(severity, corpsetype)
{
	if( severity <= 50 )
	{
		explode door1 type SHATTER;
		explode door2 type SHATTER;
		explode door3 type SHATTER;
		explode door4 type SHATTER;
		
		explode nano1 type SHATTER;
		explode nano2 type SHATTER;
		explode nano3 type SHATTER;
		explode nano4 type SHATTER;
		return (1);
	}
	explode side1 type SHATTER;
	explode side2 type SHATTER;
	explode side3 type SHATTER;
	explode side4 type SHATTER;

	explode plate1 type SHATTER;
	explode plate2 type SHATTER;
	explode plate3 type SHATTER;
	explode plate4 type SHATTER;
	
	explode door1 type SHATTER;
	explode door2 type SHATTER;
	explode door3 type SHATTER;
	explode door4 type SHATTER;

	explode nano1 type SHATTER;
	explode nano2 type SHATTER;
	explode nano3 type SHATTER;
	explode nano4 type SHATTER;

	return (2);
}
