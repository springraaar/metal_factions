#define TAK			// This is a TAK script

#include "sfxtype.h"
#include "exptype.h"

#define SPEEDUP_FACTOR 220

#define HEADING_TOLERANCE	<25>
#define PITCH_TOLERANCE		<15>

piece  base, flare,  turret, sleeve, barrel, hull,bottom, rmidsup,rmidwheel,rfrontsup,rfrontwheel,rbacksup,rbackwheel,lbacksup,lbackwheel,lmidsup,lmidwheel,lfrontsup,lfrontwheel, base2,lsup,lsup1,lleg,lfoot,rsup,rsup1,rleg,rfoot,bsup,bsup1,bleg,bfoot;

static-var  bMoving, bAiming, bSwimming, terrainStatus, wheelSpeed, wheelAcceleration,isDeployed;

lua_setMobility() { return 0; }

#include "aimhelper1.h"

// Signal definitions
#define SIG_MOVE			2
#define SIG_AIM				4



shake()
{
	set CEG_DAMAGE to 10;
	play-sound( "burrow", 15 );
	sleep 30;
	emit-sfx 1024+1 from lfoot;
	emit-sfx 1024+1 from rfoot;
	emit-sfx 1024+1 from bfoot;
}

deploy()
{
	if (!isDeployed)
	{
		call-script lua_setMobility(0);

		move rsup1 to x-axis [9] speed [20];
		move lsup1 to x-axis [-9] speed [20];
		move bsup1 to z-axis [-9] speed [20];
		wait-for-move lsup1 along x-axis;

		turn lsup to z-axis <45> speed <200>;
		turn lleg to z-axis <-45> speed <300>;
		turn rsup to z-axis <-45> speed <200>;
		turn rleg to z-axis <45> speed <300>;
		turn bsup to x-axis <-45> speed <200>;
		turn bleg to x-axis <45> speed <300>;
		
		move sleeve to y-axis [0] speed [7];
		wait-for-turn lsup around z-axis;
		wait-for-turn lleg around z-axis;
		call-script shake();
				
		isDeployed = TRUE;
	}
}

undeploy()
{
	if (isDeployed)
	{
		isDeployed = FALSE;
		call-script stopAimHelper1(<1000>,<1000>);

		turn turret to y-axis <0> speed <130>;
		turn sleeve to x-axis <0> speed <130>;
		wait-for-turn turret around y-axis;
		wait-for-turn sleeve around x-axis;

		move sleeve to y-axis [-3.6] speed [7];

		turn lsup to z-axis <-45> speed <100>;
		turn lleg to z-axis <0> speed <100>;
		turn rsup to z-axis <45> speed <100>;
		turn rleg to z-axis <0> speed <100>;
		turn bsup to x-axis <45> speed <100>;
		turn bleg to x-axis <0> speed <100>;

		wait-for-turn lsup around z-axis;
		move lsup1 to x-axis [0] speed [20];
		move rsup1 to x-axis [0] speed [20];
		move bsup1 to z-axis [0] speed [20];
		wait-for-move lsup1 along x-axis;
		
		call-script lua_setMobility(100);
	}
	isDeployed = FALSE;
}


handleActivation()
{
	while (TRUE)
	{ 
		if (get ACTIVATION) 
		{
			if ((terrainStatus == 2 OR terrainStatus == 1)) 
			{
				call-script undeploy();
			}
			else
			{
				call-script deploy();
			}
		}
		else
		{
			call-script undeploy();
		}
		sleep 100;
	}
}




WheelSpeedControl(maxSpeed,currentSpeed)
{
	maxSpeed = get MAX_SPEED;
	bMoving = FALSE;
	while(TRUE)
	{
		currentSpeed = get CURRENT_SPEED;

		wheelSpeed = (currentSpeed*SPEEDUP_FACTOR) / maxSpeed * 728;
		wheelAcceleration = wheelSpeed / 2;

		sleep 100;
	}
}

SmokeUnit(healthpercent, sleeptime, smoketype)
{
	var Func_Var_4;
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 400;
	}
	while( TRUE )
	{
		healthpercent = get HEALTH;
		if( healthpercent < 66 )
		{
			smoketype = 256 | 2;
			if( Rand( 1, 66 ) < healthpercent )
			{
				smoketype = 256 | 1;
			}
			emit-sfx smoketype from hull;
		}
		sleeptime = healthpercent * 50;
		if( sleeptime < 200 )
		{
			sleeptime = 200;
		}
		sleep sleeptime;
	}
	return (0);
}

stopWheels()
{
	stop-spin rmidwheel around x-axis decelerate <50.000000>;
	stop-spin rfrontwheel around x-axis decelerate <50.000000>;
	stop-spin rbackwheel around x-axis decelerate <50.000000>;
	stop-spin lmidwheel around x-axis decelerate <50.000000>;
	stop-spin lfrontwheel around x-axis decelerate <50.000000>;
	stop-spin lbackwheel around x-axis decelerate <50.000000>;
	return (0);
}

walk()
{
	if( bMoving )
	{
		spin rmidwheel around x-axis speed wheelSpeed accelerate <40.000000>;
		spin rfrontwheel around x-axis speed wheelSpeed accelerate <40.000000>;
		spin rbackwheel around x-axis speed wheelSpeed accelerate <40.000000>;
		spin lmidwheel around x-axis speed wheelSpeed accelerate <40.000000>;
		spin lfrontwheel around x-axis speed wheelSpeed accelerate <40.000000>;
		spin lbackwheel around x-axis speed wheelSpeed accelerate <40.000000>;
		sleep 200;
	}
	return (0);
}


MotionControl(justMoved)
{
	justMoved = TRUE;
	while( TRUE )
	{
		if( bMoving )
		{
			set UPRIGHT to FALSE;
			call-script walk();
	
			justMoved = TRUE;
		}
		if( !bMoving )
		{
			if( justMoved )
			{
				call-script stopWheels();
				justMoved = FALSE;
			}
			sleep 100;
		}
	}
	return (0);
}

Create()
{
	
	bMoving = FALSE;
	bAiming = FALSE;
	isDeployed = FALSE;

	// force undeploy
	move sleeve to y-axis [-3.6] now;
	turn lsup to z-axis <-45> now;
	turn lleg to z-axis <0> now;
	turn rsup to z-axis <45> now;
	turn rleg to z-axis <0> now;
	turn bsup to x-axis <45> now;
	turn bleg to x-axis <0> now;


	call-script stopAimHelper1(<1000>,<1000>);
	start-script WheelSpeedControl();
	start-script MotionControl();
	start-script SmokeUnit();
	start-script handleActivation();
	return (0);
}

StartMoving()
{
	bMoving = TRUE;
	return (0);
}

StopMoving()
{
	bMoving = FALSE;
	return (0);
}

setSFXoccupy(Func_Var_1)
{
	terrainStatus = Func_Var_1;
	return (0);
}


RestoreAfterDelay()
{
	sleep DEFAULT_WEAPON_RESTORE_DELAY;
	call-script stopAimHelper1(<100>,<100>);
	turn turret to y-axis <0.000000> speed <100.000000>;
	turn sleeve to x-axis <0.000000> speed <100.000000>;
	return (0);
}


AimPrimary(heading, pitch)
{
	if (!isDeployed)
	{
		return 0;
	}

	call-script updateAimHelper1(heading,pitch,<80>,<80>,HEADING_TOLERANCE,PITCH_TOLERANCE);
	signal SIG_AIM;
	set-signal-mask SIG_AIM;
	bAiming = TRUE;
	turn turret to y-axis heading speed <80.000000>;
	turn sleeve to x-axis <0.000000> - pitch speed <80.000000>;
	if (!aimReady1)
	{
		wait-for-turn turret around y-axis;
		wait-for-turn sleeve around x-axis;
	}
	start-script RestoreAfterDelay();
	return (1);
}


FirePrimary()
{
	move barrel to z-axis [-5.000000] now;
	emit-sfx 1024 from flare;
	sleep 100;
	move barrel to z-axis [0.000000] speed [10.000000];
	return (1);
}


AimFromPrimary(piecenum)
{
	piecenum = turret;
	return (0);
}

QueryPrimary(piecenum)
{
	piecenum = flare;
	return (0);
}


Killed(severity, corpsetype)
{
	if( severity <= 50 )
	{
		explode sleeve type SHATTER;
		explode turret type SHATTER;
		return (1);
	}
	explode hull type SHATTER;
	explode bottom type SHATTER;
	explode turret type SHATTER;
	explode sleeve type SHATTER;
	explode barrel type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP5;
	return (2);
}
