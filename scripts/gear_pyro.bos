#define TAK			// This is a TAK script

#include "sfxtype.h"
#include "exptype.h"

#define SPEEDUP_FACTOR	230

#define HEADING_TOLERANCE	<30>
#define PITCH_TOLERANCE		<25>

piece  torso, ruparm, luparm, rfire, rloarm, lloarm, pelvis, rbarrel, lshield, rleg, rfoot, lleg, lfoot, head, lthigh, rthigh, ground, jumpback,jbl,jbr,lbjetpt,rbjetpt,jumpjets,lfjet,rfjet,lfjetpt,rfjetpt;

static-var  bMoving, bAiming, mATurnSpd1,mATurnSpd2,mATurnSpd3,mASpdFactor, mAMoveSpd1, mAVertFactor, legAngle1, legAngle2, legAngle3;

#include "aimhelper1.h"

// Signal definitions
#define SIG_AIM				2

#include "jumpvars.h"


showJumpGear() {
	show jumpback;
	show jbl;
	show jbr;
	show jumpjets;
	show lfjet;
	show rfjet;
}

hideJumpGear() {
	hide jumpback;
	hide jbl;
	hide jbr;
	hide jumpjets;
	hide lfjet;
	hide rfjet;
}

showJumpEffects(descending, frames) {
	if (descending) {
		emit-sfx 1024+4 from lfjetpt;
		emit-sfx 1024+4 from rfjetpt;
		emit-sfx 1024+3 from lbjetpt;
		emit-sfx 1024+3 from rbjetpt;
		if (frames == JUMP_SND_FRAMES) {
			play-sound( "jumpdesc", 1 );
		}
	} else {
		if (frames == 0 ) {
			play-sound( "jumpstart", 1 );
		} else {
			if (frames == JUMP_SND_FRAMES) {
				play-sound( "jumpasc", 1 );
			}
		}
		emit-sfx 1024+2 from lfjetpt;
		emit-sfx 1024+2 from rfjetpt;
		emit-sfx 1024+1 from lbjetpt;
		emit-sfx 1024+1 from rbjetpt;
	}
}

#include "jump.h"

MotionSpeedControl(maxSpeed,currentSpeed)
{
	maxSpeed = get MAX_SPEED;
	currentSpeed = 0;
	mASpdFactor = SPEEDUP_FACTOR;
	
	while(TRUE)
	{
		currentSpeed = get CURRENT_SPEED;
		mASpdFactor = SPEEDUP_FACTOR * currentSpeed / maxSpeed;

		//call-script lua_cobDebug(mASpdFactor);
		if ( mASpdFactor < SPEEDUP_FACTOR/2 )
		{
			mASpdFactor = SPEEDUP_FACTOR/2;
		}
		
		
		mAMoveSpd1 = [20.000000] * mASpdFactor / 100;
		mATurnSpd1 = <320.000000> * (100 + mASpdFactor) / 200;
		mATurnSpd2 = <250.000000> * (100 + mASpdFactor) / 200;
		mATurnSpd3 = <50.000000> * (100 + mASpdFactor) / 200;

		mAVertFactor = [0.000000]-[1.500000] * mASpdFactor / SPEEDUP_FACTOR;
		legAngle1 = <60.000000>;
		legAngle2 = <30.000000>;
		legAngle3 = <15.000000>;
		if ( mASpdFactor < SPEEDUP_FACTOR )
		{
			legAngle1 = legAngle1 * (SPEEDUP_FACTOR + mASpdFactor) / (2*SPEEDUP_FACTOR);
			legAngle2 = legAngle2 * (SPEEDUP_FACTOR + mASpdFactor) / (2*SPEEDUP_FACTOR);
			legAngle3 = legAngle3 * (SPEEDUP_FACTOR + mASpdFactor) / (2*SPEEDUP_FACTOR);

		}
	
		sleep 60;
	}
}


SmokeUnit(healthpercent, sleeptime, smoketype)
{
	var Func_Var_4;
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 400;
	}
	while( TRUE )
	{
		healthpercent = get HEALTH;
		if( healthpercent < 66 )
		{
			smoketype = 256 | 2;
			if( Rand( 1, 66 ) < healthpercent )
			{
				smoketype = 256 | 1;
			}
			emit-sfx smoketype from torso;
		}
		sleeptime = healthpercent * 50;
		if( sleeptime < 200 )
		{
			sleeptime = 200;
		}
		sleep sleeptime;
	}
	return (0);
}

walk()
{
	var slowTurnSpd, slowTurnSpd2;

	slowTurnSpd = mATurnSpd2 / 4;
	slowTurnSpd2 = mATurnSpd2 / 12;
	
	if (isJumping) {
		move pelvis to y-axis [0.000000] speed [12.500000];
		turn pelvis to x-axis <0.000000> speed <20.000000>;
		turn rthigh to x-axis <0.000000> speed <200.000000>;
		turn rleg to x-axis <0.000000> speed <200.000000>;
		turn rfoot to x-axis <0.000000> speed <200.000000>;
		turn lthigh to x-axis <0.000000> speed <200.000000>;
		turn lleg to x-axis <0.000000> speed <200.000000>;
		turn lfoot to x-axis <0.000000> speed <200.000000>;
		sleep 100;
		return;
	}

	// back contact point : right foot behind, left foot forward
	if( bMoving && !isJumping )
	{
		turn lthigh to x-axis <0.000000>-legAngle1 speed mATurnSpd1;
		turn lleg to x-axis legAngle2 speed mATurnSpd2;
		//turn lfoot to x-axis <0> speed mATurnSpd3;

		turn rthigh to x-axis legAngle2 speed mATurnSpd2;
		turn rleg to x-axis legAngle3 speed mATurnSpd2;
		//turn rfoot to x-axis <0.000000>-legAngle2 speed mATurnSpd1;

		move pelvis to y-axis mAVertFactor speed mAMoveSpd1;
		turn pelvis to x-axis <8.000000> speed slowTurnSpd;
		if(!bAiming)
		{
			// turn torso left, right arm forward
			turn torso to y-axis <10.000000> speed slowTurnSpd2;
			turn ruparm to x-axis <0.000000> speed slowTurnSpd;
			//turn rloarm to x-axis <-20.000000> speed slowTurnSpd2;
		}
		
		wait-for-turn lthigh around x-axis;
		wait-for-turn rthigh around x-axis;
		wait-for-turn lleg around x-axis;
		wait-for-turn rleg around x-axis;
	}

	// intermediate pose 2 : left stomp ground
	if( bMoving && !isJumping )
	{
		turn lfoot to x-axis legAngle3 speed mATurnSpd1*5;
		turn pelvis to x-axis <-4.000000> speed slowTurnSpd;
		wait-for-turn lfoot around x-axis;
	}

	// passing pose 2 : right foot raising, left foot on the ground
	if( bMoving && !isJumping )
	{
		turn lthigh to x-axis <0.000000> speed mATurnSpd2;
		turn lleg to x-axis <0.000000> speed mATurnSpd2;
		//turn lfoot to x-axis <0.000000> speed mATurnSpd3;

		turn rthigh to x-axis <-20.000000> speed mATurnSpd2;
		turn rleg to x-axis <30.000000> speed mATurnSpd2;
		//turn rfoot to x-axis <10.000000> speed mATurnSpd1;

		if(!bAiming)
		{
			// restore position
			turn torso to y-axis <0.000000> speed slowTurnSpd2;
			turn ruparm to x-axis <10.000000> speed slowTurnSpd;
			//turn rloarm to x-axis <-15.000000> speed slowTurnSpd2;

		}

		move pelvis to y-axis [0.000000] speed mAMoveSpd1;
		turn pelvis to x-axis <0.000000> speed slowTurnSpd;		
		
		wait-for-turn lthigh around x-axis;
		wait-for-turn rthigh around x-axis;
		wait-for-turn lleg around x-axis;
		wait-for-turn rleg around x-axis;

	}
	
	// forward contact point : right foot forward, left foot behind
	if( bMoving && !isJumping )
	{
		turn lthigh to x-axis legAngle2 speed mATurnSpd2;
		turn lleg to x-axis legAngle3 speed mATurnSpd2;
		//turn lfoot to x-axis <0>-legAngle2 speed mATurnSpd1;

		turn rthigh to x-axis <0>-legAngle1 speed mATurnSpd1;
		turn rleg to x-axis legAngle2 speed mATurnSpd2;
		//turn rfoot to x-axis <0> speed mATurnSpd3;
		
		move pelvis to y-axis mAVertFactor speed mAMoveSpd1;
		turn pelvis to x-axis <8.000000> speed slowTurnSpd;
		
		if(!bAiming)
		{
			// turn torso right, left arm forward
			turn torso to y-axis <-10.000000> speed slowTurnSpd2;
			turn ruparm to x-axis <25.000000> speed slowTurnSpd;
			//turn rloarm to x-axis <-10.000000> speed slowTurnSpd2;
		}

		wait-for-turn lthigh around x-axis;
		wait-for-turn rthigh around x-axis;
		wait-for-turn lleg around x-axis;
		wait-for-turn rleg around x-axis;
	}

	// intermediate pose 1 : right stomp ground
	if( bMoving && !isJumping )
	{
		turn rfoot to x-axis legAngle3 speed mATurnSpd1*5;
		turn pelvis to x-axis <-4.000000> speed slowTurnSpd;
		wait-for-turn rfoot around x-axis;
	}

	// passing pose 1 : right foot on ground, left foot raising
	if( bMoving && !isJumping )
	{
		turn lthigh to x-axis <-20.000000> speed mATurnSpd2;
		turn lleg to x-axis <30.000000> speed mATurnSpd2;
		//turn lfoot to x-axis <10.000000> speed mATurnSpd1;
		
		turn rthigh to x-axis <0.000000> speed mATurnSpd2;
		turn rleg to x-axis <0.000000> speed mATurnSpd2;
		//turn rfoot to x-axis <0.000000> speed mATurnSpd3;

		
		if(!bAiming)
		{
			// restore position
			turn torso to y-axis <0.000000> speed slowTurnSpd2;
			turn ruparm to x-axis <10.000000> speed slowTurnSpd;
			//turn rloarm to x-axis <-15.000000> speed slowTurnSpd2;
		}
		
		move pelvis to y-axis [0.000000] speed mAMoveSpd1;
		turn pelvis to x-axis <0.000000> speed slowTurnSpd2;
		
		wait-for-turn lthigh around x-axis;
		wait-for-turn rthigh around x-axis;
		wait-for-turn lleg around x-axis;
		wait-for-turn rleg around x-axis;
	}
	
	return;
}

MotionControl(moving, aiming, justmoved)
{
	justmoved = TRUE;
	while( TRUE )
	{
		moving = bMoving;
		aiming = bAiming;
		if( moving )
		{
			if( aiming )
			{
				call-script walk();
			}
			if( !aiming )
			{
				call-script walk();
			}
			justmoved = TRUE;
		}
		if( !moving )
		{
			if( justmoved )
			{
				move pelvis to y-axis [0.000000] speed [0.002777];
				turn pelvis to x-axis <0.000000> speed <200.000000>;
				turn rthigh to x-axis <0.000000> speed <200.000000>;
				turn rleg to x-axis <0.000000> speed <200.000000>;
				turn rfoot to x-axis <0.000000> speed <200.000000>;
				turn lthigh to x-axis <0.000000> speed <200.000000>;
				turn lleg to x-axis <0.000000> speed <200.000000>;
				turn lfoot to x-axis <0.000000> speed <200.000000>;
				if( !aiming )
				{
					turn torso to y-axis <0.000000> speed <90.000000>;
					turn rloarm to x-axis <0.000000> speed <200.000000>;
					turn ruparm to x-axis <0.000000> speed <200.000000>;
					turn lloarm to x-axis <0.000000> speed <200.000000>;
					turn luparm to x-axis <0.000000> speed <200.000000>;
				}
				justmoved = FALSE;
			}
			sleep 100;
		}
	}
	return (0);
}

Create()
{
	hide rfire;
	bMoving = FALSE;
	bAiming = FALSE;
	call-script stopAimHelper1(<1000>,<1000>);
	start-script initJump();
	start-script MotionControl();
	start-script SmokeUnit();
	start-script setHasJump(1);
	start-script MotionSpeedControl();
	return (0);
}

StartMoving()
{
	bMoving = TRUE;
	return (0);
}

StopMoving()
{
	bMoving = FALSE;
	return (0);
}

SweetSpot(piecenum)
{
	piecenum = torso;
	return (0);
}

RestoreAfterDelay()
{
	sleep DEFAULT_WEAPON_RESTORE_DELAY;
	call-script stopAimHelper1(<150>,<150>);
	turn torso to y-axis <0.000000> speed <150.000000>;
	turn ruparm to x-axis <0.000000> speed <150.000000>;
	wait-for-turn torso around y-axis;
	wait-for-turn ruparm around x-axis;
	bAiming = FALSE;
	return (0);
}

AimFromPrimary(piecenum)
{
	piecenum = torso;
	return (0);
}

QueryPrimary(piecenum)
{
	piecenum = rfire;
	return (0);
}

AimPrimary(heading, pitch)
{
	call-script updateAimHelper1(heading,pitch,<450>,<450>,HEADING_TOLERANCE,PITCH_TOLERANCE);
	signal SIG_AIM;
	set-signal-mask SIG_AIM;
	bAiming = TRUE;
	turn torso to y-axis heading speed <450.000000>;
	turn ruparm to x-axis <0.000000> - pitch speed <450.000000>;
	if (!aimReady1)
	{
		wait-for-turn torso around y-axis;
		wait-for-turn ruparm around x-axis;
	}
	start-script RestoreAfterDelay();
	return (1);
}

Shot1()
{
	emit-sfx 1024 from rfire;
	return (0);
}

Killed(severity, corpsetype)
{
	hide rfire;
	if( severity <= 35 )
	{
		explode head type SHATTER;
		explode lfoot type SHATTER;
		explode lleg type SHATTER;
		explode rthigh type SHATTER;
		explode torso type SHATTER;
		return (1);
	}

	explode head type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
	explode lfoot type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP4;
	explode lleg type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP5;
	explode lloarm type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
	explode pelvis type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP4;
	explode rfoot type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
	explode rleg type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
	explode rthigh type SHATTER | EXPLODE_ON_HIT | BITMAP4;
	explode ruparm type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP5;
	explode torso type SHATTER | EXPLODE_ON_HIT | BITMAP1;
	return (2);
}
