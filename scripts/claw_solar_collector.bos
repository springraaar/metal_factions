#define TA			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"

piece  base, panel1, panel2, panel3, panel4,logo1,logo2,logo3,logo4;

static-var  Static_Var_1, statechg_DesiredState, statechg_StateChanging;

lua_energyTransaction() { return 0; }


energyTransactions() {
	// send resources every half second
	while (TRUE) {
		while( get BUILD_PERCENT_LEFT ) {
			sleep 100;
		}
		if (GET ACTIVATION) {
			call-script lua_energyTransaction(12);  
		}
		sleep 467;		// 15 frames
	}
}

activatescr()
{
	turn panel1 to x-axis <0.000000> speed <180.000000>;
	turn panel2 to x-axis <0.000000> speed <180.000000>;
	turn panel3 to x-axis <0.000000> speed <180.000000>;
	turn panel4 to x-axis <0.000000> speed <180.000000>;
	sleep 1000;
	return (0);
}

deactivatescr()
{
	turn panel1 to x-axis <180.000000> speed <180.000000>;
	turn panel2 to x-axis <180.000000> speed <180.000000>;
	turn panel3 to x-axis <180.000000> speed <180.000000>;
	turn panel4 to x-axis <180.000000> speed <180.000000>;
	sleep 1000;
	return (0);
}

SmokeUnit(healthpercent, sleeptime, smoketype)
{
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 400;
	}
	while( TRUE )
	{
		healthpercent = get HEALTH;
		if( healthpercent < 66 )
		{
			smoketype = 256 | 2;
			if( Rand( 1, 66 ) < healthpercent )
			{
				smoketype = 256 | 1;
			}
			emit-sfx smoketype from base;
		}
		sleeptime = healthpercent * 50;
		if( sleeptime < 200 )
		{
			sleeptime = 200;
		}
		sleep sleeptime;
	}
	return (0);
}

OpenYard()
{
	set YARD_OPEN to 1;
	while( !get YARD_OPEN )
	{
		set BUGGER_OFF to 1;
		sleep 1500;
		set YARD_OPEN to 1;
	}
	set BUGGER_OFF to 0;
	return (0);
}

CloseYard()
{
	set YARD_OPEN to 0;
	while( get YARD_OPEN )
	{
		set BUGGER_OFF to 1;
		sleep 1500;
		set YARD_OPEN to 0;
	}
	set BUGGER_OFF to 0;
	return (0);
}

InitState()
{
	statechg_DesiredState = TRUE;
	statechg_StateChanging = FALSE;
	return (0);
}

RequestState(requestedstate, currentstate)
{
	if( statechg_StateChanging )
	{
		statechg_DesiredState = requestedstate;
		return (0);
	}
	statechg_StateChanging = TRUE;
	currentstate = statechg_DesiredState;
	statechg_DesiredState = requestedstate;
	while( statechg_DesiredState != currentstate )
	{
		if( statechg_DesiredState == 0 )
		{
			call-script activatescr();
			currentstate = 0;
		}
		if( statechg_DesiredState == 1 )
		{
			call-script deactivatescr();
			currentstate = 1;
		}
	}
	statechg_StateChanging = FALSE;
	return (0);
}

Create()
{
	call-script InitState();
	start-script SmokeUnit();
	start-script energyTransactions();
		
	Static_Var_1 = 0;
	return (0);
}

Activate()
{
	if( Static_Var_1 )
	{
		set ACTIVATION to 0;
		return (0);
	}
	set ARMORED to 0;
	start-script RequestState(0);
	return (0);
}

Deactivate()
{
	set ARMORED to 1;
	start-script RequestState(1);
	return (0);
}

HitByWeapon(Func_Var_1, Func_Var_2)
{
	if( get ACTIVATION )
	{
		Static_Var_1 = 1;
	}
	if( Static_Var_1 )
	{
		signal 2;
		set-signal-mask 2;
		set ACTIVATION to 0;
		sleep 8000;
		Static_Var_1 = 0;
		set ACTIVATION to 100;
	}
	return (0);
}

SweetSpot(piecenum)
{
	piecenum = base;
	return (0);
}

Killed(severity, corpsetype)
{
	if( severity <= 25 )
	{
		corpsetype = 1;
		explode base type BITMAPONLY | BITMAP1;
		explode panel1 type SHATTER | BITMAP2;
		explode panel2 type SHATTER | BITMAP3;
		explode panel3 type BITMAPONLY | BITMAP4;
		explode panel4 type BITMAPONLY | BITMAP5;
		explode logo1 type FALL | BITMAP2;
		explode logo2 type FALL | BITMAP3;
		explode logo3 type BITMAPONLY | BITMAP4;
		explode logo4 type BITMAPONLY | BITMAP5;
		return (0);
	}
	if( severity <= 50 )
	{
		corpsetype = 2;
		explode base type BITMAPONLY | BITMAP1;
		explode panel1 type SHATTER | BITMAP2;
		explode panel2 type SHATTER | BITMAP3;
		explode panel3 type BITMAPONLY | BITMAP4;
		explode panel4 type BITMAPONLY | BITMAP5;
		explode logo1 type FALL | BITMAP2;
		explode logo2 type FALL | BITMAP3;
		explode logo3 type BITMAPONLY | BITMAP4;
		explode logo4 type BITMAPONLY | BITMAP5;
		return (0);
	}
	if( severity <= 99 )
	{
		corpsetype = 3;
		explode base type BITMAPONLY | BITMAP1;
		explode panel1 type SHATTER | BITMAP2;
		explode panel2 type SHATTER | BITMAP3;
		explode panel3 type BITMAPONLY | BITMAP4;
		explode panel4 type BITMAPONLY | BITMAP5;
		explode logo1 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
		explode logo2 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
		explode logo3 type BITMAPONLY | BITMAP4;
		explode logo4 type BITMAPONLY | BITMAP5;
		return (0);
	}
	corpsetype = 3;
	explode base type BITMAPONLY | BITMAP1;
	explode panel1 type SHATTER | EXPLODE_ON_HIT | BITMAP2;
	explode panel2 type SHATTER | EXPLODE_ON_HIT | BITMAP3;
	explode panel3 type BITMAPONLY | BITMAP4;
	explode panel4 type BITMAPONLY | BITMAP5;
	explode logo1 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
	explode logo2 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
	explode logo3 type BITMAPONLY | BITMAP4;
	explode logo4 type BITMAPONLY | BITMAP5;
	return (0);
}
