#define TA			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"

#define SPEEDUP_FACTOR	180

piece  ground, torso, leg1, leg2, leg3, leg4, leg5, leg6, nano1, nanospray1, nano2, nanospray2, lbase, wings;

static-var  Static_Var_1, bMoving, isBuilding, isOpen, nanoPt, mATurnSpd1,mATurnSpd2,mATurnSpd3,mASpdFactor, mAMoveSpd1, mADelay1, legAngle1, legAngle2, legAngle3;

// Signal definitions
#define SIG_BUILD			2

Build()
{
	while(TRUE)
	{
		if( isBuilding == [1] )
		{
			emit-sfx 1024 + 0 from nanospray1;
			emit-sfx 1024 + 0 from nanospray2;
			sleep 60;
		}
		sleep 40;
	}
	return (0);
}
MotionSpeedControl(maxSpeed,currentSpeed)
{
	maxSpeed = get MAX_SPEED;
	currentSpeed = 0;
	mASpdFactor = SPEEDUP_FACTOR;

	
	while(TRUE)
	{
		currentSpeed = get CURRENT_SPEED;
		mASpdFactor = SPEEDUP_FACTOR * currentSpeed / maxSpeed;

		//call-script lua_cobDebug(mASpdFactor);
		if ( mASpdFactor < 120 )
		{
			mASpdFactor = 120;
		}
		
		
		mAMoveSpd1 = [4.000000] * mASpdFactor / 100;
		mATurnSpd1 = <315.000000> * (100 + mASpdFactor) / 200;
		mATurnSpd2 = <200.000000> * (100 + mASpdFactor) / 200;
		mATurnSpd3 = <50.000000> * (100 + mASpdFactor) / 200;

		legAngle1 = <35.000000>;
		legAngle2 = <20.000000>;
		legAngle3 = <15.000000>;
		if ( mASpdFactor < SPEEDUP_FACTOR )
		{
			legAngle1 = legAngle1 * (SPEEDUP_FACTOR + mASpdFactor) / (2*SPEEDUP_FACTOR);
			legAngle2 = legAngle2 * (SPEEDUP_FACTOR + mASpdFactor) / (2*SPEEDUP_FACTOR);
			legAngle3 = legAngle3 * (SPEEDUP_FACTOR + mASpdFactor) / (2*SPEEDUP_FACTOR);
		}
		mADelay1 = 50;

		if(!bMoving)
		{
			mADelay1 = 50;
		}
		if ( mASpdFactor >= 50 AND bMoving  )
		{
			mADelay1 = mADelay1 * 100 / mASpdFactor;
		}
	
		sleep 30;
	}
}

walk()
{
	if( bMoving )
	{
		turn ground to x-axis <2.000000> speed <20.000000> * SPEEDUP_FACTOR / 100;
		//turn base to z-axis <-1.000000> speed <15.000000> * SPEEDUP_FACTOR / 100;

		turn leg6 to y-axis <20.000000> speed <100.967033> * SPEEDUP_FACTOR / 100;
		turn leg6 to z-axis <5.016484> speed <550.104396> * SPEEDUP_FACTOR / 100;

		turn leg5 to y-axis <-20.000000> speed <300.038462> * SPEEDUP_FACTOR / 100;
		turn leg5 to z-axis <-15.016484> speed <60.104396> * SPEEDUP_FACTOR / 100;

		turn leg4 to y-axis <45.060440> speed <120.038462> * SPEEDUP_FACTOR / 100;
		turn leg4 to z-axis <5.016484> speed <550.104396> * SPEEDUP_FACTOR / 100;
		
		turn leg3 to y-axis <40.412088> speed <300.060440> * SPEEDUP_FACTOR / 100;
		turn leg3 to z-axis <15.016484> speed <60.104396> * SPEEDUP_FACTOR / 100;
		
		turn leg2 to y-axis <-20.093407> speed <100.368132> * SPEEDUP_FACTOR / 100;
		turn leg2 to z-axis <-5.016484> speed <550.104396> * SPEEDUP_FACTOR / 100;
		
		turn leg1 to y-axis <15.137363> speed <300.681319> * SPEEDUP_FACTOR / 100;
		turn leg1 to z-axis <15.016484> speed <60.104396> * SPEEDUP_FACTOR / 100;
		
		
		sleep 175 * 100 / SPEEDUP_FACTOR;
	}

	// only vertical
	if( bMoving )
	{
		//turn leg6 to z-axis <-15.016484> speed <60.104396> * SPEEDUP_FACTOR / 100;

		turn leg5 to z-axis <5.016484> speed <150.104396> * SPEEDUP_FACTOR / 100;

		//turn leg4 to z-axis <-15.016484> speed <60.104396> * SPEEDUP_FACTOR / 100;

		turn leg3 to z-axis <-5.016484> speed <150.104396> * SPEEDUP_FACTOR / 100;
		
		//turn leg2 to z-axis <15.016484> speed <60.104396> * SPEEDUP_FACTOR / 100;
		
		turn leg1 to z-axis <-5.016484> speed <150.104396> * SPEEDUP_FACTOR / 100;
		
		sleep 175 * 100 / SPEEDUP_FACTOR;
	}
	
	
	if( bMoving )
	{
		turn ground to x-axis <-2.000000> speed <20.000000> * SPEEDUP_FACTOR / 100;
		//turn base to z-axis <1.000000> speed <15.000000> * SPEEDUP_FACTOR / 100;

		turn leg6 to y-axis <-40.000000> speed <300.967033> * SPEEDUP_FACTOR / 100;
		turn leg6 to z-axis <-15.016484> speed <60.104396> * SPEEDUP_FACTOR / 100;

		turn leg5 to y-axis <20.000000> speed <100.038462> * SPEEDUP_FACTOR / 100;
		turn leg5 to z-axis <5.016484> speed <550.104396> * SPEEDUP_FACTOR / 100;

		turn leg4 to y-axis <-15.060440> speed <300.038462> * SPEEDUP_FACTOR / 100;
		turn leg4 to z-axis <-15.016484> speed <60.104396> * SPEEDUP_FACTOR / 100;

		turn leg3 to y-axis <-20.412088> speed <100.060440> * SPEEDUP_FACTOR / 100;
		turn leg3 to z-axis <-5.016484> speed <550.104396> * SPEEDUP_FACTOR / 100;
		
		turn leg2 to y-axis <20.093407> speed <300.368132> * SPEEDUP_FACTOR / 100;
		turn leg2 to z-axis <15.016484> speed <60.104396> * SPEEDUP_FACTOR / 100;
		
		turn leg1 to y-axis <-45.137363> speed <120.681319> * SPEEDUP_FACTOR / 100;
		turn leg1 to z-axis <-5.016484> speed <550.104396> * SPEEDUP_FACTOR / 100;
		
		sleep 175 * 100 / SPEEDUP_FACTOR;
	}
	
	// only vertical
	if( bMoving )
	{

		turn leg6 to z-axis <5.016484> speed <150.104396> * SPEEDUP_FACTOR / 100;

		//turn leg5 to z-axis <-15.016484> speed <60.104396> * SPEEDUP_FACTOR / 100;

		turn leg4 to z-axis <5.016484> speed <150.104396> * SPEEDUP_FACTOR / 100;
		
		//turn leg3 to z-axis <15.016484> speed <60.104396> * SPEEDUP_FACTOR / 100;
		
		turn leg2 to z-axis <-5.016484> speed <150.104396> * SPEEDUP_FACTOR / 100;
		
		//turn leg1 to z-axis <15.016484> speed <60.104396> * SPEEDUP_FACTOR / 100;
		
		
		sleep 175 * 100 / SPEEDUP_FACTOR;
	}
	
}



stand()
{

	return (0);
}

open()
{
	if( !isOpen )
	{
		sleep 175;
		isOpen = TRUE;
	}
	
	sleep 30;
	return (0);
}

close()
{
	
	if( isOpen )
	{
		isOpen = FALSE;
		sleep 134;
	}
	sleep 30;
	return (0);
}

SmokeUnit(healthpercent, sleeptime, smoketype)
{
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 400;
	}
	while( TRUE )
	{
		healthpercent = get HEALTH;
		if( healthpercent < 66 )
		{
			smoketype = 256 | 2;
			if( Rand( 1, 66 ) < healthpercent )
			{
				smoketype = 256 | 1;
			}
			emit-sfx smoketype from torso;
		}
		sleeptime = healthpercent * 50;
		if( sleeptime < 200 )
		{
			sleeptime = 200;
		}
		sleep sleeptime;
	}
	return (0);
}

MotionControl(moving, justMoved)
{
	while( TRUE )
	{
		moving = bMoving;
		if( moving )
		{
			call-script walk();
			justmoved = TRUE;
		}
		if( !moving )
		{
			if( justMoved )
			{
				turn ground to z-axis <0.000000> speed <7.000000>;
				turn ground to x-axis <0.000000> speed <7.000000>;
				turn leg6 to y-axis <-25.000000> speed <237.000000>;
				turn leg6 to z-axis <0.000000> speed <237.000000>;
				turn leg5 to y-axis <0.000000> speed <237.000000>;
				turn leg5 to z-axis <0.000000> speed <237.000000>;
				turn leg4 to y-axis <0.000000> speed <237.000000>;
				turn leg4 to z-axis <0.000000> speed <237.000000>;
				turn leg1 to y-axis <0.000000> speed <237.000000>;
				turn leg1 to z-axis <0.000000> speed <237.000000>;
				turn leg2 to y-axis <0.000000> speed <237.000000>;
				turn leg2 to z-axis <0.000000> speed <237.000000>;
				turn leg3 to y-axis <25.000000> speed <237.000000>;
				turn leg3 to z-axis <0.000000> speed <237.000000>;
				if( !isBuilding )
				{
					turn torso to y-axis <0.000000> speed <200.000000>;
				}
				justMoved = FALSE;
			}
			sleep 100;
		}
	}
	return (0);
}
aimNanoTurret()
{
	turn torso to y-axis Static_Var_1 speed <480.038462>;
	wait-for-turn torso around y-axis;
	return (0);
}
Go()
{
	isBuilding = [1];
	call-script open();
	call-script aimNanoTurret();
	set INBUILDSTANCE to 1;
	return (0);
}

Stop()
{
	set INBUILDSTANCE to 0;
	turn torso to y-axis <0.000000> speed <480.000000>;
	wait-for-turn torso around y-axis;
	call-script close();
	isBuilding = [0];
	return (0);
}



Create()
{
	bMoving = FALSE;
	Static_Var_1 = 0;
	isBuilding = [0];
	isOpen = FALSE;
	nanoPt = [0];
	start-script MotionSpeedControl();
	start-script MotionControl();
	start-script SmokeUnit();
	start-script Build();
	return (0);
}

StartBuilding(Func_Var_1)
{
	signal SIG_BUILD;
	Static_Var_1 = Func_Var_1;
	start-script Go();
	isBuilding = [1];
	return (0);
}

StopBuilding()
{
	set INBUILDSTANCE to 0;
	set-signal-mask SIG_BUILD;
	isBuilding = [0];
	sleep DEFAULT_BUILDER_RESTORE_DELAY;
	start-script Stop();
	return (0);
}

StartMoving()
{
	bMoving = TRUE;
	return (0);
}

StopMoving()
{
	bMoving = FALSE;
	return (0);
}

QueryNanoPiece(piecenum)
{
	if ( nanoPt == [0])
	{
		piecenum = nanospray1;
		nanoPt = [1];
		return (0);
	}
	if ( nanoPt == [1])
	{
		piecenum = nanospray2;
		nanoPt = [0];
		return (0);
	}
}

TargetHeading(Func_Var_1)
{
	Static_Var_1 = 0 - Func_Var_1;
	return (0);
}

Killed(severity, corpsetype)
{
	if( severity <= 50 )
	{
		explode torso type SHATTER | EXPLODE_ON_HIT | BITMAP4;
		return (1);
	}
	explode torso type SHATTER | EXPLODE_ON_HIT | BITMAP4;
	explode leg1 type SHATTER | EXPLODE_ON_HIT | BITMAP4;
	explode leg2 type SHATTER | EXPLODE_ON_HIT | BITMAP4;
	explode leg6 type SHATTER | EXPLODE_ON_HIT | BITMAP4;
	explode wings type SHATTER | EXPLODE_ON_HIT | BITMAP4;
	return (2);
}
