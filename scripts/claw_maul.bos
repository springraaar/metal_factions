#define TA			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"

#define HEADING_TOLERANCE	<15>
#define PITCH_TOLERANCE		<15>

piece  base, turbase, turret, sleeve, lbsup, lbarrel, lflare, rbsup, rbarrel,rflare,wake1, wake2, hull, bottom, right, rbottom, left, lbottom;

static-var gun_1;

#include "aimhelper1.h"

// Signal definitions
#define SIG_MOVE			2
#define SIG_AIM				4


SmokeUnit(healthpercent, sleeptime, smoketype)
{
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 400;
	}
	while( TRUE )
	{
		healthpercent = get HEALTH;
		if( healthpercent < 66 )
		{
			smoketype = 256 | 2;
			if( Rand( 1, 66 ) < healthpercent )
			{
				smoketype = 256 | 1;
			}
			emit-sfx smoketype from base;
		}
		sleeptime = healthpercent * 50;
		if( sleeptime < 200 )
		{
			sleeptime = 200;
		}
		sleep sleeptime;
	}
	return (0);
}

RockUnit(anglex, anglez)
{
	turn base to x-axis anglex speed <30.005495>;
	turn base to z-axis <0>-anglez speed <30.005495>;
	wait-for-turn base around z-axis;
	wait-for-turn base around x-axis;
	turn base to z-axis <0.000000> speed <15.000000>;
	turn base to x-axis <0.000000> speed <15.000000>;
}

Create()
{
	gun_1=0;
	call-script stopAimHelper1(<1000>,<1000>);
	start-script SmokeUnit();
	return (0);
}

RestoreAfterDelay()
{
	sleep DEFAULT_WEAPON_RESTORE_DELAY;
	call-script stopAimHelper1(<70>,<70>);
	turn turret to y-axis <0.000000> speed <70.000000>;
	turn sleeve to x-axis <0.000000> speed <70.000000>;
	return (0);
}

StartMoving()
{
	signal SIG_MOVE;
	set-signal-mask SIG_MOVE;
	while( TRUE )
	{
		emit-sfx 2 from wake1;
		emit-sfx 2 from wake2;
		sleep 450;
	}
	return (0);
}

StopMoving()
{
	signal SIG_MOVE;
	return (0);
}

AimPrimary(heading, pitch)
{
	call-script updateAimHelper1(heading,pitch,<70>,<70>,HEADING_TOLERANCE,PITCH_TOLERANCE);
	signal SIG_AIM;
	set-signal-mask SIG_AIM;
	turn turret to y-axis heading speed <70.000000>;
	turn sleeve to x-axis <0.000000> - pitch speed <70.000000>;
	if (!aimReady1)
	{
		wait-for-turn turret around y-axis;
		wait-for-turn sleeve around x-axis;
	}
	start-script RestoreAfterDelay();
	return (1);
}

FirePrimary()
{
	if (gun_1 == 0) 
	{
		move lbarrel to z-axis [-6.000000] now;
		emit-sfx 1024+0 from lflare;
		sleep 100;
		move lbarrel to z-axis [0.000000] speed [8.000000];
		gun_1 = 1;	
		return (0);
	}
	if (gun_1 == 1) 
	{
		move rbarrel to z-axis [-6.000000] now;
		emit-sfx 1024+0 from rflare;
		sleep 100;
		move rbarrel to z-axis [0.000000] speed [8.000000];
		gun_1 = 0;	
		return (0);
	}
}

AimFromPrimary(piecenum)
{
	piecenum = turret;
	return (0);
}

QueryPrimary(piecenum)
{
	if (gun_1 == 0) 
	{
		piecenum = lflare;
		return (0);
	} else {
		piecenum = rflare;
		return (0);
	
	}
}



Killed(severity, corpsetype)
{
	if( severity <= 50 )
	{
		explode turret type SHATTER;
		explode lbsup type SHATTER;
		explode rbsup type SHATTER;
		return (1);
	}

	explode hull type SHATTER;
	explode left type SHATTER;
	explode right type SHATTER;
	explode lbottom type SHATTER;
	explode rbottom type SHATTER;
	explode turret type SHATTER;
	explode lbsup type SHATTER;
	explode rbsup type SHATTER;

	return (2);
}
