#define TA			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"

#define SPEEDUP_FACTOR 	80

piece  base, t1,t2,t3,t4,t1cover,t2cover,t3cover,t4cover,left,right,body, reactor,b3,b4,b5,p1,p2,p3;

static-var  restore_delay, gun_1, bMoving;

// Signal definitions
#define SIG_AIM				2


StartMoving()
{
 	bMoving = TRUE;
}

StopMoving()
{
 	bMoving = FALSE;
}

AnimateTracks(current,maxSpeed,currentSpeed, delay)
{
	maxSpeed = get MAX_SPEED;
	current = 0;
	
	while(TRUE)
	{
		currentSpeed = get CURRENT_SPEED;
		
		delay = 140;
		if ( currentSpeed > 0 AND bMoving )
		{
			delay = delay - ((currentSpeed * 100) / maxSpeed);
			
			if( current == 0 )
			{
				turn t1 to y-axis <180.000000> now;
				turn t2 to y-axis <180.000000> now;
				turn t3 to y-axis <180.000000> now;
				turn t4 to y-axis <180.000000> now;

			}
			if( current == 1 )
			{
				turn t1 to y-axis <0.000000> now;
				turn t2 to y-axis <0.000000> now;
				turn t3 to y-axis <0.000000> now;
				turn t4 to y-axis <0.000000> now;
			}
			
			current = current + 1;
			if( current == 2 )
			{
				current = 0;
			}
		}
		
		if( delay > 0)
		{
			sleep delay;
		}
		if( delay <= 0)
		{
			sleep 100;
		}
	}
}

SmokeUnit(healthpercent, sleeptime, smoketype)
{
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 400;
	}
	while( TRUE )
	{
		healthpercent = get HEALTH;
		if( healthpercent < 66 )
		{
			smoketype = 256 | 2;
			if( Rand( 1, 66 ) < healthpercent )
			{
				smoketype = 256 | 1;
			}
			emit-sfx smoketype from base;
		}
		sleeptime = healthpercent * 50;
		if( sleeptime < 200 )
		{
			sleeptime = 200;
		}
		sleep sleeptime;
	}
	return (0);
}



Create()
{
	start-script SmokeUnit();
	start-script AnimateTracks();
	return (0);
}

Killed(severity, corpsetype)
{
	if( severity <= 50 )
	{
		explode b3 type SHATTER | BITMAP1;
		explode b4 type SHATTER | BITMAP1;
		explode b5 type SHATTER | BITMAP1;
		return (1);
	}
	explode b3 type SHATTER | BITMAP1;
	explode b4 type SHATTER | BITMAP1;
	explode b5 type SHATTER | BITMAP1;
	explode left type SHATTER | BITMAP1;
	explode right type SHATTER | BITMAP1;
	explode p1 type SHATTER | BITMAP1;
	explode p2 type SHATTER | BITMAP1;
	explode p3 type SHATTER | BITMAP1;
	return (2);
}
