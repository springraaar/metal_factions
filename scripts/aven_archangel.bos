#define TA			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"

#define HEADING_TOLERANCE	<25>
#define PITCH_TOLERANCE		<35>

piece base,hull,center,c1,c2,c3,p1,p2,p3,d1,d2,d3,center2,front,back,flare1,flare2,flare3,lj1p,lj2p,rj1p,rj2p,ljb,rjb;

static-var   bAiming;

thrusterAngleControl(maxSpeed,currentSpeed,thrusterAngle) {
	while(TRUE) {
	
		maxSpeed = get MAX_SPEED;
		currentSpeed = get CURRENT_SPEED;
		
		thrusterAngle = currentSpeed * <30> / maxSpeed;
		if ( bAiming ) {
			thrusterAngle = <0>;
		}
	
		if (thrusterAngle > <-45> && thrusterAngle < <45>) {
			turn ljb to x-axis thrusterangle speed <20>;
			turn rjb to x-axis thrusterangle speed <20>;
		}
	
		sleep 50;
	}
}

weaponEffects() {
	while (TRUE) {
		if ((get WEAPON_RELOADSTATE(1)) < (get GAME_FRAME) + 20)) { 
			emit-sfx 1024+1 from flare1;
		}
		if ( (get WEAPON_RELOADSTATE(2)) < (get GAME_FRAME) + 20)) { 
			emit-sfx 1024+1 from flare2;
		}
		if ( (get WEAPON_RELOADSTATE(3)) < (get GAME_FRAME) + 20)) { 
			emit-sfx 1024+1 from flare3;
		}
		
		sleep 30;	
	}
}

SmokeUnit(healthpercent, sleeptime, smoketype){
	while( get BUILD_PERCENT_LEFT )	{
		sleep 400;
	}
	while( TRUE ) {
		healthpercent = get HEALTH;
		if( healthpercent < 66 )
		{
			smoketype = 256 | 2;
			if( Rand( 1, 66 ) < healthpercent ) {
				smoketype = 256 | 1;
			}
			emit-sfx smoketype from base;
		}
		sleeptime = healthpercent * 50;
		if( sleeptime < 200 ) {
			sleeptime = 200;
		}
		sleep sleeptime;
	}
	return (0);
}


Create() {
	bAiming = FALSE;
	turn lj1p to x-axis <-90.000000> now;
	turn lj2p to x-axis <-90.000000> now;
	turn rj1p to x-axis <-90.000000> now;	
	turn rj2p to x-axis <-90.000000> now;
	start-script thrusterAngleControl();
	start-script weaponEffects();
	start-script SmokeUnit();
}

Activate() {
	return(0);
}

Deactivate() {
	return(0);
}


FirePrimary() {
	emit-sfx 1024 + 0 from flare1;
}

QueryPrimary(piecenum) {
	piecenum = flare1;
}

AimFromPrimary(piecenum) {
	piecenum = base;
	return (0);
}

AimPrimary(heading, pitch) {
	return (1);
}


FireSecondary() {
	emit-sfx 1024 + 0 from flare2;
}

QuerySecondary(piecenum) {
	piecenum = flare2;
}

AimFromSecondary(piecenum) {
	piecenum = base;
	return (0);
}

AimSecondary(heading, pitch) {
	return (1);
}


FireTertiary() {
	emit-sfx 1024 + 0 from flare3;
}

QueryTertiary(piecenum) {
	piecenum = flare3;
}

AimFromTertiary(piecenum) {
	piecenum = base;
	return (0);
}

AimTertiary(heading, pitch) {
	return (1);
}

Killed(severity, corpsetype) {
	explode center type SHATTER | EXPLODE_ON_HIT | BITMAP1;
	explode center2 type SHATTER | EXPLODE_ON_HIT | BITMAP1;
	explode c1 type SHATTER | EXPLODE_ON_HIT | BITMAP1;
	explode c2 type SHATTER | EXPLODE_ON_HIT | BITMAP1;
	explode c3 type SHATTER | EXPLODE_ON_HIT | BITMAP1;
	return (3);
}
