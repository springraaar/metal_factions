#define TA			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"

#define SPEEDUP_FACTOR 90

#define HEADING_TOLERANCE	<25>
#define PITCH_TOLERANCE		<15>

piece  gp, hips, base2, front, back,lbackleg,lb2,rbackleg,rb2,rfrontleg,rf2,lfrontleg,lf2, turret, holder, sleeve, barrel1, flash1, barrel2, flash2;

static-var  bMoving, bAiming, isUnderWater, mASpdFactor,gun_1;

#include "aimhelper1.h"

// Signal definitions
#define SIG_AIM				2
#define SIG_MOVE			8

MotionSpeedControl(minSpeed, maxSpeed,currentSpeed)
{
	maxSpeed = get MAX_SPEED;
	currentSpeed = 0;
	mASpdFactor = SPEEDUP_FACTOR;
	minSpeed = 3 * SPEEDUP_FACTOR / 4;
	
	while(TRUE)
	{
		currentSpeed = get CURRENT_SPEED;
		mASpdFactor = SPEEDUP_FACTOR * currentSpeed / maxSpeed;

		if ( mASpdFactor < minSpeed )
		{
			mASpdFactor = minSpeed;
		}

		sleep 60;
	}
}


walk()
{
	if( bMoving )
	{
		
		turn hips to x-axis <1.000000> speed <5.000000> * mASpdFactor / 100;
		//turn hips to z-axis <-1.000000> speed <15.000000> * mASpdFactor / 100;
		move hips to z-axis [-1] speed [5] * mASpdFactor / 100;

		turn lfrontleg to y-axis <20.000000> speed <100.967033> * mASpdFactor / 100;
		turn lfrontleg to z-axis <3.016484> speed <550.104396> * mASpdFactor / 100;

		turn lbackleg to y-axis <-0.000000> speed <300.038462> * mASpdFactor / 100;
		turn lbackleg to z-axis <-15.016484> speed <60.104396> * mASpdFactor / 100;

		
		turn rfrontleg to y-axis <30.412088> speed <300.060440> * mASpdFactor / 100;
		turn rfrontleg to z-axis <15.016484> speed <60.104396> * mASpdFactor / 100;
		
		turn rbackleg to y-axis <-30.093407> speed <100.368132> * mASpdFactor / 100;
		turn rbackleg to z-axis <-3.016484> speed <550.104396> * mASpdFactor / 100;
		
		sleep 200 * 100 / mASpdFactor;
	}

	// only vertical
	if( bMoving )
	{
		turn hips to x-axis <-1.000000> speed <5.000000> * mASpdFactor / 100;
		move hips to z-axis [1] speed [5] * mASpdFactor / 100;
		turn lbackleg to z-axis <3.016484> speed <150.104396> * mASpdFactor / 100;
		turn rfrontleg to z-axis <-3.016484> speed <150.104396> * mASpdFactor / 100;
		
		sleep 150 * 100 / mASpdFactor;
	}
	
	
	if( bMoving )
	{
		turn hips to x-axis <1.000000> speed <5.000000> * mASpdFactor / 100;
		move hips to z-axis [-1] speed [5] * mASpdFactor / 100;
 		//turn hips to z-axis <1.000000> speed <15.000000> * mASpdFactor / 100;

		turn lfrontleg to y-axis <-30.000000> speed <300.967033> * mASpdFactor / 100;
		turn lfrontleg to z-axis <-15.016484> speed <60.104396> * mASpdFactor / 100;

		turn lbackleg to y-axis <30.000000> speed <100.038462> * mASpdFactor / 100;
		turn lbackleg to z-axis <3.016484> speed <550.104396> * mASpdFactor / 100;

		turn rfrontleg to y-axis <-20.412088> speed <100.060440> * mASpdFactor / 100;
		turn rfrontleg to z-axis <-3.016484> speed <550.104396> * mASpdFactor / 100;
		
		turn rbackleg to y-axis <00.093407> speed <300.368132> * mASpdFactor / 100;
		turn rbackleg to z-axis <15.016484> speed <60.104396> * mASpdFactor / 100;
		
		
		sleep 200 * 100 / mASpdFactor;
	}
	
	// only vertical
	if( bMoving )
	{
		turn hips to x-axis <-1.000000> speed <5.000000> * mASpdFactor / 100;
		move hips to z-axis [1] speed [5] * mASpdFactor / 100;
		turn lfrontleg to z-axis <3.016484> speed <150.104396> * mASpdFactor / 100;
		turn rbackleg to z-axis <-3.016484> speed <150.104396> * mASpdFactor / 100;
		
		
		sleep 150 * 100 / mASpdFactor;
	}
	
}



SmokeUnit(healthpercent, sleeptime, smoketype)
{
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 400;
	}
	while( TRUE )
	{
		healthpercent = get HEALTH;
		if( healthpercent < 66 )
		{
			smoketype = 256 | 2;
			if( Rand( 1, 66 ) < healthpercent )
			{
				smoketype = 256 | 1;
			}
			emit-sfx smoketype from turret;
		}
		sleeptime = healthpercent * 50;
		if( sleeptime < 200 )
		{
			sleeptime = 200;
		}
		sleep sleeptime;
	}
}

MotionControl(moving, aiming, justmoved)
{
	while( TRUE )
	{
		moving = bMoving;
		aiming = bAiming;
		if( moving )
		{
			justmoved = TRUE;
			call-script walk();
		}
		if( !moving )
		{
			if( justmoved )
			{
				turn lbackleg to x-axis <0.000000> speed <260.000000>;
				turn rbackleg to x-axis <0.000000> speed <260.000000>;
				turn rfrontleg to x-axis <0.000000> speed <260.000000>;
				turn lfrontleg to x-axis <0.000000> speed <260.000000>;
				turn lbackleg to y-axis <45.000000> speed <260.000000>;
				turn rbackleg to y-axis <-45.000000> speed <260.000000>;
				turn rfrontleg to y-axis <45.000000> speed <260.000000>;
				turn lfrontleg to y-axis <-45.000000> speed <260.000000>;
			
				turn lbackleg to z-axis <0.000000> speed <260.000000>;
				turn rbackleg to z-axis <0.000000> speed <260.000000>;
				turn rfrontleg to z-axis <0.000000> speed <260.000000>;
				turn lfrontleg to z-axis <0.000000> speed <260.000000>;
				turn hips to z-axis <0.000000> speed <260.000000>;
				turn hips to x-axis <0.000000> speed <260.000000>;
	
				move hips to x-axis [0.000000] speed [3.000000];
				move hips to z-axis [0.000000] speed [3.000000];


				justmoved = FALSE;
			}
			sleep 100;
		}
	}
}

Create()
{
	bMoving = FALSE;
	bAiming = FALSE;
	isUnderWater = FALSE;
	gun_1 = 0;
	call-script stopAimHelper1(<1000>,<1000>);
	start-script MotionSpeedControl();
	start-script MotionControl();
	start-script SmokeUnit();
}


StartMoving()
{
	bMoving = TRUE;
	signal SIG_MOVE;
	set-signal-mask SIG_MOVE;
	while( bMoving )
	{
		if( isUnderWater == TRUE )
		{
			//emit-sfx 256 | 3 from bleg;
			//emit-sfx 256 | 3 from bleg2;
			//emit-sfx 256 | 3 from bleg3;
			//emit-sfx 256 | 3 from bleg4;			
		}
		sleep 250;
	}
}

StopMoving()
{
	bMoving = FALSE;
	signal SIG_MOVE;
}


setSFXoccupy()
{
	isUnderWater = bMoving;
}


RestoreAfterDelay()
{
	sleep DEFAULT_WEAPON_RESTORE_DELAY;
	call-script stopAimHelper1(<90>,<90>);
	turn turret to y-axis <0.000000> speed <90.016484>;
	turn sleeve to x-axis <0.000000> speed <90.005495>;
	bAiming = FALSE;
}



AimFromPrimary(piecenum)
{
	piecenum = turret;
}

QueryPrimary(piecenum)
{
	if (gun_1 == 0) 
	{
		piecenum = flash1;
		return (0);
	}
	if (gun_1 == 1) 
	{
		piecenum = flash2;
		return (0);
	}

}

FirePrimary()
{
	if (gun_1 == 0) 
	{
		move barrel1 to z-axis [-3.500000] now;
		emit-sfx 1024 + 0 from flash1;
		sleep 150;
		gun_1=1;
		move barrel1 to z-axis [0.000000] speed [7.200000];
		return (0);
	}
	if (gun_1 == 1) 
	{
		move barrel2 to z-axis [-3.500000] now;
		emit-sfx 1024 + 0 from flash2;
		sleep 150;
		gun_1=0;
		move barrel2 to z-axis [0.000000] speed [7.200000];
		return (0);
	}
}

AimPrimary(heading, pitch)
{
	call-script updateAimHelper1(heading,pitch,<110>,<110>,HEADING_TOLERANCE,PITCH_TOLERANCE);
	signal SIG_AIM;
	set-signal-mask SIG_AIM;
	bAiming = TRUE;
	
	turn turret to y-axis heading speed <110.027473>;
	turn sleeve to x-axis <0.000000> - pitch speed <110.038462>;
	if (!aimReady1)
	{
		wait-for-turn turret around y-axis;
		wait-for-turn sleeve around x-axis;
	}
	start-script RestoreAfterDelay();
	return (1);
}



Killed(severity, corpsetype)
{
	if( severity <= 50 )
	{
		explode base2 type SHATTER;
		explode holder type SHATTER;
		explode sleeve type SHATTER;
		explode front type SHATTER;
		
		return (1);
	}
	explode base2 type SHATTER;
	explode holder type SHATTER;
	explode sleeve type SHATTER;
	explode front type SHATTER;
	explode barrel1 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
	explode barrel2 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
	explode sleeve type FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
	explode rfrontleg type  SHATTER;
	explode rbackleg type SHATTER;
	explode lfrontleg type SHATTER;
	explode lbackleg type SHATTER;
	return (2);
}
