#define TA			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"

#define SPEEDUP_FACTOR 	100

#define HEADING_TOLERANCE	<25>
#define PITCH_TOLERANCE		<15>


piece  base, flash, turret, sleeve, barrel,t1, t2,base2, t1cover,t2cover,ldoor1,ldoor2,rdoor1,rdoor2,lflare,rflare,barmor;

static-var  gun_2,lastFiredWeapon;


#include "aimhelper1.h"

// Signal definitions
#define SIG_AIM				2

#include "tankthreads.h"

SmokeUnit(healthpercent, sleeptime, smoketype) {
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 400;
	}
	while( TRUE )
	{
		healthpercent = get HEALTH;
		if( healthpercent < 66 )
		{
			smoketype = 256 | 2;
			if( Rand( 1, 66 ) < healthpercent )
			{
				smoketype = 256 | 1;
			}
			emit-sfx smoketype from base;
		}
		sleeptime = healthpercent * 50;
		if( sleeptime < 200 )
		{
			sleeptime = 200;
		}
		sleep sleeptime;
	}
}


RockUnit(anglex, anglez) {
	if (lastFiredWeapon == 1) {
		anglex = anglex * 100/200;
		anglez = anglez * 100/200;
		turn base to x-axis anglex speed <40.005495>;
		turn base to z-axis <0>-anglez speed <40.005495>;
		wait-for-turn base around z-axis;
		wait-for-turn base around x-axis;
		turn base to z-axis <0.000000> speed <15.000000>;
		turn base to x-axis <0.000000> speed <15.000000>;
	}
}

Create() {
	gun_2 = 0;
	lastFiredWeapon = 0;
	call-script stopAimHelper1(<1000>,<1000>);
	start-script SmokeUnit();
	start-script AnimateTracks();
}


RestoreAfterDelay() {
	sleep DEFAULT_WEAPON_RESTORE_DELAY;
	call-script stopAimHelper1(<100>,<100>);
	turn turret to y-axis <0.000000> speed <100.016484>;
	turn sleeve to x-axis <0.000000> speed <100.005495>;
}

AimPrimary(heading, pitch) {
	call-script updateAimHelper1(heading,pitch,<160>,<160>,HEADING_TOLERANCE,PITCH_TOLERANCE);
	signal SIG_AIM;
	set-signal-mask SIG_AIM;
	turn turret to y-axis heading speed <160.038462>;
	turn sleeve to x-axis <0.000000> - pitch speed <160.000000>;
	if (!aimReady1) {
		wait-for-turn turret around y-axis;
		wait-for-turn sleeve around x-axis;
	}
	start-script RestoreAfterDelay();
	return (1);
}

FirePrimary() {
	lastFiredWeapon = 1;
	move barrel to z-axis [-4.000000] now;
	emit-sfx 1024 from flash;
	sleep 150;
	move barrel to z-axis [0.000000] speed [4.000000];
}

AimFromPrimary(piecenum) {
	piecenum = turret;
}

QueryPrimary(piecenum) {
	piecenum = flash;
}


AimSecondary(heading, pitch, canFire) {
	return (1);
}

Shot2() {
	lastFiredWeapon = 2;
	if (gun_2 == 0) {
		move ldoor1 to y-axis [-1.5] now;
		move ldoor2 to y-axis [1.5] now;
		emit-sfx 1024+1 from lflare;
		sleep 100;
		gun_2 = 1;
		sleep 500;
		move ldoor1 to y-axis [0] speed [5];
		move ldoor2 to y-axis [0] speed [5];
	} else {
		move rdoor1 to y-axis [-1.5] now;
		move rdoor2 to y-axis [1.5] now;
		emit-sfx 1024+1 from rflare;
		sleep 100;
		gun_2 = 0;
		sleep 500;
		move rdoor1 to y-axis [0] speed [5];
		move rdoor2 to y-axis [0] speed [5];	
	}
	
	return (0);
}


AimFromSecondary(piecenum) {
	piecenum = barmor;
	return (0);
}

QuerySecondary(piecenum) {
	if (gun_2 == 0) {
		piecenum = lflare;
	} else {
		piecenum = rflare;
	}	
	return (0);
}


Killed(severity, corpsetype) {
	if( severity <= 50 ) {
		explode barrel type SHATTER;
		explode sleeve type SHATTER;
		explode turret type SHATTER;
		return (1);
	}
	
	explode t1cover type SHATTER;
	explode t2cover type SHATTER;
	explode barrel type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
	explode sleeve type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
	explode base type BITMAPONLY | BITMAP2;
	explode flash type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
	explode turret type SHATTER | EXPLODE_ON_HIT | BITMAP4;
	return (2);
}