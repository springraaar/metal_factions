#define TA			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"

#define SPEEDUP_FACTOR 175

piece  GP, base, legs,lfrontleg, lmidleg,rmidleg, rfrontleg,lbackleg,rbackleg, rmid2, rback2, lback2,rfront2,lmid2,lfront2,body,sphere,sphere2, turret1,turret2,turret3, turret4 ,mispt1,mispt2,mispt3, mispt4, hole1,hole2,hole3, hole4, front, f2, f3, jammerbase, spinner, shieldpt;

static-var  bMoving,bAiming, restore_delay, nanopiece, justmoved, gun_1, mASpdFactor;

// Signal definitions
#define SIG_AIM				2


MotionSpeedControl(minSpeed, maxSpeed,currentSpeed)
{
	maxSpeed = get MAX_SPEED;
	currentSpeed = 0;
	mASpdFactor = SPEEDUP_FACTOR;
	minSpeed = SPEEDUP_FACTOR * 100/140;
	
	while(TRUE)
	{
		currentSpeed = get CURRENT_SPEED;
		mASpdFactor = SPEEDUP_FACTOR * currentSpeed / maxSpeed;

		if ( mASpdFactor < minSpeed )
		{
			mASpdFactor = minSpeed;
		}

		sleep 60;
	}
}


SmokeUnit(healthpercent, sleeptime, smoketype)
{
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 400;
	}
	while( TRUE )
	{
		healthpercent = get HEALTH;
		if( healthpercent < 66 )
		{
			smoketype = 256 | 2;
			if( Rand( 1, 66 ) < healthpercent )
			{
				smoketype = 256 | 1;
			}
			emit-sfx smoketype from base;
		}
		sleeptime = healthpercent * 50;
		if( sleeptime < 200 )
		{
			sleeptime = 200;
		}
		sleep sleeptime;
	}
}



walk()
{
	if( bMoving )
	{
		turn rmid2 to z-axis <0.000000> speed <80.000000> * mASpdFactor / 100;
		turn lmid2 to z-axis <0.000000> speed <80.000000> * mASpdFactor / 100;
		
		turn base to x-axis <2.000000> speed <16.000000> * mASpdFactor / 100;
		turn base to z-axis <0.000000> speed <10.000000> * mASpdFactor / 100;

		turn lfrontleg to y-axis <20.000000> speed <100.967033> * mASpdFactor / 100;
		turn lfrontleg to z-axis <5.016484> speed <550.104396> * mASpdFactor / 100;

		turn lmidleg to y-axis <-20.000000> speed <300.038462> * mASpdFactor / 100;
		turn lmidleg to z-axis <-15.016484> speed <60.104396> * mASpdFactor / 100;

		turn lbackleg to y-axis <45.060440> speed <120.038462> * mASpdFactor / 100;
		turn lbackleg to z-axis <5.016484> speed <550.104396> * mASpdFactor / 100;
		
		turn rfrontleg to y-axis <40.412088> speed <300.060440> * mASpdFactor / 100;
		turn rfrontleg to z-axis <15.016484> speed <60.104396> * mASpdFactor / 100;
		
		turn rmidleg to y-axis <-20.093407> speed <100.368132> * mASpdFactor / 100;
		turn rmidleg to z-axis <-5.016484> speed <550.104396> * mASpdFactor / 100;
		
		turn rbackleg to y-axis <15.137363> speed <300.681319> * mASpdFactor / 100;
		turn rbackleg to z-axis <15.016484> speed <60.104396> * mASpdFactor / 100;
		
		
		sleep 200 * 100 / mASpdFactor;
	}

	// only vertical
	if( bMoving )
	{
		//turn lfrontleg to z-axis <-15.016484> speed <60.104396> * mASpdFactor / 100;
		turn base to x-axis <-2.000000> speed <16.000000> * mASpdFactor / 100;
		turn base to z-axis <1.000000> speed <10.000000> * mASpdFactor / 100;

		turn lmidleg to z-axis <5.016484> speed <150.104396> * mASpdFactor / 100;

		//turn lbackleg to z-axis <-15.016484> speed <60.104396> * mASpdFactor / 100;

		turn rfrontleg to z-axis <-5.016484> speed <150.104396> * mASpdFactor / 100;
		
		//turn rmidleg to z-axis <15.016484> speed <60.104396> * mASpdFactor / 100;
		
		turn rbackleg to z-axis <-5.016484> speed <150.104396> * mASpdFactor / 100;
		
		sleep 200 * 100 / mASpdFactor;
	}
	
	
	if( bMoving )
	{
		turn base to x-axis <2.000000> speed <16.000000> * mASpdFactor / 100;
		turn base to z-axis <0.000000> speed <10.000000> * mASpdFactor / 100;

		turn lfrontleg to y-axis <-40.000000> speed <300.967033> * mASpdFactor / 100;
		turn lfrontleg to z-axis <-15.016484> speed <60.104396> * mASpdFactor / 100;

		turn lmidleg to y-axis <20.000000> speed <100.038462> * mASpdFactor / 100;
		turn lmidleg to z-axis <5.016484> speed <550.104396> * mASpdFactor / 100;

		turn lbackleg to y-axis <-15.060440> speed <300.038462> * mASpdFactor / 100;
		turn lbackleg to z-axis <-15.016484> speed <60.104396> * mASpdFactor / 100;

		turn rfrontleg to y-axis <-20.412088> speed <100.060440> * mASpdFactor / 100;
		turn rfrontleg to z-axis <-5.016484> speed <550.104396> * mASpdFactor / 100;
		
		turn rmidleg to y-axis <20.093407> speed <300.368132> * mASpdFactor / 100;
		turn rmidleg to z-axis <15.016484> speed <60.104396> * mASpdFactor / 100;
		
		turn rbackleg to y-axis <-45.137363> speed <120.681319> * mASpdFactor / 100;
		turn rbackleg to z-axis <-5.016484> speed <550.104396> * mASpdFactor / 100;
		
		sleep 200 * 100 / mASpdFactor;
	}
	
	// only vertical
	if( bMoving )
	{
		turn base to x-axis <-2.000000> speed <16.000000> * mASpdFactor / 100;
		turn base to z-axis <-1.000000> speed <10.000000> * mASpdFactor / 100;

		turn rmid2 to z-axis <0.000000> speed <80.000000> * mASpdFactor / 100;
		turn lmid2 to z-axis <0.000000> speed <80.000000> * mASpdFactor / 100;

		turn lfrontleg to z-axis <5.016484> speed <150.104396> * mASpdFactor / 100;

		//turn lmidleg to z-axis <-15.016484> speed <60.104396> * mASpdFactor / 100;

		turn lbackleg to z-axis <5.016484> speed <150.104396> * mASpdFactor / 100;
		
		//turn rfrontleg to z-axis <15.016484> speed <60.104396> * mASpdFactor / 100;
		
		turn rmidleg to z-axis <-5.016484> speed <150.104396> * mASpdFactor / 100;
		
		//turn rbackleg to z-axis <15.016484> speed <60.104396> * mASpdFactor / 100;
		
		
		sleep 200 * 100 / mASpdFactor;
	}
	
}


Stop()
{
	turn base to z-axis <0.000000> speed <7.000000>;
	turn base to x-axis <0.000000> speed <7.000000>;
	turn lfrontleg to y-axis <0.000000> speed <237.000000>;
	turn lfrontleg to z-axis <0.000000> speed <237.000000>;
	turn lmidleg to y-axis <0.000000> speed <237.000000>;
	turn lmidleg to z-axis <0.000000> speed <237.000000>;
	turn lbackleg to y-axis <0.000000> speed <237.000000>;
	turn lbackleg to z-axis <0.000000> speed <237.000000>;
	turn rbackleg to y-axis <0.000000> speed <237.000000>;
	turn rbackleg to z-axis <0.000000> speed <237.000000>;
	turn rmidleg to y-axis <0.000000> speed <237.000000>;
	turn rmidleg to z-axis <0.000000> speed <237.000000>;
	turn rfrontleg to y-axis <0.000000> speed <237.000000>;
	turn rfrontleg to z-axis <0.000000> speed <237.000000>;
	turn lbackleg to y-axis <20.000000> speed <300.000000>;
	turn rbackleg to y-axis <-20.000000> speed <300.000000>;
	turn rfrontleg to y-axis <30.000000> speed <300.000000>;
	turn lfrontleg to y-axis <-30.000000> speed <300.000000>;

}

Open()
{
	turn turret1 to z-axis <0.000000> speed <100.000000>;
	turn turret2 to z-axis <0.000000> speed <100.000000>;
	turn turret3 to z-axis <0.000000> speed <100.000000>;
	turn turret4 to z-axis <0.000000> speed <100.000000>;

	turn turret1 to x-axis <0.000000> speed <44.000000>;
	turn turret2 to x-axis <0.000000> speed <44.000000>;
	turn turret3 to x-axis <0.000000> speed <44.000000>;
	turn turret4 to x-axis <0.000000> speed <44.000000>;
	
	wait-for-turn turret1 around z-axis;
	wait-for-turn turret2 around z-axis;
	wait-for-turn turret3 around z-axis;
	wait-for-turn turret4 around z-axis;
	
	wait-for-turn turret1 around x-axis;
	wait-for-turn turret2 around x-axis;
	wait-for-turn turret3 around x-axis;
	wait-for-turn turret4 around x-axis;
}

Close()
{
	set-signal-mask SIG_AIM;
	turn turret1 to z-axis <-30.000000> speed <100.000000>;
	turn turret2 to z-axis <-30.000000> speed <100.000000>;
	turn turret3 to z-axis <30.000000> speed <100.000000>;
	turn turret4 to z-axis <30.000000> speed <100.000000>;

	turn turret1 to x-axis <-13.000000> speed <44.000000>;
	turn turret2 to x-axis <13.000000> speed <44.000000>;
	turn turret3 to x-axis <13.000000> speed <44.000000>;
	turn turret4 to x-axis <-13.000000> speed <44.000000>;
}



MotionControl()
{
	while( TRUE )
	{
		if( bMoving )
		{
			justmoved=TRUE;
			call-script walk();
		}
		if( !bMoving )
		{
			if(justmoved)
			{
				call-script Stop();
				justmoved=FALSE;
			}
			sleep 100;
		}
	}
}

Activate()
{
	spin spinner around y-axis speed <360.021978>;
	return (0);
}

Deactivate()
{
	spin spinner around y-axis speed <0.000000>;
	return (0);
}



StartMoving()
{
	bMoving = TRUE;
}

StopMoving()
{
	bMoving = FALSE;
}

Create()
{
	
	bMoving = FALSE;
	justmoved = FALSE;
	gun_1 = [0];
	start-script Close();
	start-script MotionSpeedControl();
	start-script MotionControl();
	start-script SmokeUnit();
	
}

RestoreAfterDelay()
{
	sleep DEFAULT_WEAPON_RESTORE_DELAY;
	call-script Close();
}



AimPrimary()
{
	signal SIG_AIM;
	set-signal-mask SIG_AIM;
	call-script Open();
	
	start-script RestoreAfterDelay();
	return (1);
}

FirePrimary()
{
	if (gun_1 == [0])
	{
		emit-sfx 1024 from mispt1;
		sleep 50;
		gun_1 = [1];
		return (0);
	}
	if (gun_1 == [1])
	{
		emit-sfx 1024 from mispt2;
		sleep 50;
		gun_1 = [2];
		return (0);
	}
	if (gun_1 == [2])
	{
		emit-sfx 1024 from mispt3;
		sleep 50;
		gun_1 = [3];
		return (0);
	}
	if (gun_1 == [3])
	{
		emit-sfx 1024 from mispt4;
		sleep 50;
		gun_1 = [0];
		return (0);
	}
}

AimFromPrimary(piecenum)
{
	if(gun_1 == [0])
	{
		piecenum = turret1;
		return 0;
	}
	if(gun_1 == [1])
	{
		piecenum = turret2;
		return 0;
	}
	if(gun_1 == [2])
	{
		piecenum = turret3;
		return 0;
	}
	if(gun_1 == [3])
	{
		piecenum = turret4;
		return 0;
	}
}

QueryPrimary(piecenum)
{
	if(gun_1 == [0])
	{
		piecenum = mispt1;
		return 0;
	}
	if(gun_1 == [1])
	{
		piecenum = mispt2;
		return 0;
	}
	if(gun_1 == [2])
	{
		piecenum = mispt3;
		return 0;
	}
	if(gun_1 == [3])
	{
		piecenum = mispt4;
		return 0;
	}
}

AimFromSecondary(piecenum)
{
	piecenum=shieldpt;
	return 0;
}

QuerySecondary(piecenum)
{
	piecenum=shieldpt;
	return 0;
}

AimSecondary(heading, pitch)
{
	return (1);
}

SweetSpot(piecenum)
{
	piecenum = body;
}

Killed(severity, corpsetype)
{
	if( severity <= 25 )
	{
		corpsetype = 1;
		explode base type BITMAPONLY | BITMAP1;
		explode turret1 type BITMAPONLY | BITMAP3;
		explode front type SHATTER | BITMAP2;
		explode spinner type SHATTER | BITMAP2;
		return (0);
	}
	if( severity <= 50 )
	{
		corpsetype = 2;
		explode base type BITMAPONLY | BITMAP1;
		explode turret1 type FALL | BITMAP3;
		explode front type SHATTER | BITMAP2;
		explode spinner type SHATTER | BITMAP2;
		return (0);
	}
	if( severity <= 99 )
	{
		corpsetype = 3;
		explode base type BITMAPONLY | BITMAP1;
		explode turret1 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
		explode front type SHATTER | BITMAP2;
		explode spinner type SHATTER | BITMAP2;

		return (0);
	}
	corpsetype = 3;
	explode base type BITMAPONLY | BITMAP1;
	explode turret1 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
	explode front type SHATTER | BITMAP2;
	explode spinner type SHATTER | BITMAP2;
}
