#define TA			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"

#define HEADING_TOLERANCE	<25>
#define PITCH_TOLERANCE		<20>

piece  base, hull, bottom, h2,turret, sleeve, flare, turret2, sleeve2, flare2, wake1, wake2, depthcharge, mbdoor1,mbdoor2,mflare;


// Signal definitions
#define SIG_MOVE			2
#define SIG_AIM				4
#define SIG_AIM2			8

lua_checkAllowFiring() { return 0; }
lua_checkLockTarget() { return 0; }



SmokeUnit(healthpercent, sleeptime, smoketype) {
	while( get BUILD_PERCENT_LEFT )	{
		sleep 400;
	}
	while( TRUE ) {
		healthpercent = get HEALTH;
		if( healthpercent < 66 )
		{
			smoketype = 256 | 2;
			if( Rand( 1, 66 ) < healthpercent ) {
				smoketype = 256 | 1;
			}
			emit-sfx smoketype from base;
		}
		sleeptime = healthpercent * 50;
		if( sleeptime < 200 ) {
			sleeptime = 200;
		}
		sleep sleeptime;
	}
	return (0);
}

Create() {
	start-script SmokeUnit();
	return (0);
}


StartMoving() {
	signal SIG_MOVE;
	set-signal-mask SIG_MOVE;
	while( TRUE ) {
		emit-sfx 2 from wake1;
		emit-sfx 2 from wake2;
		sleep 450;
	}
	return (0);
}

StopMoving() {
	signal SIG_MOVE;
	return (0);
}

AimPrimary(heading, pitch, canFire) {
	signal SIG_AIM;
	set-signal-mask SIG_AIM;

	// overkill prevention check
	canFire = (get GAME_FRAME) - (get WEAPON_RELOADSTATE(1)) > 0;
	if (canFire) {
		call-script lua_checkAllowFiring(1,(get TARGET_ID(1)));
		canFire = get LUA1;
	}
	if (!canFire) {
		return (0);
	}
	return (1);
}

FirePrimary() {
	call-script lua_checkLockTarget(get TARGET_ID(1));
	move mbdoor1 to x-axis [-3] now;
	move mbdoor2 to x-axis [3] now;
	emit-sfx 1024+0 from mflare;
	sleep 2000;
	move mbdoor1 to x-axis [0] speed [5];
	move mbdoor2 to x-axis [0] speed [5];
	return (0);
}


AimFromPrimary(piecenum) {
	piecenum = mflare;
	return (0);
}

QueryPrimary(piecenum) {
	piecenum = mflare;
	return (0);
}

AimSecondary(heading, pitch) {
	signal SIG_AIM2;
	set-signal-mask SIG_AIM2;
	turn turret to y-axis heading now;
	turn sleeve to x-axis <0.000000> - pitch now;
	return (1);
}


FireSecondary() {
	emit-sfx 1024 + 1 from flare;
	return (0);
}

QuerySecondary(piecenum) {
	piecenum = flare;
	return (0);
}

AimFromSecondary(piecenum) {
	piecenum = turret;
}


AimTertiary(heading, pitch) {
	turn turret2 to y-axis heading now;
	turn sleeve2 to x-axis <0.000000> - pitch now;
	return (1);
}

FireTertiary() {
	emit-sfx 1024 + 1 from flare2;
	return (0);
}

QueryTertiary(piecenum) {
	piecenum = flare2;
	return (0);
}

AimFromTertiary(piecenum) {
	piecenum = turret;
}

Killed(severity, corpsetype) {
	if( severity <= 50 ) {
		return (1);
	}
	explode hull type SHATTER;
	explode bottom type SHATTER;
	explode turret type SHATTER;
	explode h2 type SHATTER;
	return (2);
}
