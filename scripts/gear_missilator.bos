#define TA			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"

piece  base, stand, logo1, logo2, ldoor, rdoor, turret, llauncher, rlauncher, lgun1, rgun1, lfirept1, rfirept1, tlogo, aimpt, floatbase;

static-var gun_1, isOpen, isFloating;

// Signal definitions
#define SIG_AIM				2

lua_stopFiring() { return 0; }
lua_checkAllowFiring() { return 0; }
lua_checkLockTarget() { return 0; }
lua_checkIncomingMissile() { return 0; }

SmokeUnit(healthpercent, sleeptime, smoketype)
{
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 400;
	}
	while( TRUE )
	{
		healthpercent = get HEALTH;
		if( healthpercent < 66 )
		{
			smoketype = 256 | 2;
			if( Rand( 1, 66 ) < healthpercent )
			{
				smoketype = 256 | 1;
			}
			emit-sfx smoketype from base;
		}
		sleeptime = healthpercent * 50;
		if( sleeptime < 200 )
		{
			sleeptime = 200;
		}
		sleep sleeptime;
	}
	return (0);
}


open()
{
	set ARMORED to 0;
	turn rdoor to z-axis <-90.000000> speed <450.000000>;
	turn ldoor to z-axis <90.000000> speed <450.000000>;
	wait-for-turn ldoor around z-axis;
	move rdoor to y-axis  [-23.000000] speed [170.000000];
	move ldoor to y-axis  [-23.000000] speed [170.000000];
	wait-for-move ldoor along y-axis;
	move stand to y-axis [40.000000] speed [180.000000];
	wait-for-move stand along y-axis;
	isOpen = TRUE;
	return (0);
}

close()
{
	isOpen = FALSE;
	turn turret to y-axis <0> speed <300.000000>;
	turn llauncher to x-axis <0> speed <300.000000>;
	turn rlauncher to x-axis <0> speed <300.000000>;
	wait-for-turn turret around y-axis;
	wait-for-turn llauncher around x-axis;

	move stand to y-axis [0.000000] speed [80.000000];
	wait-for-move stand along y-axis;

	move rdoor to y-axis  [0.000000] speed [40.000000];
	move ldoor to y-axis  [0.000000] speed [40.000000];
	wait-for-move ldoor along y-axis;

	turn rdoor to z-axis <0.000000> speed <180.000000>;
	turn ldoor to z-axis <0.000000> speed <180.000000>;
	wait-for-turn ldoor around z-axis;
	
	set ARMORED to 1;
	return (0);
}

RestoreAfterDelay()
{
	if((get STANDINGFIREORDERS) > 0)
	{
		sleep DEFAULT_WEAPON_RESTORE_DELAY;
	} 
	else 
	{
		sleep 600;
	}
	turn turret to y-axis <0.000000> speed <300.000000>;
	turn llauncher to x-axis <0.000000> speed <300.000000>;
	turn rlauncher to x-axis <0.000000> speed <300.000000>;
	call-script close();
	return (0);
}

// if fire state changes to hold fire, force closure
checkClose(fireState,previousFireState)
{
	while (TRUE)
	{
		fireState = (get STANDINGFIREORDERS);
		
		if (fireState == 0 && previousFireState > 0) 
		{
			signal SIG_AIM;
			call-script lua_stopFiring();
			call-script RestoreAfterDelay();
		}
	
		previousFireState = fireState;
		sleep 100;
	}
}


AimPrimary(heading, pitch, canFire)
{
	signal SIG_AIM;
	set-signal-mask SIG_AIM;
	if(!isOpen)
	{
		call-script open();
	}
	
	turn turret to y-axis heading speed <300.071429>;
	turn llauncher to x-axis <0.000000> - pitch speed <300.038462>;
	turn rlauncher to x-axis <0.000000> - pitch speed <300.038462>;
	wait-for-turn turret around y-axis;
	wait-for-turn llauncher around x-axis;
	start-script RestoreAfterDelay();
	
	// overkill prevention check
	canFire = (get GAME_FRAME) - (get WEAPON_RELOADSTATE(1)) > 0;
	if (canFire) {
		call-script lua_checkAllowFiring(1,(get TARGET_ID(1)));
		canFire = get LUA1;
	}
	if (!canFire) {
		return (0);
	}
	return (1);
}

checkIncomingMissile(fireState, needToOpen) {
	needToOpen = FALSE;
	while (TRUE) {
		fireState = (get STANDINGFIREORDERS);
		
		if (fireState > 0) {
			call-script lua_checkIncomingMissile(1900);
			needToOpen = get LUA1;
			if (needToOpen == 1) {
				start-script AimPrimary(<0>,<0>);
				sleep DEFAULT_WEAPON_RESTORE_DELAY;
			}
		}
		sleep 500;
	}
}

Create()
{
	hide floatbase;
	isFloating = FALSE;
	if ( GET GROUND_WATER_HEIGHT(GET UNIT_XZ) < [0])
	{
		isFloating = TRUE;
		show floatbase;
		move base to y-axis [2] now;
	}
	
	move aimpt to y-axis [40.000000] now;
	isOpen = FALSE;
	gun_1 = [0];
	
	
	start-script close();
	start-script SmokeUnit();
	start-script checkClose();
	start-script checkIncomingMissile();
	return (0);
}

QueryPrimary(piecenum)
{
	if( gun_1 == [0] )
	{
		piecenum = lfirept1;
	}
	if( gun_1 == [1] )
	{
		piecenum = rfirept1;
	}
	return (0);		
}

Shot1()
{
	call-script lua_checkLockTarget(get TARGET_ID(1));
	if( gun_1 == [0])
	{
		emit-sfx 1024 from lfirept1;
		sleep 50;
		gun_1 = [1];
		return (0);
	}
	if( gun_1 == [1])
	{
		emit-sfx 1024 from rfirept1;
		sleep 50;
		gun_1 = [0];
		return (0);
	}
}

AimFromPrimary(piecenum)
{
	piecenum = aimpt;
	return (0);
}


SweetSpot(piecenum)
{
	piecenum = turret;
	return (0);
}

Killed(severity, corpsetype)
{
	if( severity <= 50 )
	{
		if (isFloating) 
		{
			corpsetype = 1;
		}
		if (!isFloating) 
		{
			corpsetype = 2;
		}
		explode turret type SHATTER;
		explode llauncher type SHATTER;
		explode rlauncher type SHATTER;
		return corpsetype;
	}

	explode base type SHATTER;
	explode ldoor type SHATTER;
	explode rdoor type SHATTER;
	explode stand type SHATTER;
	explode turret type SHATTER;
	explode tlogo type SHATTER;
	explode llauncher type SHATTER;
	explode rlauncher type SHATTER;
	return (3);
}
