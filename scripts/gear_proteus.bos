#define TA			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"

#define SPEEDUP_FACTOR 140

#define HEADING_TOLERANCE	<25>
#define PITCH_TOLERANCE		<15>

piece  base, flare1, flare2, wake1, wake2, turret, sleeve, support, hull, h1,h2,h3,h4,bottom, rmidsup,rmidleg,rmid2,rfrontsup,rfrontleg,rfront2,rbacksup,rbackleg,rback2,lbacksup,lbackleg,lback2,lmidsup,lmidleg,lmid2,lfrontsup,lfrontleg,lfront2, barrel1, barrel2, turret2, sleeve2, rgunbase, lgunbase, rgun1, rgun2, rfirept1, rfirept2, lgun1, lgun2, lfirept1, lfirept2;

static-var  bMoving, bAiming, bSwimming, gun_1, gun_2,
            restore_delay, terrainStatus, Static_Var_8, waterSpeed, landSpeed;


#include "aimhelper1.h"
#include "aimhelper2.h"

// Signal definitions
#define SIG_MOVE			2
#define SIG_AIM				4
#define SIG_AIM_2			8

SmokeUnit(healthpercent, sleeptime, smoketype)
{
	var Func_Var_4;
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 400;
	}
	while( TRUE )
	{
		healthpercent = get HEALTH;
		if( healthpercent < 66 )
		{
			smoketype = 256 | 2;
			if( Rand( 1, 66 ) < healthpercent )
			{
				smoketype = 256 | 1;
			}
			emit-sfx smoketype from hull;
		}
		sleeptime = healthpercent * 50;
		if( sleeptime < 200 )
		{
			sleeptime = 200;
		}
		sleep sleeptime;
	}
	return (0);
}

walk()
{
	if( bMoving )
	{
		turn rmid2 to z-axis <0.000000> speed <80.000000> * SPEEDUP_FACTOR / 100;
		turn lmid2 to z-axis <0.000000> speed <80.000000> * SPEEDUP_FACTOR / 100;
		
		turn base to z-axis <-1.000000> speed <10.000000> * SPEEDUP_FACTOR / 100;

		turn lfrontleg to y-axis <20.000000> speed <100.967033> * SPEEDUP_FACTOR / 100;
		turn lfrontleg to z-axis <5.016484> speed <550.104396> * SPEEDUP_FACTOR / 100;

		turn lmidleg to y-axis <-20.000000> speed <300.038462> * SPEEDUP_FACTOR / 100;
		turn lmidleg to z-axis <-15.016484> speed <60.104396> * SPEEDUP_FACTOR / 100;

		turn lbackleg to y-axis <45.060440> speed <120.038462> * SPEEDUP_FACTOR / 100;
		turn lbackleg to z-axis <5.016484> speed <550.104396> * SPEEDUP_FACTOR / 100;
		
		turn rfrontleg to y-axis <40.412088> speed <300.060440> * SPEEDUP_FACTOR / 100;
		turn rfrontleg to z-axis <15.016484> speed <60.104396> * SPEEDUP_FACTOR / 100;
		
		turn rmidleg to y-axis <-20.093407> speed <100.368132> * SPEEDUP_FACTOR / 100;
		turn rmidleg to z-axis <-5.016484> speed <550.104396> * SPEEDUP_FACTOR / 100;
		
		turn rbackleg to y-axis <15.137363> speed <300.681319> * SPEEDUP_FACTOR / 100;
		turn rbackleg to z-axis <15.016484> speed <60.104396> * SPEEDUP_FACTOR / 100;
		
		
		sleep 200 * 100 / SPEEDUP_FACTOR;
	}

	// only vertical
	if( bMoving )
	{
		//turn lfrontleg to z-axis <-15.016484> speed <60.104396> * SPEEDUP_FACTOR / 100;

		turn lmidleg to z-axis <5.016484> speed <150.104396> * SPEEDUP_FACTOR / 100;

		//turn lbackleg to z-axis <-15.016484> speed <60.104396> * SPEEDUP_FACTOR / 100;

		turn rfrontleg to z-axis <-5.016484> speed <150.104396> * SPEEDUP_FACTOR / 100;
		
		//turn rmidleg to z-axis <15.016484> speed <60.104396> * SPEEDUP_FACTOR / 100;
		
		turn rbackleg to z-axis <-5.016484> speed <150.104396> * SPEEDUP_FACTOR / 100;
		
		sleep 200 * 100 / SPEEDUP_FACTOR;
	}
	
	
	if( bMoving )
	{
		turn base to z-axis <1.000000> speed <10.000000> * SPEEDUP_FACTOR / 100;

		turn lfrontleg to y-axis <-40.000000> speed <300.967033> * SPEEDUP_FACTOR / 100;
		turn lfrontleg to z-axis <-15.016484> speed <60.104396> * SPEEDUP_FACTOR / 100;

		turn lmidleg to y-axis <20.000000> speed <100.038462> * SPEEDUP_FACTOR / 100;
		turn lmidleg to z-axis <5.016484> speed <550.104396> * SPEEDUP_FACTOR / 100;

		turn lbackleg to y-axis <-15.060440> speed <300.038462> * SPEEDUP_FACTOR / 100;
		turn lbackleg to z-axis <-15.016484> speed <60.104396> * SPEEDUP_FACTOR / 100;

		turn rfrontleg to y-axis <-20.412088> speed <100.060440> * SPEEDUP_FACTOR / 100;
		turn rfrontleg to z-axis <-5.016484> speed <550.104396> * SPEEDUP_FACTOR / 100;
		
		turn rmidleg to y-axis <20.093407> speed <300.368132> * SPEEDUP_FACTOR / 100;
		turn rmidleg to z-axis <15.016484> speed <60.104396> * SPEEDUP_FACTOR / 100;
		
		turn rbackleg to y-axis <-45.137363> speed <120.681319> * SPEEDUP_FACTOR / 100;
		turn rbackleg to z-axis <-5.016484> speed <550.104396> * SPEEDUP_FACTOR / 100;
		
		sleep 200 * 100 / SPEEDUP_FACTOR;
	}
	
	// only vertical
	if( bMoving )
	{
		turn rmid2 to z-axis <0.000000> speed <80.000000> * SPEEDUP_FACTOR / 100;
		turn lmid2 to z-axis <0.000000> speed <80.000000> * SPEEDUP_FACTOR / 100;

		turn lfrontleg to z-axis <5.016484> speed <150.104396> * SPEEDUP_FACTOR / 100;

		//turn lmidleg to z-axis <-15.016484> speed <60.104396> * SPEEDUP_FACTOR / 100;

		turn lbackleg to z-axis <5.016484> speed <150.104396> * SPEEDUP_FACTOR / 100;
		
		//turn rfrontleg to z-axis <15.016484> speed <60.104396> * SPEEDUP_FACTOR / 100;
		
		turn rmidleg to z-axis <-5.016484> speed <150.104396> * SPEEDUP_FACTOR / 100;
		
		//turn rbackleg to z-axis <15.016484> speed <60.104396> * SPEEDUP_FACTOR / 100;
		
		
		sleep 200 * 100 / SPEEDUP_FACTOR;
	}
	
	
	
	return (0);
}


closelegs()
{
	turn base to x-axis <0.000000> speed <20.000000> * SPEEDUP_FACTOR / 100;
	turn base to z-axis <0.000000> speed <15.000000> * SPEEDUP_FACTOR / 100;

	turn rfrontleg to y-axis <0.000000> speed <100.000000>;
	turn rmidleg to y-axis <0.000000> speed <100.000000>;
	turn rbackleg to y-axis <0.000000> speed <100.000000>;
	turn lfrontleg to y-axis <0.000000> speed <100.000000>;
	turn lmidleg to y-axis <0.000000> speed <100.000000>;
	turn lbackleg to y-axis <0.000000> speed <100.000000>;
	turn rfrontleg to z-axis <0.000000> speed <100.000000>;
	turn rmidleg to z-axis <0.000000> speed <100.000000>;
	turn rbackleg to z-axis <0.000000> speed <100.000000>;
	turn lfrontleg to z-axis <0.000000> speed <100.000000>;
	turn lmidleg to z-axis <0.000000> speed <100.000000>;
	turn lbackleg to z-axis <0.000000> speed <100.000000>;
	
	wait-for-turn rfrontleg around y-axis;
	wait-for-turn rmidleg around y-axis;
	wait-for-turn rbackleg around y-axis;
	wait-for-turn lfrontleg around y-axis;
	wait-for-turn lmidleg around y-axis;
	wait-for-turn lbackleg around y-axis;
	wait-for-turn rfrontleg around z-axis;
	wait-for-turn rmidleg around z-axis;
	wait-for-turn rbackleg around z-axis;
	wait-for-turn lfrontleg around z-axis;
	wait-for-turn lmidleg around z-axis;
	wait-for-turn lbackleg around z-axis;
		
	move rfrontleg to x-axis [0.000000] speed [8.000000];
	move rmidleg to x-axis [0.000000] speed [8.000000];
	move rbackleg to x-axis [0.000000] speed [8.000000];
	move lfrontleg to x-axis [0.000000] speed [8.000000];
	move lmidleg to x-axis [0.000000] speed [8.000000];
	move lbackleg to x-axis [0.000000] speed [8.000000];

	wait-for-move rfrontleg along x-axis;
	wait-for-move rmidleg along x-axis;
	wait-for-move rbackleg along x-axis;
	wait-for-move lfrontleg along x-axis;
	wait-for-move lmidleg along x-axis;
	wait-for-move lbackleg along x-axis;
	return (0);
}

openlegs()
{
	turn base to x-axis <0.000000> speed <20.000000> * SPEEDUP_FACTOR / 100;
	turn base to z-axis <0.000000> speed <15.000000> * SPEEDUP_FACTOR / 100;

	turn rfrontleg to y-axis <0.000000> speed <100.000000>;
	turn rmidleg to y-axis <0.000000> speed <100.000000>;
	turn rbackleg to y-axis <0.000000> speed <100.000000>;
	turn lfrontleg to y-axis <0.000000> speed <100.000000>;
	turn lmidleg to y-axis <0.000000> speed <100.000000>;
	turn lbackleg to y-axis <0.000000> speed <100.000000>;
	turn rfrontleg to z-axis <0.000000> speed <100.000000>;
	turn rmidleg to z-axis <0.000000> speed <100.000000>;
	turn rbackleg to z-axis <0.000000> speed <100.000000>;
	turn lfrontleg to z-axis <0.000000> speed <100.000000>;
	turn lmidleg to z-axis <0.000000> speed <100.000000>;
	turn lbackleg to z-axis <0.000000> speed <100.000000>;
	
	wait-for-turn rfrontleg around y-axis;
	wait-for-turn rmidleg around y-axis;
	wait-for-turn rbackleg around y-axis;
	wait-for-turn lfrontleg around y-axis;
	wait-for-turn lmidleg around y-axis;
	wait-for-turn lbackleg around y-axis;
	wait-for-turn rfrontleg around z-axis;
	wait-for-turn rmidleg around z-axis;
	wait-for-turn rbackleg around z-axis;
	wait-for-turn lfrontleg around z-axis;
	wait-for-turn lmidleg around z-axis;
	wait-for-turn lbackleg around z-axis;
		
	move rfrontleg to x-axis [4.500000] speed [8.000000];
	move rmidleg to x-axis [4.500000] speed [8.000000];
	move rbackleg to x-axis [4.500000] speed [8.000000];
	move lfrontleg to x-axis [-4.500000] speed [8.000000];
	move lmidleg to x-axis [-4.500000] speed [8.000000];
	move lbackleg to x-axis [-4.500000] speed [8.000000];

	wait-for-move rfrontleg along x-axis;
	wait-for-move rmidleg along x-axis;
	wait-for-move rbackleg along x-axis;
	wait-for-move lfrontleg along x-axis;
	wait-for-move lmidleg along x-axis;
	wait-for-move lbackleg along x-axis;
	return (0);
}

swim()
{
	sleep 500;
	call-script closelegs();
	return (0);
}

MotionControl(justMoved)
{
	justMoved = TRUE;
	while( TRUE )
	{
		// over water
		if( ( !bSwimming ) AND (terrainStatus == 2 OR terrainStatus == 1))
		{
			call-script closelegs();
			bSwimming = TRUE;
			justMoved = TRUE;
		}
		// over land
		if( bSwimming AND terrainStatus == 4 )
		{
			call-script openlegs();
			bSwimming = FALSE;
			justMoved = TRUE;
		}
		if( bMoving )
		{
			if( bSwimming )
			{
				//set MAX_SPEED to waterSpeed; // REPLACED BY GADGET
				set UPRIGHT to TRUE;
				call-script swim();
			}
			if( !bSwimming )
			{
				//set MAX_SPEED to landSpeed; // REPLACED BY GADGET
				set UPRIGHT to FALSE;
				call-script walk();
			}
			justMoved = TRUE;
		}
		if( !bMoving )
		{
			if( justMoved AND ( !bSwimming ) )
			{

				turn lfrontleg to y-axis <0.000000> speed <237.000000>;
				turn lfrontleg to z-axis <0.000000> speed <237.000000>;
				turn lmidleg to y-axis <0.000000> speed <237.000000>;
				turn lmidleg to z-axis <0.000000> speed <237.000000>;
				turn lbackleg to y-axis <0.000000> speed <237.000000>;
				turn lbackleg to z-axis <0.000000> speed <237.000000>;
				turn rbackleg to y-axis <0.000000> speed <237.000000>;
				turn rbackleg to z-axis <0.000000> speed <237.000000>;
				turn rmidleg to y-axis <0.000000> speed <237.000000>;
				turn rmidleg to z-axis <0.000000> speed <237.000000>;
				turn rfrontleg to y-axis <0.000000> speed <237.000000>;
				turn rfrontleg to z-axis <0.000000> speed <237.000000>;
				turn lbackleg to y-axis <25.000000> speed <300.000000>;
				turn rbackleg to y-axis <-25.000000> speed <300.000000>;
				turn rfrontleg to y-axis <25.000000> speed <300.000000>;
				turn lfrontleg to y-axis <-25.000000> speed <300.000000>;
				
	
				justMoved = FALSE;
			}
			sleep 100;
		}
	}
	return (0);
}

Create()
{
	waterSpeed = get MAX_SPEED;
	landSpeed = waterSpeed * 100 / 150;
	bMoving = FALSE;
	bAiming = FALSE;
	
	bSwimming = TRUE;
	Static_Var_8 = 1;
	gun_1 = [0];
	gun_2 = [0];
	call-script stopAimHelper1(<1000>,<1000>);
	call-script stopAimHelper2(<1000>,<1000>);
	start-script MotionControl();
	start-script SmokeUnit();
	return (0);
}

StartMoving()
{
	bMoving = TRUE;
	signal SIG_MOVE;
	set-signal-mask SIG_MOVE;
	while( TRUE )
	{
		if( terrainStatus == 2 )
		{
			emit-sfx 2 from wake1;
			emit-sfx 2 from wake2;
		}
		if( terrainStatus == 1 )
		{
			emit-sfx 2 from wake1;
			emit-sfx 2 from wake2;
		}
		sleep 250;
	}
	return (0);
}

StopMoving()
{
	bMoving = FALSE;
	signal SIG_MOVE;
	return (0);
}

setSFXoccupy(Func_Var_1)
{
	terrainStatus = Func_Var_1;
	return (0);
}


RestoreAfterDelay()
{
	sleep DEFAULT_WEAPON_RESTORE_DELAY;
	call-script stopAimHelper1(<70>,<70>);
	turn turret to y-axis <0.000000> speed <70.000000>;
	turn sleeve to x-axis <0.000000> speed <70.000000>;
	return (0);
}

RestoreAfterDelay2()
{
	sleep DEFAULT_WEAPON_RESTORE_DELAY;
	call-script stopAimHelper2(<70>,<70>);
	turn turret2 to y-axis <0.000000> speed <70.000000>;
	turn sleeve2 to x-axis <0.000000> speed <70.000000>;
	return (0);
}

AimPrimary(heading, pitch)
{
	call-script updateAimHelper1(heading,pitch,<80>,<80>,HEADING_TOLERANCE,PITCH_TOLERANCE);
	signal SIG_AIM;
	set-signal-mask SIG_AIM;
	bAiming = TRUE;
	turn turret to y-axis heading speed <80.000000>;
	turn sleeve to x-axis <0.000000> - pitch speed <70.000000>;
	if (!aimReady1)
	{
		wait-for-turn turret around y-axis;
		wait-for-turn sleeve around x-axis;
	}
	start-script RestoreAfterDelay();
	return (1);
}


FirePrimary()
{
	if (gun_1 == [0])
	{
		move barrel1 to z-axis [-4.250000] now;
		emit-sfx 1024 from flare1;
		sleep 100;
		move barrel1 to z-axis [0.000000] speed [3.000000];
		gun_1 = [1];
		return (1);
	}
	if (gun_1 == [1])
	{
		move barrel2 to z-axis [-4.250000] now;
		emit-sfx 1024 from flare2;
		sleep 100;
		move barrel2 to z-axis [0.000000] speed [3.000000];
		gun_1 = [0];
		return (1);
	}
}


AimFromPrimary(piecenum)
{
	piecenum = turret;
	return (0);
}

QueryPrimary(piecenum)
{
	if( gun_1 == [0])
	{
		piecenum = flare1;
		return (0);
	}
	if( gun_1 == [1])
	{
		piecenum = flare2;
		return (0);
	}
}


AimSecondary(heading, pitch)
{
	call-script updateAimHelper2(heading,pitch,<140>,<140>,HEADING_TOLERANCE,PITCH_TOLERANCE);
	signal SIG_AIM_2;
	set-signal-mask SIG_AIM_2;
	bAiming = TRUE;
	turn turret2 to y-axis heading speed <140.000000>;
	turn sleeve2 to x-axis <0.000000> - pitch speed <140.000000>;
	if (!aimReady2)
	{
		wait-for-turn turret2 around y-axis;
		wait-for-turn sleeve2 around x-axis;
	}
	start-script RestoreAfterDelay2();
	return (1);
}


FireSecondary()
{
	if (gun_2 == [0])
	{
		emit-sfx 1024+2 from rfirept1;
		sleep 50;
		gun_2 = [1];
		return (1);
	}
	if (gun_2 == [1])
	{
		emit-sfx 1024+2 from lfirept1;
		sleep 50;
		gun_2 = [2];
		return (1);
	}
	if (gun_2 == [2])
	{
		emit-sfx 1024+2 from rfirept2;
		sleep 50;
		gun_2 = [3];
		return (1);
	}
	if (gun_2 == [3])
	{
		emit-sfx 1024+2 from lfirept2;
		sleep 50;
		gun_2 = [0];
		return (1);
	}		
}


AimFromSecondary(piecenum)
{
	piecenum = turret2;
	return (0);
}

QuerySecondary(piecenum)
{
	if( gun_2 == [0])
	{
		piecenum = rfirept1;
		return (0);
	}
	if( gun_2 == [1])
	{
		piecenum = lfirept1;
		return (0);
	}
	if( gun_2 == [2])
	{
		piecenum = rfirept2;
		return (0);
	}
	if( gun_2 == [3])
	{
		piecenum = lfirept2;
		return (0);
	}
}


SweetSpot(piecenum)
{
	piecenum = hull;
	return (0);
}

Killed(severity, corpsetype)
{
	if( severity <= 50 )
	{
		explode sleeve type SHATTER;
		explode lgun1 type SHATTER;
		explode lgunbase type SHATTER;
		return (1);
	}
	explode hull type SHATTER;
	explode bottom type SHATTER;
	explode turret type SHATTER;
	explode turret2 type SHATTER;
	explode h2 type SHATTER;
	explode sleeve type SHATTER;
	explode barrel1 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP5;
	explode barrel2 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP5;
	return (2);
}
