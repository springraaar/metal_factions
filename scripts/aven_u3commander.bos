#define TAK			// This is a TAK script

#include "sfxtype.h"
#include "exptype.h"

#define HEADING_TOLERANCE	<25>
#define PITCH_TOLERANCE		<15>

#define SPEEDUP_FACTOR	105
#define RESTORE_DELAY	3000

piece  torso, ruparm, luparm, lnanopt,rnanopt, pelvis, lfirept,rfirept, head, lthigh, rthigh, lloarm, rloarm, rleg, lleg, rfoot,lfoot, ltorpgun,ltorpedo,lfirept2,rtorpgun,rtorpedo,rfirept2, h2, lnano,rnano, lgun, rgun, t2,t3,t4,lshoulder,rshoulder, jumpback,jbwings,lbjetpt,rbjetpt,jumpjets,lfjet,rfjet,lfjetpt,rfjetpt;

static-var  bMoving, bBuilding, bDgunning,bAiming, Static_Var_6, bUnderwater, canAim1, canAim2, mATurnSpd1,mATurnSpd2,mATurnSpd3,mASpdFactor, mAMoveSpd1, mAVertFactor, legAngle1, legAngle2, legAngle3, gun_1,gun_2, nanoPt;

#include "aimhelper1.h"

// signal definition
#define SIG_AIM		2

lua_cobDebug() { return 0; }
lua_delayReload() { return 0; }


#include "jumpvars.h"


showJumpGear() {
	hide t3;
	show jumpback;
	show jbwings;
	show jumpjets;
	show lfjet;
	show rfjet;
}

hideJumpGear() {
	show t3;
	hide jumpback;
	hide jbwings;
	hide jumpjets;
	hide lfjet;
	hide rfjet;
}

showJumpEffects(descending, frames) {
	if (descending) {
		emit-sfx 1024+7 from lfjetpt;
		emit-sfx 1024+7 from rfjetpt;
		emit-sfx 1024+6 from lbjetpt;
		emit-sfx 1024+6 from rbjetpt;
		if (frames == JUMP_SND_FRAMES) {
			play-sound( "jumpdesc", 1 );
		}
	} else {
		if (frames == 0 ) {
			play-sound( "jumpstart", 1 );
		} else {
			if (frames == JUMP_SND_FRAMES) {
				play-sound( "jumpasc", 1 );
			}
		}
		emit-sfx 1024+5 from lfjetpt;
		emit-sfx 1024+5 from rfjetpt;
		emit-sfx 1024+4 from lbjetpt;
		emit-sfx 1024+4 from rbjetpt;
	}
}

#include "jump.h"

MotionSpeedControl(maxSpeed,currentSpeed)
{
	maxSpeed = get MAX_SPEED;
	currentSpeed = 0;
	mASpdFactor = SPEEDUP_FACTOR;

	
	while(TRUE)
	{
		currentSpeed = get CURRENT_SPEED;
		mASpdFactor = SPEEDUP_FACTOR * currentSpeed / maxSpeed;

		//call-script lua_cobDebug(mASpdFactor);
		if ( mASpdFactor < 40 )
		{
			mASpdFactor = 40;
		}
		
		
		mAMoveSpd1 = [20.000000] * mASpdFactor / 100;
		mATurnSpd1 = <315.000000> * (100 + mASpdFactor) / 200;
		mATurnSpd2 = <200.000000> * (100 + mASpdFactor) / 200;
		mATurnSpd3 = <50.000000> * (100 + mASpdFactor) / 200;

		mAVertFactor = [-2];
		legAngle1 = <40.000000>;
		legAngle2 = <20.000000>;
		legAngle3 = <15.000000>;
		if ( mASpdFactor < SPEEDUP_FACTOR )
		{
			legAngle1 = legAngle1 * (SPEEDUP_FACTOR + mASpdFactor) / (2*SPEEDUP_FACTOR);
			legAngle2 = legAngle2 * (SPEEDUP_FACTOR + mASpdFactor) / (2*SPEEDUP_FACTOR);
			legAngle3 = legAngle3 * (SPEEDUP_FACTOR + mASpdFactor) / (2*SPEEDUP_FACTOR);
		}
	
		sleep 60;

	}
}


Sing()
{
	Static_Var_6 = Rand( 0, 9 );
	if( Static_Var_6 == 0 )
	{
		play-sound( "honk", 15 );
		play-sound( "honk", 15 );
		play-sound( "honk", 15 );
		play-sound( "honk", 15 );
		play-sound( "honk", 15 );
		return (0);
	}
	if( Static_Var_6 == 1 )
	{
		play-sound( "ArmCom1", 15 );
		play-sound( "ArmCom1", 15 );
		play-sound( "ArmCom1", 15 );
		play-sound( "ArmCom1", 15 );
		play-sound( "ArmCom1", 15 );
		return (0);
	}
	if( Static_Var_6 > 1 AND Static_Var_6 < 10 )
	{
		play-sound( "sing", 15 );
		play-sound( "sing", 15 );
		play-sound( "sing", 15 );
		play-sound( "sing", 15 );
		play-sound( "sing", 15 );
		return (0);
	}
}

Build()
{
	while(TRUE)
	{
		if( bBuilding )
		{
			emit-sfx 1024 + 1 from lnanopt;
			emit-sfx 1024 + 1 from rnanopt;
			call-script lua_delayReload(3);
		}
		sleep 100;
	}
	return;
}


checkUnderwater()
{
	var currentHeight, oldState, i;
	while(TRUE)
	{   
 		currentHeight = GET GROUND_WATER_HEIGHT(GET UNIT_XZ);
 		oldState = bUnderwater;
		
		// check current state
		if ( currentHeight < [-30])
 		{
 			bUnderwater = TRUE;
		
 		}
 		if (currentHeight >= [-30])
 		{
 			bUnderwater = FALSE;
 		}
 		
 		// handle state changes
 		if (oldState != bUnderwater)
 		{
			if(bUnderwater)
			{
				canAim1 = FALSE;
				
				// hide land weapon stuff
				hide lgun;
				hide rgun;
 				
				// effects
				i=0;
				while(i < 5)
				{
					emit-sfx 1024+8 from lgun;
					emit-sfx 1024+8 from rgun;
					i=i+1;
					sleep 100;
				}

				
				//show torpedo stuff 			
 				move ltorpedo to y-axis [0.000000] now;
 				show ltorpgun;
 				show ltorpedo;
 				move rtorpedo to y-axis [0.000000] now;
 				show rtorpgun;
 				show rtorpedo;
 				

				// effects
				i=0;
				while(i < 5)
				{
					emit-sfx 1024+8 from ltorpgun;
					emit-sfx 1024+8 from rtorpgun;
					i=i+1;
					sleep 100;
				}
				
 				canAim2 = TRUE;
			}
			if(!bUnderwater)
			{
 				canAim2 = FALSE;
 				
				//hide torpedo stuff
				hide ltorpedo;
				hide ltorpgun;
				move ltorpedo to y-axis [0.000000] now;
				hide rtorpedo;
				hide rtorpgun;
				move rtorpedo to y-axis [0.000000] now;

				// effects
				i=0;
				while(i < 5)
				{
					emit-sfx 1024+8 from ltorpgun;
					emit-sfx 1024+8 from rtorpgun;
					i=i+1;
					sleep 100;
				}

				//show emg stuff 			
 				show lgun;
 				show rgun;

				// effects
				i=0;
				while(i < 5)
				{
					emit-sfx 1024+8 from lgun;
					emit-sfx 1024+8 from rgun;
					i=i+1;
					sleep 100;
				}
 		
 				canAim1 = TRUE;
			}
 		}
 		
 		sleep 500;
	}
	return 0;
}


walk()
{
	var slowTurnSpd, slowTurnSpd2;

	slowTurnSpd = mATurnSpd2 / 2;
	slowTurnSpd2 = mATurnSpd2 / 6;
	
	if (isJumping) {
		move pelvis to y-axis [0.000000] speed [25.000000];
		turn pelvis to x-axis <0.000000> speed <20.000000>;
		turn rthigh to x-axis <0.000000> speed <200.000000>;
		turn rleg to x-axis <0.000000> speed <200.000000>;
		turn lthigh to x-axis <0.000000> speed <200.000000>;
		turn lleg to x-axis <0.000000> speed <200.000000>;
		turn rfoot to x-axis <0.000000> speed <200.000000>;
		turn lfoot to x-axis <0.000000> speed <200.000000>;
		sleep 100;
		return;
	}
	
	// back contact point : right foot behind, left foot forward
	if( bMoving && !isJumping )
	{
		turn lthigh to x-axis <0.000000>-legAngle1 speed mATurnSpd1;
		turn lleg to x-axis legAngle2 speed mATurnSpd2;
		turn lfoot to x-axis <0> speed mATurnSpd3;

		turn rthigh to x-axis legAngle2 speed mATurnSpd2;
		turn rleg to x-axis legAngle3 speed mATurnSpd2;
		turn rfoot to x-axis <0.000000>-legAngle2 speed mATurnSpd1;

		move pelvis to y-axis mAVertFactor speed mAMoveSpd1;
		turn pelvis to x-axis <4.000000> speed slowTurnSpd2;
		if(!bAiming)
		{
			// turn torso left, right arm forward
			turn torso to y-axis <10.000000> speed slowTurnSpd2;
			turn luparm to x-axis <10.000000> speed slowTurnSpd;
			turn lloarm to x-axis <-10.000000> speed slowTurnSpd2;

			turn ruparm to x-axis <-40.000000> speed slowTurnSpd;
			turn rloarm to x-axis <-20.000000> speed slowTurnSpd2;
		}
		
		wait-for-turn lthigh around x-axis;
		wait-for-turn rthigh around x-axis;
		wait-for-turn lleg around x-axis;
		wait-for-turn rleg around x-axis;
	}

	// intermediate pose 2 : left stomp ground
	if( bMoving && !isJumping)
	{
		turn lfoot to x-axis legAngle3 speed mATurnSpd1*3;
		wait-for-turn lfoot around x-axis;
	}

	// passing pose 2 : right foot raising, left foot on the ground
	if( bMoving && !isJumping )
	{
		turn lthigh to x-axis <0.000000> speed mATurnSpd2;
		turn lleg to x-axis <0.000000> speed mATurnSpd2;
		turn lfoot to x-axis <0.000000> speed mATurnSpd3;

		turn rthigh to x-axis <-20.000000> speed mATurnSpd2;
		turn rleg to x-axis <30.000000> speed mATurnSpd2;
		turn rfoot to x-axis <10.000000> speed mATurnSpd1;

		if(!bAiming)
		{
			// restore position
			turn torso to y-axis <0.000000> speed slowTurnSpd2;
			turn luparm to x-axis <-15.000000> speed slowTurnSpd;
			turn lloarm to x-axis <-15.000000> speed slowTurnSpd2;
			turn ruparm to x-axis <-15.000000> speed slowTurnSpd;
			turn rloarm to x-axis <-15.000000> speed slowTurnSpd2;

		}

		move pelvis to y-axis [0.000000] speed mAMoveSpd1;
		turn pelvis to x-axis <0.000000> speed slowTurnSpd2;		
		
		wait-for-turn lthigh around x-axis;
		wait-for-turn rthigh around x-axis;
		wait-for-turn lleg around x-axis;
		wait-for-turn rleg around x-axis;

	}
	
	// forward contact point : right foot forward, left foot behind
	if( bMoving && !isJumping )
	{
		turn lthigh to x-axis legAngle2 speed mATurnSpd2;
		turn lleg to x-axis legAngle3 speed mATurnSpd2;
		turn lfoot to x-axis <0>-legAngle2 speed mATurnSpd1;

		turn rthigh to x-axis <0>-legAngle1 speed mATurnSpd1;
		turn rleg to x-axis legAngle2 speed mATurnSpd2;
		turn rfoot to x-axis <0> speed mATurnSpd3;
		
		move pelvis to y-axis mAVertFactor speed mAMoveSpd1;
		turn pelvis to x-axis <4.000000> speed slowTurnSpd2;
		
		if(!bAiming)
		{
			// turn torso right, left arm forward
			turn torso to y-axis <-10.000000> speed slowTurnSpd2;
			turn luparm to x-axis <-40.000000> speed slowTurnSpd;
			turn lloarm to x-axis <-20.000000> speed slowTurnSpd2;
			turn ruparm to x-axis <10.000000> speed slowTurnSpd;
			turn rloarm to x-axis <-10.000000> speed slowTurnSpd2;
		}

		wait-for-turn lthigh around x-axis;
		wait-for-turn rthigh around x-axis;
		wait-for-turn lleg around x-axis;
		wait-for-turn rleg around x-axis;
	}

	// intermediate pose 1 : right stomp ground
	if( bMoving && !isJumping)
	{
		turn rfoot to x-axis legAngle3 speed mATurnSpd1*3;
		wait-for-turn rfoot around x-axis;
	}

	// passing pose 1 : right foot on ground, left foot raising
	if( bMoving && !isJumping )
	{
		turn lthigh to x-axis <-20.000000> speed mATurnSpd2;
		turn lleg to x-axis <30.000000> speed mATurnSpd2;
		turn lfoot to x-axis <10.000000> speed mATurnSpd1;
		
		turn rthigh to x-axis <0.000000> speed mATurnSpd2;
		turn rleg to x-axis <0.000000> speed mATurnSpd2;
		turn rfoot to x-axis <0.000000> speed mATurnSpd3;

		
		if(!bAiming)
		{
			// restore position
			turn torso to y-axis <0.000000> speed slowTurnSpd2;
			turn luparm to x-axis <-15.000000> speed slowTurnSpd;
			turn lloarm to x-axis <-15.000000> speed slowTurnSpd2;
			turn ruparm to x-axis <-15.000000> speed slowTurnSpd;
			turn rloarm to x-axis <-15.000000> speed slowTurnSpd2;
		}
		
		move pelvis to y-axis [0.000000] speed mAMoveSpd1;
		turn pelvis to x-axis <0.000000> speed slowTurnSpd2;
		
		wait-for-turn lthigh around x-axis;
		wait-for-turn rthigh around x-axis;
		wait-for-turn lleg around x-axis;
		wait-for-turn rleg around x-axis;
	}
	
	return;
}



MotionControl()
{
	var moving, aiming, justMoved;

	justMoved = TRUE;
	while( TRUE )
	{
		moving = bMoving;
		aiming = bAiming;
		
		if( moving )
		{
			justMoved = TRUE;
			if( aiming )
			{
				call-script walk();
			}
			if( !aiming )
			{
				call-script walk();
			}
		}
		if( !moving )
		{
			if( justMoved )
			{
				move pelvis to y-axis [0.000000] speed [25.000000];
				turn pelvis to x-axis <0.000000> speed <20.000000>;
				turn rthigh to x-axis <0.000000> speed <200.000000>;
				turn rleg to x-axis <0.000000> speed <200.000000>;
				turn lthigh to x-axis <0.000000> speed <200.000000>;
				turn lleg to x-axis <0.000000> speed <200.000000>;
				turn rfoot to x-axis <0.000000> speed <200.000000>;
				turn lfoot to x-axis <0.000000> speed <200.000000>;

				if( !aiming )
				{
					turn torso to y-axis <0.000000> speed <200.000000>;
					turn luparm to x-axis <-10.000000> speed <200.000000>;
					turn ruparm to x-axis <-10.000000> speed <200.000000>;
					turn lloarm to x-axis <-20.000000> speed <200.000000>;
					turn rloarm to x-axis <-20.000000> speed <200.000000>;
				}

				justMoved = FALSE;
			}
			sleep 100;
		}
	}
	return;
}

Create()
{
	hide ltorpgun;
	hide ltorpedo;
	hide rtorpgun;
	hide rtorpedo;
	gun_1 = 0;
	gun_2 = 0;
	nanoPt = 0;
	bMoving = FALSE;
	bBuilding = FALSE;
	bDgunning = FALSE;
	bUnderwater = FALSE;
	bAiming = FALSE;
	canAim1 = TRUE;
	canAim2 = FALSE;
	call-script stopAimHelper1(<1000>,<1000>);
	start-script initJump();
	start-script MotionSpeedControl();
	start-script MotionControl();
	start-script Build();
	start-script checkUnderwater();
	return;
}

StartMoving()
{
	bMoving = TRUE;
	return;
}

StopMoving()
{
	bMoving = FALSE;
	return;
}

SweetSpot(piecenum)
{
	piecenum = torso;
	return;
}

QueryNanoPiece(piecenum)
{
	if (nanoPt == 0 ) {
		piecenum = lnanopt;
		nanoPt = 1;
		return;
	}
	if (nanoPt == 1 ) {
		piecenum = rnanopt;
		nanoPt = 0;
		return;
	}
}

RestorePosition()
{
	bDgunning = FALSE;
	sleep RESTORE_DELAY;
	call-script stopAimHelper1(<290>,<245>);
	turn torso to y-axis <0.000000> speed <290.000000>;
	turn ruparm to x-axis <0.000000> speed <245.000000>;
	turn luparm to x-axis <0.000000> speed <245.000000>;
	turn lloarm to x-axis <-20.791209> speed <100.000000> * SPEEDUP_FACTOR / 100;
	turn rloarm to x-axis <-30.593407> speed <100.000000> * SPEEDUP_FACTOR / 100;
	wait-for-turn torso around y-axis;
	wait-for-turn ruparm around x-axis;
	wait-for-turn luparm around x-axis;
	wait-for-turn lloarm around x-axis;
	wait-for-turn rloarm around x-axis;
	bAiming = FALSE;
	return;
}

AimFromPrimary(piecenum)
{
	piecenum = torso;
	return;
}

QueryPrimary(piecenum)
{
	if (gun_1 == 0) {
		piecenum = lfirept;
		return;
	}
	if (gun_1 == 1) {
		piecenum = rfirept;
		return;
	}
}

AimPrimary(heading, pitch)
{
	if( bDgunning || bBuilding || !canAim1)
	{
		sleep 100;
		return (0);
	}
	bAiming = TRUE;
	call-script updateAimHelper1(heading,pitch + <90.000000>,<300>,<400>,HEADING_TOLERANCE,PITCH_TOLERANCE);
	signal SIG_AIM;
	set-signal-mask SIG_AIM;
	turn torso to y-axis heading speed <300.093407>;
	turn luparm to x-axis <0.000000> - pitch - <90.000000> speed <395.000000>;
	turn lloarm to x-axis <0.000000> speed <395.000000>;
	turn ruparm to x-axis <0.000000> - pitch - <90.000000> speed <395.000000>;
	turn rloarm to x-axis <0.000000> speed <395.000000>;
	if (!aimReady1)
	{
		wait-for-turn torso around y-axis;
		wait-for-turn luparm around x-axis;
		wait-for-turn lloarm around x-axis;
	}
	start-script RestorePosition();
	return (1);
}

FirePrimary()
{
	if (gun_1 == 0) {
		emit-sfx 1024 + 0 from lfirept;
		sleep 100;
		gun_1 = 1;
		return;
	}
	if (gun_1 == 1) {
		emit-sfx 1024 + 0 from rfirept;
		sleep 100;
		gun_1 = 0;
		return;
	}	
}


AimFromSecondary(piecenum)
{
	piecenum = torso;
	return;
}

QuerySecondary(piecenum)
{
	if (gun_2 == 0) {
		piecenum = lfirept2;
		return;
	}
	if (gun_2 == 1) {
		piecenum = rfirept2;
		return;
	}	
}

AimSecondary(heading, pitch)
{
	if( bDgunning || bBuilding || !canAim2)
	{
		sleep 100;
		return (0);
	}

	bAiming = TRUE;
	call-script updateAimHelper1(heading,pitch + <90.000000>,<300>,<400>,HEADING_TOLERANCE,PITCH_TOLERANCE);
	signal SIG_AIM;
	set-signal-mask SIG_AIM;
	turn torso to y-axis heading speed <300.093407>;
	turn luparm to x-axis <0.000000> - pitch - <90.000000> speed <395.000000>;
	turn lloarm to x-axis <0.000000> speed <395.000000>;
	turn ruparm to x-axis <0.000000> - pitch - <90.000000> speed <395.000000>;
	turn rloarm to x-axis <0.000000> speed <395.000000>;
	if (!aimReady1)
	{
		wait-for-turn torso around y-axis;
		wait-for-turn luparm around x-axis;
		wait-for-turn lloarm around x-axis;
	}
	start-script RestorePosition();
	return (1);
}

FireSecondary()
{
	if (gun_2 == 0) {
		move ltorpedo to y-axis [2.500000] now;
		sleep 1000;
		gun_2 = 1;
		move ltorpedo to y-axis [0.000000] speed [6.000000];
		return;
	}
	if (gun_2 == 1) {
		move rtorpedo to y-axis [2.500000] now;
		sleep 1000;
		gun_2 = 0;
		move rtorpedo to y-axis [0.000000] speed [6.000000];
		return;
	}
}


StartBuilding(heading, pitch)
{
	signal SIG_AIM;
	set-signal-mask SIG_AIM;
	bBuilding = TRUE;
	bAiming = TRUE;
	call-script updateAimHelper1(heading,pitch + <90.000000>,<300>,<400>,HEADING_TOLERANCE,PITCH_TOLERANCE);	
	turn torso to y-axis heading speed <300.093407>;
	turn luparm to x-axis <0.000000> - pitch - <90.000000> speed <350.000000>;
	turn lloarm to x-axis <0.000000> speed <395.000000>;
	turn ruparm to x-axis <0.000000> - pitch - <90.000000> speed <350.000000>;
	turn rloarm to x-axis <0.000000> speed <395.000000>;
	wait-for-turn torso around y-axis;
	wait-for-turn luparm around x-axis;
	wait-for-turn lloarm around x-axis;
	set INBUILDSTANCE to 1;
	return;
}


StopBuilding()
{
	set INBUILDSTANCE to 0;
	bBuilding = FALSE;
	signal SIG_AIM;
	set-signal-mask SIG_AIM;
	start-script RestorePosition();
	return;
}

Killed(Func_Var_1, Func_Var_2)
{
	play-sound( "VICTORY2", 60 );
	sleep 1;
	play-sound( "VICTORY2", 60 );
	return;
}
