#define TA			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"

#define SPEEDUP_FACTOR 135

piece  base,torso,head,legs,body,sphere,sphere3,sphere4,lforeleg, rforeleg, rhindleg,
       lhindleg,lturret,ldoor1,ldoor2,lhole,lmispt,rturret,rdoor1,rdoor2,rhole,rmispt,lholder,rholder;

static-var  bMoving, gun_1, justmoved;

// Signal definitions
#define SIG_AIM				2



SmokeUnit(healthpercent, sleeptime, smoketype)
{
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 400;
	}
	while( TRUE )
	{
		healthpercent = get HEALTH;
		if( healthpercent < 66 )
		{
			smoketype = 256 | 2;
			if( Rand( 1, 66 ) < healthpercent )
			{
				smoketype = 256 | 1;
			}
			emit-sfx smoketype from body;
		}
		sleeptime = healthpercent * 50;
		if( sleeptime < 200 )
		{
			sleeptime = 200;
		}
		sleep sleeptime;
	}
}


walk2()
{
	if( bMoving )
	{
		turn base to z-axis <0.000000> speed <15.000000> * SPEEDUP_FACTOR / 100;
		move lforeleg to z-axis [4.375000] speed [20.000000] * SPEEDUP_FACTOR / 100;
		move rforeleg to z-axis [-4.250000] speed [20.000000] * SPEEDUP_FACTOR / 100;
		move lhindleg to z-axis [0.000000] speed [20.000000] * SPEEDUP_FACTOR / 100;
		sleep 150 * 100 / SPEEDUP_FACTOR;
	}
	if( bMoving )
	{
		move lforeleg to z-axis [2.125000] speed [20.000000] * SPEEDUP_FACTOR / 100;
		move rforeleg to y-axis [1.125000] speed [20.000000] * SPEEDUP_FACTOR / 100;
		move rforeleg to z-axis [-4.250000] speed [20.000000] * SPEEDUP_FACTOR / 100;
		move rhindleg to z-axis [3.750000] speed [20.000000] * SPEEDUP_FACTOR / 100;
		sleep 130 * 100 / SPEEDUP_FACTOR;
	}
	if( bMoving )
	{
		turn base to z-axis <3.000000> speed <15.000000> * SPEEDUP_FACTOR / 100;
		move lforeleg to z-axis [0.000000] speed [20.000000] * SPEEDUP_FACTOR / 100;
		move rforeleg to y-axis [2.375000] speed [20.000000] * SPEEDUP_FACTOR / 100;
		move rforeleg to z-axis [-4.125000] speed [20.000000] * SPEEDUP_FACTOR / 100;
		move rhindleg to z-axis [7.875000] speed [20.000000] * SPEEDUP_FACTOR / 100;
		sleep 110 * 100 / SPEEDUP_FACTOR;
	}
	if( bMoving )
	{
		move lforeleg to z-axis [-1.999985] speed [20.000000] * SPEEDUP_FACTOR / 100;
		move rforeleg to y-axis [1.125000] speed [20.000000] * SPEEDUP_FACTOR / 100;
		move rforeleg to z-axis [0.000000] speed [20.000000] * SPEEDUP_FACTOR / 100;
		move rhindleg to z-axis [3.750000] speed [20.000000] * SPEEDUP_FACTOR / 100;
		sleep 130 * 100 / SPEEDUP_FACTOR;
	}
	if( bMoving )
	{
		turn base to z-axis <0.000000> speed <15.000000> * SPEEDUP_FACTOR / 100;
		move lforeleg to z-axis [-4.250000] speed [20.000000] * SPEEDUP_FACTOR / 100;
		move rforeleg to y-axis [0.000000] speed [20.000000] * SPEEDUP_FACTOR / 100;
		move rforeleg to z-axis [4.000000] speed [20.000000] * SPEEDUP_FACTOR / 100;
		move rhindleg to z-axis [0.000000] speed [20.000000] * SPEEDUP_FACTOR / 100;
		sleep 150 * 100 / SPEEDUP_FACTOR;
	}
	if( bMoving )
	{
		move lforeleg to y-axis [1.125000] speed [20.000000] * SPEEDUP_FACTOR / 100;
		move rforeleg to z-axis [2.000000] speed [20.000000] * SPEEDUP_FACTOR / 100;
		move lhindleg to z-axis [3.750000] speed [20.000000] * SPEEDUP_FACTOR / 100;
		sleep 130 * 100 / SPEEDUP_FACTOR;
	}
	if( bMoving )
	{
		turn base to z-axis <-3.000000> speed <15.000000> * SPEEDUP_FACTOR / 100;
		move lforeleg to y-axis [2.375000] speed [20.000000] * SPEEDUP_FACTOR / 100;
		move rforeleg to z-axis [0.000000] speed [20.000000] * SPEEDUP_FACTOR / 100;
		move lhindleg to z-axis [7.750000] speed [20.000000] * SPEEDUP_FACTOR / 100;
		sleep 110 * 100 / SPEEDUP_FACTOR;
	}
	if( bMoving )
	{
		move lforeleg to y-axis [1.125000] speed [20.000000] * SPEEDUP_FACTOR / 100;
		move lforeleg to z-axis [0.000000] speed [20.000000] * SPEEDUP_FACTOR / 100;
		move rforeleg to z-axis [-2.124985] speed [20.000000] * SPEEDUP_FACTOR / 100;
		move lhindleg to z-axis [3.750000] speed [20.000000] * SPEEDUP_FACTOR / 100;
		sleep 130 * 100 / SPEEDUP_FACTOR;
	}

	return (0);
}



MotionControl()
{
	while( TRUE )
	{
		if( bMoving )
		{
			justmoved=TRUE;
			call-script walk2();
		}
		if (!bMoving)
		{
			if(justmoved)
			{
				turn base to z-axis <0.000000> speed <30.000000> * SPEEDUP_FACTOR / 100;
				move lforeleg to z-axis [0.000000] speed [20.000000] * SPEEDUP_FACTOR / 100;
				move rforeleg to z-axis [0.000000] speed [20.000000] * SPEEDUP_FACTOR / 100;
				move lhindleg to z-axis [0.000000] speed [20.000000] * SPEEDUP_FACTOR / 100;
				move rhindleg to z-axis [0.000000] speed [20.000000] * SPEEDUP_FACTOR / 100;
				move lforeleg to y-axis [0.000000] speed [20.000000] * SPEEDUP_FACTOR / 100;
				move rforeleg to y-axis [0.000000] speed [20.000000] * SPEEDUP_FACTOR / 100;
				move lhindleg to y-axis [0.000000] speed [20.000000] * SPEEDUP_FACTOR / 100;
				move rhindleg to y-axis [0.000000] speed [20.000000] * SPEEDUP_FACTOR / 100;
			}
			sleep 100;
		}
	}
}

StartMoving()
{
	bMoving = TRUE;
}

StopMoving()
{
	bMoving = FALSE;
}

Create()
{

	bMoving = FALSE;
	justmoved=FALSE;
	gun_1=[0];
	start-script MotionControl();
	start-script SmokeUnit();
	
}

Close1()
{
	turn ldoor1 to z-axis <0.000000> speed <80.000000>;
	turn ldoor2 to z-axis <0.000000> speed <80.000000>;
}

Close2()
{
	turn rdoor1 to z-axis <0.000000> speed <80.000000>;
	turn rdoor2 to z-axis <0.000000> speed <80.000000>;
}


AimPrimary()
{
	signal SIG_AIM;
	set-signal-mask SIG_AIM;

	return (1);
}

FirePrimary()
{
	if (gun_1==[0])
	{
		turn ldoor1 to z-axis <-40.000000> speed <400.000000>;
		turn ldoor2 to z-axis <40.000000> speed <400.000000>;
		emit-sfx 1024 from lmispt;
		sleep 100;
		gun_1=[1];
		sleep 1000;
		start-script Close1();
		return (1);
	}
	if (gun_1==[1])
	{
		turn rdoor1 to z-axis <-40.000000> speed <400.000000>;
		turn rdoor2 to z-axis <40.000000> speed <400.000000>;
		emit-sfx 1024 from rmispt;
		sleep 100;
		gun_1=[0];
		sleep 1000;
		start-script Close2();
		return (1);
	}
}

AimFromPrimary(piecenum)
{
	if (gun_1==[0])
	{
		piecenum = lturret;
	}
	if (gun_1==[1])
	{
		piecenum = rturret;
	}
}

QueryPrimary(piecenum)
{
	if (gun_1==[0])
	{
		piecenum = lmispt;
	}
	if (gun_1==[1])
	{
		piecenum = rmispt;
	}
}

Killed(severity, corpsetype)
{
	if( severity <= 50 )
	{
		explode lturret type SHATTER;
		explode rturret type SHATTER;
		return (1);
	}
	explode body type SHATTER;
	explode torso type SHATTER;
	explode lturret type SHATTER;
	explode rturret type SHATTER;
	return (2);
}
