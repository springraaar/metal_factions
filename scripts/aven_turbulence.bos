#define TA			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"

#define HEADING_TOLERANCE	<25>
#define PITCH_TOLERANCE		<15>

piece  base, turret, wake1, wake2, wake3, wake4, wake5, wake6, wake7, wake8, sleeve, barrel11,barrel22, flare11, flare12, flare21, flare22, turret2, sleeve2, barrel2, flare2, turret3, sleeve3, barrel3, flare3;

static-var  Static_Var_1, Static_Var_3, Static_Var_4, gun_1;

#include "aimhelper1.h"

// Signal definitions
#define SIG_AIM				2
#define SIG_MOVE			4
#define SIG_AIM_2			8
#define SIG_AIM_3			32


BankClerck(Func_Var_1, Func_Var_2, Func_Var_3)
{
	while( TRUE )
	{
		Func_Var_1 = get PIECE_XZ(base);
		Func_Var_3 = 0;
		if( get XZ_HYPOT(Func_Var_1 - Func_Var_2) >= [2.500000] )
		{
			Func_Var_3 = 0 - get XZ_ATAN(Func_Var_2 - Func_Var_1) * 60 / 30;
		}
		turn base to z-axis Func_Var_3 speed <45.000000>;
		Func_Var_2 = Func_Var_1;
		sleep 300;
	}
	return (0);
}

WobbleUnit()
{
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 400;
	}
	while( TRUE )
	{
		if( Static_Var_4 == 1 )
		{
			move base to y-axis [2.000000] speed [2.500000];
		}
		if( Static_Var_4 == 0 )
		{
			move base to y-axis [-2.000000] speed [2.500000];
		}
		Static_Var_4 = !Static_Var_4;
		sleep 750;
	}
	return (0);
}

HitByWeapon(Func_Var_1, Func_Var_2)
{
	turn base to z-axis <0.005989> * Func_Var_2 speed <105.016484>;
	turn base to x-axis <0.005989> * Func_Var_1 speed <105.016484>;
	wait-for-turn base around z-axis;
	wait-for-turn base around x-axis;
	turn base to z-axis <0.000000> speed <30.005495>;
	turn base to x-axis <0.000000> speed <30.005495>;
	return (0);
}

SmokeUnit(healthpercent, sleeptime, smoketype)
{
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 400;
	}
	while( TRUE )
	{
		healthpercent = get HEALTH;
		if( healthpercent < 66 )
		{
			smoketype = 256 | 2;
			if( Rand( 1, 66 ) < healthpercent )
			{
				smoketype = 256 | 1;
			}
			emit-sfx smoketype from base;
		}
		sleeptime = healthpercent * 50;
		if( sleeptime < 200 )
		{
			sleeptime = 200;
		}
		sleep sleeptime;
	}
	return (0);
}

StartMoving()
{
	signal SIG_MOVE;
	set-signal-mask SIG_MOVE;
	while( TRUE )
	{
		if( Static_Var_1 <= 2 )
		{
			//emit-sfx 5 from wake1;
			emit-sfx 5 from wake2;
			//emit-sfx 5 from wake3;
			emit-sfx 5 from wake4;
			//emit-sfx 5 from wake5;
			emit-sfx 5 from wake6;
			//emit-sfx 3 from wake7;
			emit-sfx 5 from wake8;
		}
		sleep 300;
	}
	return (0);
}

StopMoving()
{
}

setSFXoccupy(Func_Var_1)
{
	Static_Var_1 = Func_Var_1;
	return (0);
}

Create()
{
	Static_Var_3 = 1;
	gun_1 = [0];
	call-script stopAimHelper1(<1000>,<1000>);
	start-script WobbleUnit();
	//start-script BankClerck();
	start-script SmokeUnit();
	return (0);
}

RestoreAfterDelay()
{
	sleep DEFAULT_WEAPON_RESTORE_DELAY;
	call-script stopAimHelper1(<70>,<70>);
	turn turret to y-axis <0.000000> speed <70.000000>;
	turn sleeve to x-axis <0.000000> speed <70.000000>;
	return (0);
}
RestoreAfterDelay2()
{
	sleep DEFAULT_WEAPON_RESTORE_DELAY;
	turn turret2 to y-axis <0.000000> speed <150.000000>;
	turn sleeve2 to x-axis <0.000000> speed <150.000000>;
	return (0);
}
RestoreAfterDelay3()
{
	sleep DEFAULT_WEAPON_RESTORE_DELAY;
	turn turret3 to y-axis <0.000000> speed <150.000000>;
	turn sleeve3 to x-axis <0.000000> speed <150.000000>;
	return (0);
}

AimPrimary(heading, pitch)
{
	call-script updateAimHelper1(heading,pitch,<90>,<120>,HEADING_TOLERANCE,PITCH_TOLERANCE);
	signal SIG_AIM;
	set-signal-mask SIG_AIM;
	turn turret to y-axis heading speed <90.000000>;
	turn sleeve to x-axis <0.000000> - pitch speed <120.000000>;
	if (!aimReady1)
	{
		wait-for-turn turret around y-axis;
		wait-for-turn sleeve around x-axis;
	}
	start-script RestoreAfterDelay();
	return (1);
}

FirePrimary()
{
	if( gun_1 == [0]) {
		emit-sfx 1024 + 0 from flare11;
		sleep 100;
		gun_1 = [1];
		return (0);
	}
	if( gun_1 == [1]) {
		emit-sfx 1024 + 0 from flare21;
		sleep 100;
		gun_1 = [2];
		return (0);
	}
	if( gun_1 == [2]) {
		emit-sfx 1024 + 0 from flare12;
		sleep 100;
		gun_1 = [3];
		return (0);
	}
	if( gun_1 == [3]) {
		emit-sfx 1024 + 0 from flare22;
		sleep 100;
		gun_1 = [0];
		return (0);
	}		
}

AimFromPrimary(piecenum)
{
	piecenum = turret;
	return (0);
}

QueryPrimary(piecenum)
{
	if (gun_1 == [0])
	{
		piecenum = flare11;
	}
	if (gun_1 == [1])
	{
		piecenum = flare21;
	}
	if (gun_1 == [2])
	{
		piecenum = flare12;
	}
	if (gun_1 == [3])
	{
		piecenum = flare22;
	}		
	return (0);
}


AimSecondary(heading, pitch)
{
	signal SIG_AIM_2;
	set-signal-mask SIG_AIM_2;
	turn turret2 to y-axis heading speed <160.000000>;
	turn sleeve2 to x-axis <0.000000> - pitch speed <160.000000>;
	wait-for-turn turret2 around y-axis;
	wait-for-turn sleeve2 around x-axis;
	start-script RestoreAfterDelay2();
	return (1);
}

FireSecondary()
{
	emit-sfx 1024 + 1 from flare2;
	return (0);
}

AimFromSecondary(piecenum)
{
	piecenum = turret2;
	return (0);
}

QuerySecondary(piecenum)
{
	piecenum = flare2;
	return (0);
}


AimTertiary(heading, pitch)
{
	signal SIG_AIM_3;
	set-signal-mask SIG_AIM_3;
	turn turret3 to y-axis heading speed <160.000000>;
	turn sleeve3 to x-axis <0.000000> - pitch speed <160.000000>;
	wait-for-turn turret3 around y-axis;
	wait-for-turn sleeve3 around x-axis;
	start-script RestoreAfterDelay3();
	return (1);
}

FireTertiary()
{
	emit-sfx 1024 + 1 from flare3;
	return (0);
}

AimFromTertiary(piecenum)
{
	piecenum = turret3;
	return (0);
}

QueryTertiary(piecenum)
{
	piecenum = flare3;
	return (0);
}

SweetSpot(piecenum)
{
	piecenum = base;
	return (0);
}

Killed(severity, corpsetype)
{
	if( severity <= 50 )
	{
		explode turret type SHATTER;
		explode turret2 type SHATTER;
		explode turret3 type SHATTER;
		return (1);
	}
	explode turret type SHATTER;
	explode turret2 type SHATTER;
	explode turret3 type SHATTER;
	return (2);
}
