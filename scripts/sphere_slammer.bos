#define TA			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"

#define HEADING_TOLERANCE	<25>
#define PITCH_TOLERANCE		<15>


piece  base, turret, slpt,sleeve, mis, flare, smoke,sleeve2, mis2, flare2, smoke2,t1, t2, t1cover,t2cover,bb;

static-var  gun_1,bMoving;

#include "aimhelper1.h"

// Signal definitions
#define SIG_AIM				2



StartMoving()
{
 	bMoving = TRUE;
}

StopMoving()
{
 	bMoving = FALSE;
}

AnimateTracks(current,maxSpeed,currentSpeed, delay)
{
	maxSpeed = get MAX_SPEED;
	current = 0;
	
	while(TRUE)
	{
		currentSpeed = get CURRENT_SPEED;
		
		delay = 150;
		if ( currentSpeed > 0 AND bMoving )
		{
			delay = delay - ((currentSpeed * 100) / maxSpeed);
			
			if( current == 0 )
			{
				turn t1 to y-axis <180.000000> now;
				turn t2 to y-axis <180.000000> now;
			}
			if( current == 1 )
			{
				turn t1 to y-axis <0.000000> now;
				turn t2 to y-axis <0.000000> now;
			}
			
			current = current + 1;
			if( current == 2 )
			{
				current = 0;
			}
		}
		
		if( delay > 0)
		{
			sleep delay;
		}
		if( delay <= 0)
		{
			sleep 100;
		}
	}
}

SmokeUnit(healthpercent, sleeptime, smoketype)
{
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 400;
	}
	while( TRUE )
	{
		healthpercent = get HEALTH;
		if( healthpercent < 66 )
		{
			smoketype = 256 | 2;
			if( Rand( 1, 66 ) < healthpercent )
			{
				smoketype = 256 | 1;
			}
			emit-sfx smoketype from base;
		}
		sleeptime = healthpercent * 50;
		if( sleeptime < 200 )
		{
			sleeptime = 200;
		}
		sleep sleeptime;
	}
}


Create()
{
	gun_1=111;
	
	bMoving = FALSE;
	call-script stopAimHelper1(<1000>,<1000>);
	start-script SmokeUnit();
	start-script AnimateTracks();
}


RestoreAfterDelay()
{
	sleep DEFAULT_WEAPON_RESTORE_DELAY;
	call-script stopAimHelper1(<70>,<70>);
	turn turret to y-axis <0.000000> speed <70.016484>;
	turn slpt to x-axis <0.000000> speed <70.005495>;
}


AimPrimary(heading, pitch)
{
	call-script updateAimHelper1(heading,pitch,<50>,<50>,HEADING_TOLERANCE,PITCH_TOLERANCE);
	signal SIG_AIM;
	set-signal-mask SIG_AIM;
	turn slpt to x-axis <0.000000> - pitch speed <50.000000>;
	turn turret to y-axis heading speed <50.000000>;
	if (!aimReady1)
	{
		wait-for-turn slpt around x-axis;
		wait-for-turn turret around y-axis;
	}
	start-script RestoreAfterDelay();
	return (1);
}

FirePrimary()
{
}

Shot1()
{
	if( gun_1 == 111 )
	{
		move mis to z-axis [-7.000000] now;
		emit-sfx 256 | 2 from smoke;
		emit-sfx 1024 from flare;
		sleep 100;
		gun_1 = 222;
		sleep 5500;
		move mis to z-axis [0.000000] speed [7.000000];
		return (0);
	}
	if( gun_1 == 222 )
	{
		move mis2 to z-axis [-7.000000] now;
		emit-sfx 256 | 2 from smoke2;
		emit-sfx 1024 from flare2;
		sleep 100;
		gun_1 = 111;
		sleep 5500;
		move mis2 to z-axis [0.000000] speed [7.000000];
		return (0);
	}
}


QueryPrimary(piecenum)
{
	if( gun_1 == 111 )
	{
		piecenum = flare;
	}
	if( gun_1 == 222 )
	{
		piecenum = flare2;
	}
}

AimFromPrimary(piecenum)
{
	piecenum = slpt;
}

SweetSpot(piecenum)
{
	piecenum = base;
}

Killed(severity, corpsetype)
{
	if( severity <= 50 )
	{
		explode sleeve type SHATTER;
		explode slpt type SHATTER;
		explode mis type SHATTER;
		explode mis2 type SHATTER;
		return (1);
	}

	explode sleeve type SHATTER;
	explode slpt type SHATTER;
	explode mis type SHATTER;
	explode mis2 type SHATTER;
	explode t1cover type SHATTER;
	explode t2cover type SHATTER;
	explode base type SHATTER;
	return (2);
}
