#define TA			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"

#define HEADING_TOLERANCE	<25>
#define PITCH_TOLERANCE		<15>


piece  GP, Base, Wake1, Wake2,
       Wake3, Wake4, Wake5, Wake6, Wake7, Wake8, turret, sleeve, l1,l2,l3,l4,flare1,flare2,flare3,flare4, b2,b3,b5;

static-var  gun_1, restore_delay, Static_Var_3, Static_Var_5, Static_Var_6;

#include "aimhelper1.h"

// Signal definitions
#define SIG_AIM				2
#define SIG_MOVE			4


BankClerck(Func_Var_1, Func_Var_2, Func_Var_3)
{
	while( TRUE )
	{
		Func_Var_1 = get PIECE_XZ(Base);
		Func_Var_3 = 0;
		if( get XZ_HYPOT(Func_Var_1 - Func_Var_2) >= [2.500000] )
		{
			Func_Var_3 = 0 - get XZ_ATAN(Func_Var_2 - Func_Var_1) * 60 / 30;
		}
		turn Base to z-axis Func_Var_3 speed <45.000000>;
		Func_Var_2 = Func_Var_1;
		sleep 300;
	}
	return (0);
}

WobbleUnit()
{
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 400;
	}
	while( TRUE )
	{
		if( Static_Var_6 == 1 )
		{
			move Base to y-axis [2.000000] speed [2.500000];
		}
		if( Static_Var_6 == 0 )
		{
			move Base to y-axis [4.500000] speed [2.500000];
		}
		Static_Var_6 = !Static_Var_6;
		sleep 750;
	}
	return (0);
}


HitByWeapon(Func_Var_1, Func_Var_2)
{
	turn Base to z-axis <0.010989> * Func_Var_2 speed <105.016484>;
	turn Base to x-axis <0.010989> * Func_Var_1 speed <105.016484>;
	wait-for-turn Base around z-axis;
	wait-for-turn Base around x-axis;
	turn Base to z-axis <0.000000> speed <30.005495>;
	turn Base to x-axis <0.000000> speed <30.005495>;
	return (0);
}

SmokeUnit(healthpercent, sleeptime, smoketype)
{
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 400;
	}
	while( TRUE )
	{
		healthpercent = get HEALTH;
		if( healthpercent < 66 )
		{
			smoketype = 256 | 2;
			if( Rand( 1, 66 ) < healthpercent )
			{
				smoketype = 256 | 1;
			}
			emit-sfx smoketype from Base;
		}
		sleeptime = healthpercent * 50;
		if( sleeptime < 200 )
		{
			sleeptime = 200;
		}
		sleep sleeptime;
	}
	return (0);
}

StartMoving()
{
	signal SIG_MOVE;
	set-signal-mask SIG_MOVE;
	while( TRUE )
	{
		if( Static_Var_5 <= 2 )
		{
			//emit-sfx 5 from wake1;
			emit-sfx 5 from wake2;
			//emit-sfx 5 from wake3;
			emit-sfx 5 from wake4;
			//emit-sfx 5 from wake5;
			emit-sfx 5 from wake6;
			//emit-sfx 3 from wake7;
			emit-sfx 5 from wake8;
		}
		sleep 300;
	}
	return (0);
}

StopMoving(Func_Var_1)
{
	return (0);
}

setSFXoccupy(Func_Var_1)
{
	Static_Var_5 = Func_Var_1;
	return (0);
}

Create()
{
	restore_delay = 3000;
	gun_1 = [0];
	Static_Var_3 = 0;
	call-script stopAimHelper1(<1000>,<1000>);
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 1000;
	}
	start-script SmokeUnit();
	start-script WobbleUnit();
	//start-script BankClerck();
	return (0);
}

SetMaxReloadTime(Func_Var_1)
{
	restore_delay = Func_Var_1 * 2;
	return (0);
}

RestoreAfterDelay()
{
	sleep DEFAULT_WEAPON_RESTORE_DELAY;
	call-script stopAimHelper1(<250>,<250>);
	turn turret to y-axis <0.000000> speed <250.000000>;
	turn sleeve to y-axis <0.000000> speed <250.000000>;
	return (0);
}

AimPrimary(heading, pitch)
{
	call-script updateAimHelper1(heading,pitch,<300>,<300>,HEADING_TOLERANCE,PITCH_TOLERANCE);
	signal SIG_AIM;
	set-signal-mask SIG_AIM;
	turn turret to y-axis heading speed <300.000000>;
	turn sleeve to x-axis <0.000000> - pitch speed <300.000000>;
	if (!aimReady1)
	{
		wait-for-turn turret around y-axis;
		wait-for-turn sleeve around x-axis;
	}
	start-script RestoreAfterDelay(); 	
	return (1);
}


Shot1()
{
	if(gun_1 == [0])
	{
		emit-sfx 1024+0 from flare1;
		gun_1 = [1];
		return 0;
	}
	if(gun_1 == [1])
	{
		emit-sfx 1024+0 from flare2;
		gun_1 = [2];
		return 0;
	}
	if(gun_1 == [2])
	{
		emit-sfx 1024+0 from flare3;
		gun_1 = [3];
		return 0;
	}
	if(gun_1 == [3])
	{
		emit-sfx 1024+0 from flare4;
		gun_1 = [0];
		return 0;
	}		
}
FirePrimary()
{
	return (0);
}

AimFromPrimary(piecenum)
{
	piecenum = turret;
	return (0);
}


QueryPrimary(piecenum)
{
	if(gun_1 == [0])
	{
		piecenum = flare1;
	}
	if(gun_1 == [1])
	{
		piecenum = flare2;
	}
	if(gun_1 == [2])
	{
		piecenum = flare3;
	}
	if(gun_1 == [3])
	{
		piecenum = flare4;
	}	
	return (0);
}

Killed(severity, corpsetype)
{
	if( severity <= 50 )
	{
		explode turret type SHATTER | EXPLODE_ON_HIT | BITMAP4;
		explode l1 type SHATTER | EXPLODE_ON_HIT | BITMAP4;
		explode l2 type SHATTER | EXPLODE_ON_HIT | BITMAP4;
		explode l3 type SHATTER | EXPLODE_ON_HIT | BITMAP4;	
		explode l4 type SHATTER | EXPLODE_ON_HIT | BITMAP4;	
		return(1);
	}
	explode turret type SHATTER | EXPLODE_ON_HIT | BITMAP4;
	explode b2 type SHATTER | EXPLODE_ON_HIT | BITMAP4;
	explode b3 type SHATTER | EXPLODE_ON_HIT | BITMAP4;
	explode b5 type SHATTER | EXPLODE_ON_HIT | BITMAP4;
	explode l1 type SHATTER | EXPLODE_ON_HIT | BITMAP4;
	explode l2 type SHATTER | EXPLODE_ON_HIT | BITMAP4;
	explode l3 type SHATTER | EXPLODE_ON_HIT | BITMAP4;	
	explode l4 type SHATTER | EXPLODE_ON_HIT | BITMAP4;	
	return (2);
}
