#define TA			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"

#define SPEEDUP_FACTOR 180

#define HEADING_TOLERANCE	<25>
#define PITCH_TOLERANCE		<15>

piece  groundx2, torso, gunflare, emgflare, hips, head,sphere2,eye, luparm, leg1,bleg,leg2,bleg2,leg3,bleg3,leg4,bleg4, ruparm, rarm, larm, lemg, rgun, l1,
       r1, t2, t3, a1, a3, rotor, shieldpt;

static-var  bMoving, bAiming, mASpdFactor;


#include "aimhelper1.h"

// Signal definitions
#define SIG_AIM				2

MotionSpeedControl(minSpeed, maxSpeed,currentSpeed)
{
	maxSpeed = get MAX_SPEED;
	currentSpeed = 0;
	mASpdFactor = SPEEDUP_FACTOR;
	minSpeed = 3 * SPEEDUP_FACTOR / 4;
	
	while(TRUE)
	{
		currentSpeed = get CURRENT_SPEED;
		mASpdFactor = SPEEDUP_FACTOR * currentSpeed / maxSpeed;

		if ( mASpdFactor < minSpeed )
		{
			mASpdFactor = minSpeed;
		}

		sleep 60;
	}
}




walk()
{
	if( bMoving )
	{
		/* X */
		turn hips to x-axis <-3.000000> speed <20.000000> * mASpdFactor / 100;
			
		/* Y */
		turn leg4 to y-axis <-80.000000> speed <260.000000> * mASpdFactor / 100;

		turn leg2 to y-axis <-35.000000> speed <120.000000> * mASpdFactor / 100;

		turn leg3 to y-axis <5.000000> speed <140.000000> * mASpdFactor / 100;
		
		turn leg1 to y-axis <25.000000> speed <260.000000> * mASpdFactor / 100;

		/* Z */
		turn bleg4 to z-axis <-20.000000> speed <260.000000> * mASpdFactor / 100;
		turn bleg to z-axis <-20.000000> speed <260.000000> * mASpdFactor / 100;
		turn hips to z-axis <3.000000> speed <20.000000> * mASpdFactor / 100;

		/* move */
		move hips to x-axis [-0.2500000] speed [2.000000] * mASpdFactor / 100;
		move hips to z-axis [-0.2500000] speed [2.000000] * mASpdFactor / 100;
		
		
		turn leg4 to z-axis <-20.000000> speed <200.000000> * mASpdFactor / 100;
		sleep 100 * 100 / mASpdFactor;
		turn leg4 to z-axis <0.000000> speed <200.000000> * mASpdFactor / 100;
		sleep 100 * 100 / mASpdFactor;

	}
	if( bMoving )
	{
		/* X */
		turn hips to x-axis <3.000000> speed <20.000000> * mASpdFactor / 100;
		
		/* Y */
		turn leg4 to y-axis <-35.000000> speed <200.000000> * mASpdFactor / 100;

		turn leg2 to y-axis <-90.000000> speed <180.000000> * mASpdFactor / 100;

		turn leg3 to y-axis <15.000000> speed <140.000000> * mASpdFactor / 100;
		
		turn leg1 to y-axis <-5.000000> speed <200.000000> * mASpdFactor / 100;

		/* Z */
		turn bleg4 to z-axis <0.000000> speed <260.000000> * mASpdFactor / 100;
		turn bleg to z-axis <0.000000> speed <260.000000> * mASpdFactor / 100;
		turn hips to z-axis <3.000000> speed <20.000000> * mASpdFactor / 100;
		
		/* move */
		move hips to x-axis [0.000000] speed [2.000000] * mASpdFactor / 100;
		move hips to z-axis [0.000000] speed [2.000000] * mASpdFactor / 100;
		
		turn leg1 to z-axis <-20.000000> speed <200.000000> * mASpdFactor / 100;
		sleep 100 * 100 / mASpdFactor;
		turn leg1 to z-axis <0.000000> speed <200.000000> * mASpdFactor / 100;
		sleep 100 * 100 / mASpdFactor;

	}
	if( bMoving )
	{
		/* X */
		turn hips to x-axis <-3.000000> speed <20.000000> * mASpdFactor / 100;

		/* Y */
		turn leg4 to y-axis <-5.000000> speed <140.000000> * mASpdFactor / 100;

		turn leg2 to y-axis <-25.000000> speed <260.000000> * mASpdFactor / 100;

		turn leg3 to y-axis <80.000000> speed <260.000000> * mASpdFactor / 100;
		
		turn leg1 to y-axis <35.000000> speed <120.000000> * mASpdFactor / 100;

		/* Z */
		turn bleg2 to z-axis <20.000000> speed <260.000000> * mASpdFactor / 100;
		turn bleg3 to z-axis <20.000000> speed <260.000000> * mASpdFactor / 100;
		turn hips to z-axis <-3.000000> speed <20.000000> * mASpdFactor / 100;


		/* move */
		move hips to x-axis [0.2500000] speed [2.000000] * mASpdFactor / 100;
		move hips to z-axis [-0.2500000] speed [2.000000] * mASpdFactor / 100;
		
		turn leg3 to z-axis <20.000000> speed <200.000000> * mASpdFactor / 100;
		sleep 100 * 100 / mASpdFactor;
		turn leg3 to z-axis <0.000000> speed <200.000000> * mASpdFactor / 100;
		sleep 100 * 100 / mASpdFactor;

	}
	if( bMoving )
	{
		turn hips to x-axis <3.000000> speed <20.000000> * mASpdFactor / 100;

		/* Y */
		turn leg4 to y-axis <-15.000000> speed <140.000000> * mASpdFactor / 100;

		turn leg2 to y-axis <5.000000> speed <200.000000> * mASpdFactor / 100;

		turn leg3 to y-axis <35.000000> speed <200.000000> * mASpdFactor / 100;

		turn leg1 to y-axis <90.000000> speed <180.000000> * mASpdFactor / 100;			

		/* Z */
		turn bleg3 to z-axis <0.000000> speed <260.000000> * mASpdFactor / 100;
		turn bleg2 to z-axis <0.000000> speed <260.000000> * mASpdFactor / 100;
		turn hips to z-axis <3.000000> speed <20.000000> * mASpdFactor / 100;

		/* move */
		move hips to x-axis [0.000000] speed [2.000000] * mASpdFactor / 100;
		move hips to z-axis [0.000000] speed [2.000000] * mASpdFactor / 100;

		turn leg2 to z-axis <20.000000> speed <200.000000> * mASpdFactor / 100;
		sleep 100 * 100 / mASpdFactor;
		turn leg2 to z-axis <0.000000> speed <200.000000> * mASpdFactor / 100;
		sleep 100 * 100 / mASpdFactor;
	}
}


SmokeUnit(healthpercent, sleeptime, smoketype)
{
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 400;
	}
	while( TRUE )
	{
		healthpercent = get HEALTH;
		if( healthpercent < 66 )
		{
			smoketype = 256 | 2;
			if( Rand( 1, 66 ) < healthpercent )
			{
				smoketype = 256 | 1;
			}
			emit-sfx smoketype from torso;
		}
		sleeptime = healthpercent * 50;
		if( sleeptime < 200 )
		{
			sleeptime = 200;
		}
		sleep sleeptime;
	}
}

MotionControl(moving, aiming, justmoved)
{
	spin rotor around z-axis speed <150.000000>;
	while( TRUE )
	{
		moving = bMoving;
		aiming = bAiming;
		if( moving )
		{
			justmoved = TRUE;
			call-script walk();
		}
		if( !moving )
		{
			if( justmoved )
			{
				turn leg1 to x-axis <0.000000> speed <360.000000>;
				turn leg2 to x-axis <0.000000> speed <360.000000>;
				turn leg3 to x-axis <0.000000> speed <360.000000>;
				turn leg4 to x-axis <0.000000> speed <360.000000>;
				turn leg1 to y-axis <45.000000> speed <360.000000>;
				turn leg2 to y-axis <-45.000000> speed <360.000000>;
				turn leg3 to y-axis <45.000000> speed <360.000000>;
				turn leg4 to y-axis <-45.000000> speed <360.000000>;
			
				turn leg1 to z-axis <0.000000> speed <360.000000>;
				turn leg2 to z-axis <0.000000> speed <360.000000>;
				turn leg3 to z-axis <0.000000> speed <360.000000>;
				turn leg4 to z-axis <0.000000> speed <360.000000>;
				turn hips to z-axis <0.000000> speed <260.000000>;
				turn hips to x-axis <0.000000> speed <360.000000>;
	
				move hips to x-axis [0.000000] speed [3.000000];
				move hips to z-axis [0.000000] speed [3.000000];

				turn bleg2 to z-axis <0.000000> speed <160.000000>;
				turn bleg4 to z-axis <0.000000> speed <160.000000>;
				turn bleg3 to z-axis <0.000000> speed <160.000000>;
				turn bleg to z-axis <0.000000> speed <160.000000>;
				justmoved = FALSE;
			}
			sleep 100;
		}
	}
}

Create()
{
	while(GET BUILD_PERCENT_LEFT) sleep 250;
	bMoving = FALSE;
	bAiming = FALSE;

	call-script stopAimHelper1(<1000>,<1000>);
	start-script MotionSpeedControl();
	start-script MotionControl();
	start-script SmokeUnit();
}


StartMoving()
{
	bMoving = TRUE;
}

StopMoving()
{
	bMoving = FALSE;
}

RestoreAfterDelay()
{
	sleep DEFAULT_WEAPON_RESTORE_DELAY;
	call-script stopAimHelper1(<190>,<150>);

	turn torso to y-axis <0.000000> speed <190.016484>;
	turn ruparm to x-axis <0.000000> speed <145.005495>;
	turn rarm to y-axis <0.000000> speed <145.005495>;
	turn luparm to x-axis <0.000000> speed <145.005495>;
	spin rotor around z-axis speed <150.000000>;
	bAiming = FALSE;
}

AimPrimary(heading, pitch)
{
	// if it's not going to be able to fire on the next ~2s, don't try to aim
	if ((get WEAPON_RELOADSTATE(1)) > (get GAME_FRAME) + 40)) { return(0); }

	call-script updateAimHelper1(heading,pitch,<230>,<230>,HEADING_TOLERANCE,PITCH_TOLERANCE);
	signal SIG_AIM;
	set-signal-mask SIG_AIM;
	bAiming = TRUE;
	
	turn torso to y-axis heading speed <230.027473>;
	turn ruparm to x-axis <0.000000> - pitch speed <230.038462>;
	if (!aimReady1)
	{
		wait-for-turn torso around y-axis;
		wait-for-turn ruparm around x-axis;
	}
	start-script RestoreAfterDelay();
	return (1);
}

AimSecondary(heading, pitch)
{
	call-script updateAimHelper1(heading,pitch,<230>,<230>,HEADING_TOLERANCE,PITCH_TOLERANCE);
	signal SIG_AIM;
	set-signal-mask SIG_AIM;
	bAiming = TRUE;
	spin rotor around z-axis speed <300.000000>;
	turn torso to y-axis heading speed <230.027473>;
	turn luparm to x-axis <0.000000> - pitch speed <230.038462>;
	if ( !aimReady1)
	{
		wait-for-turn torso around y-axis;
		wait-for-turn luparm around x-axis;
	}
	start-script RestoreAfterDelay();
	return (1);
}

FirePrimary()
{
	turn r1 to x-axis <70.000000> now;
	turn rarm to x-axis <-70.000000> now;
	emit-sfx 1024+1 from gunflare;
	sleep 250;
	turn r1 to x-axis <0.000000> speed <230.038462>;
	turn rarm to x-axis <0.000000> speed <230.038462>;
	return (1);
}

FireSecondary()
{
	turn l1 to x-axis <15.000000> now;
	turn larm to x-axis <-15.000000> now;
	emit-sfx 1024 from emgflare;
	sleep 100;
	turn l1 to x-axis <0.000000> speed <130.038462>;
	turn larm to x-axis <0.000000> speed <130.038462>;
	return (1);
}

QueryPrimary(piecenum)
{
	piecenum = gunflare;
}

QuerySecondary(piecenum)
{
	piecenum = emgflare;
}

AimFromPrimary(piecenum)
{
	piecenum = torso;
}

AimFromSecondary(piecenum)
{
	piecenum = torso;
}

SweetSpot(piecenum)
{
	piecenum = torso;
}


QueryTertiary(piecenum)
{
	piecenum = shieldpt;
	return (0);
}

AimFromTertiary(piecenum)
{
	piecenum = shieldpt;
	return (0);
}

AimTertiary(heading, pitch)
{
	return (1);
}

Killed(severity, corpsetype)
{
	if( severity <= 50 )
	{
		corpsetype = 1;
		explode lemg type SHATTER;
		explode larm type SHATTER;
		explode rgun type SHATTER;
		explode rarm type SHATTER;
		return (1);
	}
	
	explode lemg type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
	explode larm type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP5;
	explode luparm type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
	explode rgun type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP4;
	explode rarm type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
	explode ruparm type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP4;
	explode torso type SHATTER | EXPLODE_ON_HIT | BITMAP5;
	return (2);
}
