#define TA			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"

#define HEADING_TOLERANCE	<25>
#define PITCH_TOLERANCE		<15>

piece  hull,bottom,b2,flare1, flare2, flare3, base, turret, barrel1, barrel2, wake1, wake2,sleeve,lbdoor1,lbdoor2,lmflare,rbdoor1,rbdoor2,rmflare,turret2,sleeve2,flare12,flare22,misaimpt;

#include "aimhelper1.h"
#include "aimhelper2.h"

static-var  gun_1, gun_2, gun_3;

// Signal definitions
#define SIG_AIM				2
#define SIG_AIM_2			4
#define SIG_MOVE			8


SmokeUnit(healthpercent, sleeptime, smoketype)
{
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 400;
	}
	while( TRUE )
	{
		healthpercent = get HEALTH;
		if( healthpercent < 66 )
		{
			smoketype = 256 | 2;
			if( Rand( 1, 66 ) < healthpercent )
			{
				smoketype = 256 | 1;
			}
			emit-sfx smoketype from base;
		}
		sleeptime = healthpercent * 50;
		if( sleeptime < 200 )
		{
			sleeptime = 200;
		}
		sleep sleeptime;
	}
	return (0);
}

Create()
{
	hide flare1;
	hide flare2;
	hide flare3;
	gun_1 = 0;
	gun_2 = 0;
	gun_3 = 0;
	call-script stopAimHelper1(<1000>,<1000>);
	call-script stopAimHelper2(<1000>,<1000>);
	turn turret2 to y-axis <180.000000> now;
	start-script SmokeUnit();
	return (0);
}

RestoreAfterDelay()
{
	sleep DEFAULT_WEAPON_RESTORE_DELAY;
	call-script stopAimHelper1(<60>,<60>);
	turn turret to y-axis <0.000000> speed <60.000000>;
	turn sleeve to x-axis <0.000000> speed <60.000000>;
	return (0);
}

RestoreAfterDelay2()
{
	sleep DEFAULT_WEAPON_RESTORE_DELAY;
	call-script stopAimHelper2(<100>,<100>);
	turn turret2 to y-axis <180.000000> speed <100.000000>;
	turn sleeve2 to x-axis <0.000000> speed <100.000000>;
}

StartMoving()
{
	signal SIG_MOVE;
	set-signal-mask SIG_MOVE;
	while( TRUE )
	{
		emit-sfx 2 from wake1;
		emit-sfx 2 from wake2;
		sleep 300;
	}
	return (0);
}

StopMoving()
{
	signal SIG_MOVE;
	return (0);
}

AimPrimary(heading, pitch)
{
	call-script updateAimHelper1(heading,pitch,<60>,<60>,HEADING_TOLERANCE,PITCH_TOLERANCE);
	signal SIG_AIM;
	set-signal-mask SIG_AIM;
	turn turret to y-axis heading speed <60.000000>;
	turn sleeve to x-axis <0.000000> - pitch speed <60.000000>;
	if (!aimReady1)
	{
		wait-for-turn turret around y-axis;
		wait-for-turn sleeve around x-axis;
	}
	start-script RestoreAfterDelay();
	return (1);
}

FirePrimary()
{
	if( gun_1 == 0 )
	{
		move barrel1 to z-axis [-7.500000] now;
		emit-sfx 1024 + 0 from flare1;
		move barrel1 to z-axis [0.000000] speed [7.500000];
		sleep 200;
		gun_1 = 1;
		return (0);
	}
	if( gun_1 == 1 )
	{
		move barrel2 to z-axis [-7.500000] now;
		emit-sfx 1024 + 0 from flare2;
		sleep 200;
		move barrel2 to z-axis [0.000000] speed [7.500000];
		gun_1 = 0;
		return (0);
	}
}

AimFromPrimary(piecenum)
{
	piecenum = turret;
	return (0);
}

QueryPrimary(piecenum)
{
	if( gun_1 == 0 )
	{
		piecenum = flare1;
	}
	if( gun_1 == 1 )
	{
		piecenum = flare2;
	}
	return (0);
}



AimSecondary(heading, pitch)
{
	call-script updateAimHelper2(heading,pitch,<480>,<480>,HEADING_TOLERANCE,PITCH_TOLERANCE);
	signal SIG_AIM_2;
	set-signal-mask SIG_AIM_2;
	turn turret2 to y-axis heading speed <480.000000>;
	turn sleeve2 to x-axis <0.000000> - pitch speed <480.000000>;
	if (!aimReady2)
	{
		wait-for-turn turret2 around y-axis;
		wait-for-turn sleeve2 around x-axis;
	}
	start-script RestoreAfterDelay2();
	return (1);
}

FireSecondary()
{
	if( gun_2 == 0 )
	{
		emit-sfx 1024 + 1 from flare1;
		sleep 150;
		gun_2 = 1;
		return (0);
	}
	if( gun_2 == 1 )
	{
		emit-sfx 1024 + 1 from flare2;
		sleep 150;
		gun_2 = 0;
		return (0);
	}
	
}

AimFromSecondary(piecenum)
{
	piecenum = turret2;
}

QuerySecondary(piecenum)
{
	if( gun_2 == 0 )
	{
		piecenum = flare12;
	}
	else
	{
		piecenum = flare22;
		
	}
}


AimTertiary(heading, pitch)
{
	return (1);
}

FireTertiary()
{
	if( gun_3 == 0 )
	{
		move lbdoor1 to z-axis [3] now;
		move lbdoor2 to z-axis [-3] now;
		emit-sfx 1024 + 2 from lmflare;
		sleep 150;
		gun_3 = 1;
		sleep 500;
		move lbdoor1 to z-axis [0] speed [3];
		move lbdoor2 to z-axis [0] speed [3];
	}
	else
	{
		move rbdoor1 to z-axis [3] now;
		move rbdoor2 to z-axis [-3] now;
		emit-sfx 1024 + 2 from rmflare;
		sleep 150;
		gun_3 = 0;
		sleep 500;
		move rbdoor1 to z-axis <0> speed [3];
		move rbdoor2 to z-axis <0> speed [3];
		
	}
	return (0);
}

AimFromTertiary(piecenum)
{
	piecenum = misaimpt;
	return (0);
}

QueryTertiary(piecenum)
{
	if ( gun_3 == 0)
	{
		piecenum = lmflare;
	}
	else
	{
		piecenum = rmflare;
	}
	return (0);	
}


Killed(severity, corpsetype)
{
	hide flare1;
	hide flare2;
	hide flare3;
	if( severity <= 50 )
	{
		explode barrel1 type SHATTER;
		explode barrel2 type SHATTER;
		explode turret type SHATTER;
		return (1);
	}
	explode barrel1 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
	explode barrel2 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
	explode base type BITMAPONLY | BITMAP3;
	explode flare1 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP4;
	explode flare2 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP5;
	explode turret type SHATTER | EXPLODE_ON_HIT | BITMAP1;
	explode wake1 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
	explode wake2 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
	return (2);
}
