#define TA			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"

piece  base, flare, wake1, wake2, wake3, wake4, wake5, wake6, wake7, wake8, top,t2, b2,b3,b5,b6;

static-var  terrainType, restore_delay, wobbleDir;

// Signal definitions
#define SIG_AIM				2
#define SIG_MOVE			4


WobbleUnit()
{
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 400;
	}
	while( TRUE )
	{
		if( wobbleDir == 1 )
		{
			move base to y-axis [2.000000] speed [2.500000];
		}
		if( wobbleDir == 0 )
		{
			move base to y-axis [-2.000000] speed [2.500000];
		}
		wobbleDir = !wobbleDir;
		sleep 750;
	}
	return (0);
}


HitByWeapon(Func_Var_1, Func_Var_2)
{
	turn base to z-axis <0.010989> * Func_Var_2 speed <105.016484>;
	turn base to x-axis <0.010989> * Func_Var_1 speed <105.016484>;
	wait-for-turn base around z-axis;
	wait-for-turn base around x-axis;
	turn base to z-axis <0.000000> speed <30.005495>;
	turn base to x-axis <0.000000> speed <30.005495>;
	return (0);
}

SmokeUnit(healthpercent, sleeptime, smoketype)
{
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 400;
	}
	while( TRUE )
	{
		healthpercent = get HEALTH;
		if( healthpercent < 66 )
		{
			smoketype = 256 | 2;
			if( Rand( 1, 66 ) < healthpercent )
			{
				smoketype = 256 | 1;
			}
			emit-sfx smoketype from base;
		}
		sleeptime = healthpercent * 50;
		if( sleeptime < 200 )
		{
			sleeptime = 200;
		}
		sleep sleeptime;
	}
	return (0);
}

StartMoving()
{
	signal SIG_MOVE;
	set-signal-mask SIG_MOVE;
	while( TRUE )
	{
		if( terrainType <= 2 )
		{
			//emit-sfx 5 from wake1;
			emit-sfx 5 from wake2;
			//emit-sfx 5 from wake3;
			emit-sfx 5 from wake4;
			//emit-sfx 5 from wake5;
			emit-sfx 5 from wake6;
			//emit-sfx 3 from wake7;
			emit-sfx 5 from wake8;
		}
		sleep 300;
	}
	return (0);
}

StopMoving()
{
}

setSFXoccupy(Func_Var_1)
{
	terrainType = Func_Var_1;
	return (0);
}

Create()
{
	start-script WobbleUnit();
	start-script SmokeUnit();
	return (0);
}

AimPrimary(heading, pitch)
{
	signal SIG_AIM;
	set-signal-mask SIG_AIM;
	return (1);
}

FirePrimary()
{
	return (0);
}

AimFromPrimary(piecenum)
{
	piecenum = flare;
	return (0);
}

QueryPrimary(piecenum)
{
	piecenum = flare;
	return (0);
}

Killed(severity, corpsetype)
{
	if( severity <= 50 )
	{
		explode b5 type SHATTER;
		explode b6 type SHATTER;
		return (1);
	}
	explode b2 type SHATTER;
	explode b3 type SHATTER;
	explode b5 type SHATTER;
	explode b6 type SHATTER;
	return (2);
}
