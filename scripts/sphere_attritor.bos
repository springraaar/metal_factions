#define TA			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"

#define SPEEDUP_FACTOR 115

#define HEADING_TOLERANCE	<25>
#define PITCH_TOLERANCE		<20>

piece  ground, tbase, hips, legs,lfrontleg, lmidleg,rmidleg, rfrontleg,lbackleg,rbackleg, rmid2, rback2, lback2,rfront2,lmid2,lfront2, turret, sleeve, barrel1,flare1,barrel2,flare2, front, fdoor1,fdoor2,fhole,fmispt,shieldpt;

static-var  bMoving,bAiming, gun_1, mASpdFactor;

#include "aimhelper1.h"

// Signal definitions
#define SIG_AIM				2

lua_turnToTarget() { return 0; }

MotionSpeedControl(minSpeed, maxSpeed,currentSpeed) {
	maxSpeed = get MAX_SPEED;
	currentSpeed = 0;
	mASpdFactor = SPEEDUP_FACTOR;
	minSpeed = SPEEDUP_FACTOR * 100/140;
	
	while(TRUE)	{
		currentSpeed = get CURRENT_SPEED;
		mASpdFactor = SPEEDUP_FACTOR * currentSpeed / maxSpeed;

		if ( mASpdFactor < minSpeed ) {
			mASpdFactor = minSpeed;
		}

		sleep 60;
	}
}


SmokeUnit(healthpercent, sleeptime, smoketype) {
	while( get BUILD_PERCENT_LEFT )	{
		sleep 400;
	}
	while( TRUE ) {
		healthpercent = get HEALTH;
		if( healthpercent < 66 ) {
			smoketype = 256 | 2;
			if( Rand( 1, 66 ) < healthpercent ) {
				smoketype = 256 | 1;
			}
			emit-sfx smoketype from tbase;
		}
		sleeptime = healthpercent * 50;
		if( sleeptime < 200 ) {
			sleeptime = 200;
		}
		sleep sleeptime;
	}
}


walk() {
	if( bMoving) {
		turn rmid2 to z-axis <0.000000> speed <80.000000> * mASpdFactor / 100;
		turn lmid2 to z-axis <0.000000> speed <80.000000> * mASpdFactor / 100;
		
		turn hips to x-axis <2.000000> speed <16.000000> * mASpdFactor / 100;
		turn hips to z-axis <0.000000> speed <10.000000> * mASpdFactor / 100;

		turn lfrontleg to y-axis <20.000000> speed <100.967033> * mASpdFactor / 100;
		turn lfrontleg to z-axis <5.016484> speed <550.104396> * mASpdFactor / 100;

		turn lmidleg to y-axis <-20.000000> speed <300.038462> * mASpdFactor / 100;
		turn lmidleg to z-axis <-15.016484> speed <60.104396> * mASpdFactor / 100;

		turn lbackleg to y-axis <45.060440> speed <120.038462> * mASpdFactor / 100;
		turn lbackleg to z-axis <5.016484> speed <550.104396> * mASpdFactor / 100;
		
		turn rfrontleg to y-axis <40.412088> speed <300.060440> * mASpdFactor / 100;
		turn rfrontleg to z-axis <15.016484> speed <60.104396> * mASpdFactor / 100;
		
		turn rmidleg to y-axis <-20.093407> speed <100.368132> * mASpdFactor / 100;
		turn rmidleg to z-axis <-5.016484> speed <550.104396> * mASpdFactor / 100;
		
		turn rbackleg to y-axis <15.137363> speed <300.681319> * mASpdFactor / 100;
		turn rbackleg to z-axis <15.016484> speed <60.104396> * mASpdFactor / 100;
		
		
		sleep 175 * 100 / mASpdFactor;
	}

	// only vertical
	if( bMoving ) {
		turn hips to x-axis <-2.000000> speed <16.000000> * mASpdFactor / 100;
		turn hips to z-axis <1.000000> speed <10.000000> * mASpdFactor / 100;

		turn lmidleg to z-axis <5.016484> speed <150.104396> * mASpdFactor / 100;
		turn rfrontleg to z-axis <-5.016484> speed <150.104396> * mASpdFactor / 100;
		turn rbackleg to z-axis <-5.016484> speed <150.104396> * mASpdFactor / 100;
		
		sleep 175 * 100 / mASpdFactor;
	}
	
	
	if( bMoving ) {
		turn hips to x-axis <2.000000> speed <16.000000> * mASpdFactor / 100;
		turn hips to z-axis <0.000000> speed <10.000000> * mASpdFactor / 100;

		turn lfrontleg to y-axis <-40.000000> speed <300.967033> * mASpdFactor / 100;
		turn lfrontleg to z-axis <-15.016484> speed <60.104396> * mASpdFactor / 100;

		turn lmidleg to y-axis <20.000000> speed <100.038462> * mASpdFactor / 100;
		turn lmidleg to z-axis <5.016484> speed <550.104396> * mASpdFactor / 100;

		turn lbackleg to y-axis <-15.060440> speed <300.038462> * mASpdFactor / 100;
		turn lbackleg to z-axis <-15.016484> speed <60.104396> * mASpdFactor / 100;

		turn rfrontleg to y-axis <-20.412088> speed <100.060440> * mASpdFactor / 100;
		turn rfrontleg to z-axis <-5.016484> speed <550.104396> * mASpdFactor / 100;
		
		turn rmidleg to y-axis <20.093407> speed <300.368132> * mASpdFactor / 100;
		turn rmidleg to z-axis <15.016484> speed <60.104396> * mASpdFactor / 100;
		
		turn rbackleg to y-axis <-45.137363> speed <120.681319> * mASpdFactor / 100;
		turn rbackleg to z-axis <-5.016484> speed <550.104396> * mASpdFactor / 100;
		
		sleep 175 * 100 / mASpdFactor;
	}
	
	// only vertical
	if( bMoving ) {
		turn hips to x-axis <-2.000000> speed <16.000000> * mASpdFactor / 100;
		turn hips to z-axis <-1.000000> speed <10.000000> * mASpdFactor / 100;

		turn rmid2 to z-axis <0.000000> speed <80.000000> * mASpdFactor / 100;
		turn lmid2 to z-axis <0.000000> speed <80.000000> * mASpdFactor / 100;

		turn lfrontleg to z-axis <5.016484> speed <150.104396> * mASpdFactor / 100;
		turn lbackleg to z-axis <5.016484> speed <150.104396> * mASpdFactor / 100;
		turn rmidleg to z-axis <-5.016484> speed <150.104396> * mASpdFactor / 100;
		
		sleep 175 * 100 / mASpdFactor;
	}
	
}



Stop() {
	turn hips to z-axis <0.000000> speed <7.000000>;
	turn hips to x-axis <0.000000> speed <7.000000>;
	turn lfrontleg to y-axis <0.000000> speed <237.000000>;
	turn lfrontleg to z-axis <0.000000> speed <237.000000>;
	turn lmidleg to y-axis <0.000000> speed <237.000000>;
	turn lmidleg to z-axis <0.000000> speed <237.000000>;
	turn lbackleg to y-axis <0.000000> speed <237.000000>;
	turn lbackleg to z-axis <0.000000> speed <237.000000>;
	turn rbackleg to y-axis <0.000000> speed <237.000000>;
	turn rbackleg to z-axis <0.000000> speed <237.000000>;
	turn rmidleg to y-axis <0.000000> speed <237.000000>;
	turn rmidleg to z-axis <0.000000> speed <237.000000>;
	turn rfrontleg to y-axis <0.000000> speed <237.000000>;
	turn rfrontleg to z-axis <0.000000> speed <237.000000>;
	turn lbackleg to y-axis <25.000000> speed <300.000000>;
	turn rbackleg to y-axis <-25.000000> speed <300.000000>;
	turn rfrontleg to y-axis <25.000000> speed <300.000000>;
	turn lfrontleg to y-axis <-25.000000> speed <300.000000>;
	
	turn rmid2 to z-axis <20.000000> speed <80.000000> * mASpdFactor / 100;
	turn lmid2 to z-axis <-20.000000> speed <80.000000> * mASpdFactor / 100;
}


MotionControl(justMoved) {
	justMoved=TRUE;
	while( TRUE ) {
		if( bMoving ) {
			justMoved=TRUE;
			call-script walk();
		} else {
			if(justMoved) {
				call-script Stop();
				justMoved=FALSE;
			}
			sleep 100;
		}
	}
}

StartMoving() {
	bMoving = TRUE;
}

StopMoving() {
	bMoving = FALSE;
}

Create() {
	bMoving = FALSE;
	gun_1 = 0;
	call-script stopAimHelper1(<1000>,<1000>);	
	start-script MotionSpeedControl();
	start-script MotionControl();
	start-script SmokeUnit();
}

RestoreAfterDelay() {
	sleep DEFAULT_WEAPON_RESTORE_DELAY;
	call-script stopAimHelper1(<100>,<100>);
	turn turret to y-axis <0.000000> speed <100.016484>;
	turn sleeve to x-axis <0.000000> speed <100.005495>;
	bAiming = FALSE;	
}


AimPrimary(heading, pitch) {

	// make unit turn to face target
	if (!bMoving && (get ABS(heading) > <30>)) {
		call-script lua_turnToTarget(1,10);
	}
	if (get ABS(heading) > <50>) {
		sleep 100;
	}

	call-script updateAimHelper1(heading,pitch,<400>,<400>,HEADING_TOLERANCE,PITCH_TOLERANCE);
	signal SIG_AIM;
	set-signal-mask SIG_AIM;
	
	turn turret to y-axis heading speed <400.000000>;
	turn sleeve to x-axis <0.000000> - pitch speed <400.000000>;
	if (!aimReady1) {
		wait-for-turn turret around y-axis;
		wait-for-turn sleeve around x-axis;
	}

	start-script RestoreAfterDelay();
	return (1);
}

Shot1() {
	if (gun_1 == 0)
	{
		emit-sfx 1024 from flare1;
	} else {
		emit-sfx 1024 from flare2;
	}
	return 0;	
}

AimFromPrimary(piecenum) {
	piecenum = turret;
}

QueryPrimary(piecenum) {
	if (gun_1== 0) {
		piecenum = flare1;
		gun_1 = 1;
	} else {
		piecenum = flare2;
		gun_1 = 0;
	}
	return (0);
}


AimSecondary(heading, pitch) {
	return (1);
}

FireSecondary() {
	turn fdoor1 to z-axis <-40.000000> speed <400.000000>;
	turn fdoor2 to z-axis <40.000000> speed <400.000000>;
	emit-sfx 1024 from fmispt;
	sleep 100;
	sleep 1000;
	turn fdoor1 to z-axis <0.000000> speed <80.000000>;
	turn fdoor2 to z-axis <0.000000> speed <80.000000>;
}

AimFromSecondary(piecenum) {
	piecenum = fhole;
	return (0);
}

QuerySecondary(piecenum) {
	piecenum = fmispt;
	return (0);
}


QueryTertiary(piecenum) {
	piecenum = shieldpt;
}

Killed(severity, corpsetype)
{
	if( severity <= 50 )
	{
		explode front type SHATTER | BITMAP2;
		explode front type SHATTER | BITMAP2;
		explode front type SHATTER | BITMAP2;
		explode front type SHATTER | BITMAP2;
		explode front type SHATTER | BITMAP2;
		return (1);		
	}
	explode front type SHATTER | BITMAP2;
	explode front type SHATTER | BITMAP2;
	explode front type SHATTER | BITMAP2;
	explode front type SHATTER | BITMAP2;
	explode front type SHATTER | BITMAP2;
	return (2);
}
