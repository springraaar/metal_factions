#define TA			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"

piece  base, stand, logo1, logo2, ldoor, rdoor, turret, sleeve, barrels, lb1,lb2,lb3, flare1, tlogo, aimpt, floatbase, fb2,fb3;

static-var gun_1, isOpen, currentHeading, currentPitch, isFloating;

#define HEADING_TOLERANCE	<15.000000>
#define PITCH_TOLERANCE		<25.000000>

// Signal definitions
#define SIG_AIM				2

lua_stopFiring() { return 0; }
lua_checkIncomingMissile() { return 0; }

SmokeUnit(healthpercent, sleeptime, smoketype)
{
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 400;
	}
	while( TRUE )
	{
		healthpercent = get HEALTH;
		if( healthpercent < 66 )
		{
			smoketype = 256 | 2;
			if( Rand( 1, 66 ) < healthpercent )
			{
				smoketype = 256 | 1;
			}
			emit-sfx smoketype from base;
		}
		sleeptime = healthpercent * 50;
		if( sleeptime < 200 )
		{
			sleeptime = 200;
		}
		sleep sleeptime;
	}
	return (0);
}


open()
{
	set ARMORED to 0;
	turn rdoor to z-axis <-90.000000> speed <380.000000>;
	turn ldoor to z-axis <90.000000> speed <380.000000>;
	wait-for-turn ldoor around z-axis;
	move rdoor to y-axis  [-11.500000] speed [190.000000];
	move ldoor to y-axis  [-11.500000] speed [190.000000];
	move stand to y-axis [40.000000] speed [280.000000];
	wait-for-move ldoor along y-axis;
	wait-for-move stand along y-axis;
	isOpen = TRUE;
	return (0);
}

close()
{
	isOpen = FALSE;
	turn turret to y-axis <45.000000> speed <400.000000>;
	turn sleeve to x-axis <0> speed <400.000000>;
	wait-for-turn turret around y-axis;
	wait-for-turn sleeve around x-axis;

	move stand to y-axis [0.000000] speed [80.000000];
	wait-for-move stand along y-axis;

	move rdoor to y-axis  [0.000000] speed [80.000000];
	move ldoor to y-axis  [0.000000] speed [80.000000];
	wait-for-move ldoor along y-axis;

	turn rdoor to z-axis <0.000000> speed <280.000000>;
	turn ldoor to z-axis <0.000000> speed <280.000000>;
	wait-for-turn ldoor around z-axis;
	
	set ARMORED to 1;
	return (0);
}

RestoreAfterDelay()
{
	if((get STANDINGFIREORDERS) > 0)
	{
		sleep DEFAULT_WEAPON_RESTORE_DELAY;
	} 
	else 
	{
		sleep 600;
	}
	currentHeading = <0>;
	currentPitch = <0>;
	turn turret to y-axis <0.000000> speed <300.000000>;
	turn sleeve to x-axis <0.000000> speed <300.000000>;
	call-script close();
	return (0);
}

// if fire state changes to hold fire, force closure
checkClose(fireState,previousFireState)
{
	while (TRUE)
	{
		fireState = (get STANDINGFIREORDERS);
		
		if (fireState == 0 && previousFireState > 0) 
		{
			signal SIG_AIM;
			call-script lua_stopFiring();
			call-script RestoreAfterDelay();
		}
	
		previousFireState = fireState;
		sleep 100;
	}
}


AimPrimary(heading, pitch)
{
	signal SIG_AIM;
	set-signal-mask SIG_AIM;
	if(!isOpen)
	{
		call-script open();
	}
	
	turn turret to y-axis heading speed <300.071429>;
	turn sleeve to x-axis <0.000000> - pitch speed <200.038462>;
	if ( get ABS(heading - currentHeading)  > HEADING_TOLERANCE || get ABS(pitch - currentPitch) > PITCH_TOLERANCE )
	{
		wait-for-turn turret around y-axis;
		wait-for-turn sleeve around x-axis;
		currentHeading = heading;
		currentPitch = pitch;
	}
	start-script RestoreAfterDelay();
	return (1);
}

checkIncomingMissile(fireState, needToOpen) {
	needToOpen = FALSE;
	while (TRUE) {
		fireState = (get STANDINGFIREORDERS);
		
		if (fireState > 0) {
			call-script lua_checkIncomingMissile(950);
			needToOpen = get LUA1;
			if (needToOpen == 1) {
				start-script AimPrimary(<0>,<0>);
				sleep DEFAULT_WEAPON_RESTORE_DELAY;
			}
		}
		sleep 500;
	}
}

Create()
{
	move aimpt to y-axis [40.000000] now;
	turn turret to y-axis <45.000000> now;
	isOpen = FALSE;
	currentHeading = <0>;
	currentPitch = <0>;
	gun_1 = [0];
	
	hide floatbase;
	hide fb2;
	hide fb3;
	isFloating = FALSE;
	if ( GET GROUND_WATER_HEIGHT(GET UNIT_XZ) < [0])
	{
		isFloating = TRUE;
		show floatbase;
		show fb2;
		show fb3;
	}

	start-script SmokeUnit();
	start-script close();
	start-script checkClose();
	start-script checkIncomingMissile();
	return (0);
}

FirePrimary()
{
	emit-sfx 1024 + 0 from flare1;

	// turn barrel to next position
	if( gun_1 == [0] )
	{
		sleep 100;
		turn barrels to z-axis <120.000000> speed <1200.000000>;
		gun_1 = [1];
		return (0);
	}
	if( gun_1 == [1] )
	{
		sleep 100;
		turn barrels to z-axis <240.000000> speed <1200.000000>;
		gun_1 = [2];
		return (0);
	}
	if( gun_1 == [2] )
	{
		sleep 100;
		turn barrels to z-axis <360.000000> speed <1200.000000>;
		gun_1 = [0];
		return (0);
	}
}

AimFromPrimary(piecenum)
{
	piecenum = aimpt;
	return (0);
}

QueryPrimary(piecenum)
{
	piecenum = flare1;
	return (0);	
}

SweetSpot(piecenum)
{
	piecenum = turret;
	return (0);
}

Killed(severity, corpsetype)
{
	if( severity <= 50 )
	{
		if (isFloating) 
		{
			corpsetype = 1;
		}
		if (!isFloating) 
		{
			corpsetype = 2;
		}
		explode lb1 type SHATTER | BITMAP4;	
		explode lb2 type SHATTER | BITMAP4;	
		explode turret type SHATTER | BITMAP4;	
		return corpsetype;
	}

	corpsetype = 3;
	explode base type SHATTER | BITMAP4;
	explode stand type SHATTER | BITMAP4;
	explode turret type SHATTER | BITMAP4;	
	return corpsetype;
}
