#define TA			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"

#define SPEEDUP_FACTOR 140

#define HEADING_TOLERANCE	<25>
#define PITCH_TOLERANCE		<15>


piece  base, hips, h2, wheel, torso, ruparm, luparm, rarm, larm, rgun, lgun, rg, lg, rflare, lflare, rspike, lspike, head, l1, l2, l3, visor;

static-var  bMoving, bAiming, lastHeading, gun_1;

#include "aimhelper1.h"

// Signal definitions
#define SIG_AIM				2


recoil(anglex, anglez)
{
	anglex = <-1.000000> * (get KCOS(lastHeading)) / 100;
	anglez = <-1.000000> * (get KSIN(lastHeading)) / 100;
	
	turn base to x-axis anglex speed <150.005495>;
	turn base to z-axis anglez speed <150.005495>;
	wait-for-turn base around z-axis;
	wait-for-turn base around x-axis;
	turn base to z-axis <0.000000> speed <20.000000>;
	turn base to x-axis <0.000000> speed <20.000000>;
}

walk()
{
	turn hips to x-axis <8.000000> speed <140.000000>;
	spin wheel around x-axis speed <240.000000> accelerate <10.000000>;
	sleep 100;
	return (0);
}

walklegs()
{
	turn hips to x-axis <0.000000> speed <140.000000>;
	spin wheel around x-axis speed <240.000000> accelerate <10.000000>;
	sleep 100;
	return (0);
}

SmokeUnit(healthpercent, sleeptime, smoketype)
{
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 400;
	}
	while( TRUE )
	{
		healthpercent = get HEALTH;
		if( healthpercent < 66 )
		{
			smoketype = 256 | 2;
			if( Rand( 1, 66 ) < healthpercent )
			{
				smoketype = 256 | 1;
			}
			emit-sfx smoketype from torso;
		}
		sleeptime = healthpercent * 50;
		if( sleeptime < 200 )
		{
			sleeptime = 200;
		}
		sleep sleeptime;
	}
}

MotionControl(moving, aiming, justmoved)
{
	while( TRUE )
	{
		justmoved = TRUE;
		while( TRUE )
		{
			moving = bMoving;
			aiming = bAiming;
			if( moving )
			{
				if( aiming )
				{
					call-script walklegs();
				}
				else
				{
					call-script walk();
				}
				justmoved = TRUE;
			}
			if( !moving )
			{
				if( justmoved )
				{
					turn hips to x-axis <0.000000> speed <100.000000>;
					stop-spin wheel around x-axis decelerate <50.000000>;
					justmoved = FALSE;
				}
				sleep 100;
			}
		}
	}
}

Create()
{
	
	bMoving = FALSE;
	bAiming = FALSE;
	gun_1 = [0];
	call-script stopAimHelper1(<1000>,<1000>);
	start-script MotionControl();
	start-script SmokeUnit();
}

StartMoving()
{
	bMoving = TRUE;
}

StopMoving()
{
	bMoving = FALSE;
}

RestoreAfterDelay1()
{
	sleep DEFAULT_WEAPON_RESTORE_DELAY;
	call-script stopAimHelper1(<240>,<240>);
	turn torso to y-axis <0.000000> speed <240.016484>;
	turn luparm to x-axis <0.000000> speed <245.005495>;
	turn ruparm to x-axis <0.000000> speed <245.005495>;
}

AimPrimary(heading, pitch)
{
	call-script updateAimHelper1(heading,pitch,<600>,<600>,HEADING_TOLERANCE,PITCH_TOLERANCE);
	signal SIG_AIM;
	set-signal-mask SIG_AIM;
	bAiming = TRUE;
	turn torso to y-axis heading speed <600.027473>;
	turn luparm to x-axis <0.000000> - pitch speed <600.038462>;
	turn ruparm to x-axis <0.000000> - pitch speed <600.038462>;
	if (!aimReady1)
	{
		wait-for-turn torso around y-axis;
		wait-for-turn luparm around x-axis;
	}
	start-script RestoreAfterDelay1();
	return (1);
}


FirePrimary()
{
	if (gun_1 == [0]) {
		emit-sfx 1024 + 0 from lflare;
		sleep 100;
		gun_1 = [1];
		return 0;
	}
	if (gun_1 == [1]) {
		emit-sfx 1024 + 0 from rflare;
		sleep 100;
		gun_1 = [0];
		return 0;
	}
}

QueryPrimary(piecenum)
{
	if (gun_1 == [0]) {
		piecenum = lflare;
		return (0);
	}
	if (gun_1 == [1]) {
		piecenum = rflare;
		return (0);
	}
}

AimFromPrimary(piecenum)
{
	piecenum = torso;
}


Killed(severity, corpsetype)
{
	if( severity <= 50 )
	{
		explode head type BITMAPONLY | BITMAP2;
	
		explode luparm type BITMAPONLY | BITMAP2;
		explode ruparm type BITMAPONLY | BITMAP4;
	
		explode visor type BITMAPONLY | BITMAP4;
		explode torso type BITMAPONLY | BITMAP5;
		return (1);
	}
	explode rarm type FALL | BITMAP2;
	explode lspike type FALL | BITMAP2;
	explode larm type FALL | BITMAP4;
	
	explode visor type FALL | BITMAP4;
	explode torso type SHATTER | BITMAP5;
	return (2);
}
