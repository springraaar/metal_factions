#define TA			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"

#define SPEEDUP_FACTOR 	100

#define HEADING_TOLERANCE	<30>
#define PITCH_TOLERANCE		<20>

piece  base, flare, turret, sleeve, barrel, t1,t2,t1cover,t2cover,body,left,right,b2, turret2,sleeve2,barrel2,flare2;

static-var oldPitch1, targetPitch1;

#include "aimhelper1.h"

// Signal definitions
#define SIG_AIM				2
#define SIG_AIM2			4

lua_turnToTarget() { return 0; }

#include "tankthreads.h"


SmokeUnit(healthpercent, sleeptime, smoketype)
{
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 400;
	}
	while( TRUE )
	{
		healthpercent = get HEALTH;
		if( healthpercent < 66 )
		{
			smoketype = 256 | 2;
			if( Rand( 1, 66 ) < healthpercent )
			{
				smoketype = 256 | 1;
			}
			emit-sfx smoketype from turret;
		}
		sleeptime = healthpercent * 50;
		if( sleeptime < 200 )
		{
			sleeptime = 200;
		}
		sleep sleeptime;
	}
	return (0);
}


aimTracker() {
	targetPitch1 = <0>;
	while(TRUE) {
		if (targetPitch1 > <-91>) {
			if (targetPitch1 != oldPitch1 ) {
				wait-for-turn sleeve around x-axis;
				oldPitch1 = targetPitch1;
			}
		}
		sleep 30;
	}
}

Create()
{
	hide flare;
	oldPitch1 = <0>;
	targetPitch1 = <-91>;
	start-script aimTracker();
	call-script stopAimHelper1(<1000>,<1000>);
	start-script SmokeUnit();
	start-script AnimateTracks();
	return (0);
}


RestoreAfterDelay()
{
	sleep DEFAULT_WEAPON_RESTORE_DELAY;
	turn turret to y-axis <0.000000> speed <120.000000>;
	turn sleeve to x-axis <0.000000> speed <120.000000>;
	oldPitch1 = <0>;
	targetPitch1 = <-91>;
	return (0);
}

RestoreAfterDelay2()
{
	sleep DEFAULT_WEAPON_RESTORE_DELAY;
	call-script stopAimHelper1(<120>,<120>);
	turn turret2 to y-axis <0.000000> speed <120.000000>;
	turn sleeve2 to x-axis <0.000000> speed <120.000000>;
	return (0);
}


AimPrimary(heading, pitch)
{
	signal SIG_AIM;
	set-signal-mask SIG_AIM;
	targetPitch1 = pitch;

	
	// make unit turn to face target
	if (!bMoving && (get ABS(heading) > <5>)) {
		call-script lua_turnToTarget(1,10);
	}
	if (get ABS(heading) > <20>) {
		sleep 100;
	}
	turn turret to y-axis heading speed <60.000000>;
	turn sleeve to x-axis <0.000000> - pitch speed <120.000000>;

	if (get ABS (pitch - oldPitch1) > <20>) {
		wait-for-turn turret around y-axis;
		wait-for-turn sleeve around x-axis;
	}
	start-script RestoreAfterDelay();
	return (1);
}

FirePrimary()
{
	move barrel to z-axis [-5.000000] now;
	emit-sfx 1024 + 0 from flare;
	turn base to x-axis <-3> speed <40.005495>;
	sleep 150;
	move barrel to z-axis [0.000000] speed [20.000000];
	turn base to x-axis <0> speed <20.005495>;
	return (0);
}

AimFromPrimary(piecenum)
{
	piecenum = turret;
	return (0);
}

QueryPrimary(piecenum)
{
	piecenum = flare;
	return (0);
}



AimSecondary(heading, pitch)
{
	call-script updateAimHelper1(heading,pitch,<300>,<300>,HEADING_TOLERANCE,PITCH_TOLERANCE);	
	signal SIG_AIM2;
	set-signal-mask SIG_AIM2;
	turn turret2 to y-axis heading speed <300.000000>;
	turn sleeve2 to x-axis <0.000000> - pitch speed <300.000000>;
	if (!aimReady1)
	{
		wait-for-turn turret2 around y-axis;
		wait-for-turn sleeve2 around x-axis;
	}
	start-script RestoreAfterDelay2();
	return (1);
}

FireSecondary()
{
	emit-sfx 1024 + 1 from flare2;
	return (0);
}

AimFromSecondary(piecenum)
{
	piecenum = turret2;
	return (0);
}

QuerySecondary(piecenum)
{
	piecenum = flare2;
	return (0);
}

Killed(severity, corpsetype)
{
	hide flare;
	if( severity <= 50 )
	{
		explode turret type SHATTER | BITMAP4;
		return (1);
	}
	explode barrel type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
	explode t1cover type SHATTER;
	explode t2cover type SHATTER;
	explode right type SHATTER;
	explode left type SHATTER;
	explode turret type SHATTER | EXPLODE_ON_HIT | BITMAP4;
	return (0);
}
