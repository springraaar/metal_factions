#define TA			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"

#define HEADING_TOLERANCE	<25>
#define PITCH_TOLERANCE		<15>

piece  base, hull, bottom,harmor,hbarmor, front, fbottom, farmor,fbarmor, h2,turret, holder, sleeve, barrel11, flash11, barrel12, flash12, barrel13,flash13,  turret2, sleeve2, barrel21, flash21, barrel22, flash22, barrel23,flash23,wake1, wake2, depthcharge, l1,l2,l3,l4, l12,l22,l32,l42,hl,hr, turbase, turbase2;

static-var  gun_1, gun_2;

#include "aimhelper1.h"
#include "aimhelper2.h"

// Signal definitions
#define SIG_MOVE			2
#define SIG_AIM				4
#define SIG_AIM2			8


SmokeUnit(healthpercent, sleeptime, smoketype)
{
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 400;
	}
	while( TRUE )
	{
		healthpercent = get HEALTH;
		if( healthpercent < 66 )
		{
			smoketype = 256 | 2;
			if( Rand( 1, 66 ) < healthpercent )
			{
				smoketype = 256 | 1;
			}
			emit-sfx smoketype from base;
		}
		sleeptime = healthpercent * 50;
		if( sleeptime < 200 )
		{
			sleeptime = 200;
		}
		sleep sleeptime;
	}
	return (0);
}

Create()
{
	gun_1 = [0];
	gun_2 = [0];
	call-script stopAimHelper1(<1000>,<1000>);
	call-script stopAimHelper2(<1000>,<1000>);
	start-script SmokeUnit();
	return (0);
}


RestoreAfterDelay()
{
	sleep DEFAULT_WEAPON_RESTORE_DELAY;
	call-script stopAimHelper1(<80>,<80>);
	turn turret to y-axis <0.000000> speed <80.000000>;
	turn sleeve to x-axis <0.000000> speed <80.000000>;
	return (0);
}

RestoreAfterDelay2()
{
	sleep DEFAULT_WEAPON_RESTORE_DELAY;
	call-script stopAimHelper2(<80>,<80>);
	turn turret2 to y-axis <0.000000> speed <80.000000>;
	turn sleeve2 to x-axis <0.000000> speed <80.000000>;
	return (0);
}


StartMoving()
{
	signal SIG_MOVE;
	set-signal-mask SIG_MOVE;
	while( TRUE )
	{
		emit-sfx 2 from wake1;
		emit-sfx 2 from wake2;
		sleep 450;
	}
	return (0);
}

StopMoving()
{
	signal SIG_MOVE;
	return (0);
}

AimPrimary(heading, pitch)
{
	call-script updateAimHelper1(heading,pitch,<80>,<80>,HEADING_TOLERANCE,PITCH_TOLERANCE);
	signal SIG_AIM;
	set-signal-mask SIG_AIM;
	turn turret to y-axis heading speed <80.000000>;
	turn sleeve to x-axis <0.000000> - pitch speed <80.000000>;
	if (!aimReady1)
	{
		wait-for-turn turret around y-axis;
		wait-for-turn sleeve around x-axis;
	}
	start-script RestoreAfterDelay();
	return (1);
}

FirePrimary()
{
	if( gun_1 == [0])
	{
		move barrel11 to z-axis [-4.500000] now;
		emit-sfx 1024+0 from flash11;
		sleep 100;
		move barrel11 to z-axis [0.000000] speed [3.000000];
		gun_1 = [1];
		return (0);
	}
	if( gun_1 == [1])
	{
		move barrel12 to z-axis [-4.500000] now;
		emit-sfx 1024+0 from flash12;
		sleep 100;
		move barrel12 to z-axis [0.000000] speed [3.000000];
		gun_1 = [2];
		return (0);
	}
	if( gun_1 == [2])
	{
		move barrel13 to z-axis [-4.500000] now;
		emit-sfx 1024+0 from flash13;
		sleep 100;
		move barrel13 to z-axis [0.000000] speed [3.000000];
		gun_1 = [0];
		return (0);
	}
}


AimFromPrimary(piecenum)
{
	piecenum = turret;
	return (0);
}

QueryPrimary(piecenum)
{
	if(gun_1 == [0])
	{
		piecenum = flash11;
	}
	if(gun_1 == [1])
	{
		piecenum = flash12;
	}	
	if(gun_1 == [2])
	{
		piecenum = flash13;
	}	
	return (0);
}

AimSecondary(heading, pitch)
{
	call-script updateAimHelper2(heading,pitch,<120>,<120>,HEADING_TOLERANCE,PITCH_TOLERANCE);
	signal SIG_AIM2;
	set-signal-mask SIG_AIM2;
	turn turret2 to y-axis heading speed <120.000000>;
	turn sleeve2 to x-axis <0.000000> - pitch speed <120.000000>;
	if (!aimReady2)
	{
		wait-for-turn turret2 around y-axis;
		wait-for-turn sleeve2 around x-axis;
	}
	start-script RestoreAfterDelay2();
	return (1);
}

FireSecondary()
{
	if( gun_2 == [0])
	{
		move barrel21 to z-axis [-3.500000] now;
		emit-sfx 1024+1 from flash21;
		sleep 100;
		move barrel21 to z-axis [0.000000] speed [4.000000];
		gun_2 = [1];
		return (0);
	}
	if( gun_2 == [1])
	{
		move barrel22 to z-axis [-3.500000] now;
		emit-sfx 1024+1 from flash22;
		sleep 100;
		move barrel22 to z-axis [0.000000] speed [4.000000];
		gun_2 = [2];
		return (0);
	}
	if( gun_2 == [2])
	{
		move barrel23 to z-axis [-3.500000] now;
		emit-sfx 1024+1 from flash23;
		sleep 100;
		move barrel23 to z-axis [0.000000] speed [4.000000];
		gun_2 = [0];
		return (0);
	}
}


AimFromSecondary(piecenum)
{
	piecenum = turret2;
	return (0);
}

QuerySecondary(piecenum)
{
	if(gun_2 == [0])
	{
		piecenum = flash21;
	}
	if(gun_2 == [1])
	{
		piecenum = flash22;
	}	
	if(gun_2 == [2])
	{
		piecenum = flash23;
	}	
	return (0);
}


Killed(severity, corpsetype)
{
	if( severity <= 50 )
	{
		explode turret type SHATTER;
		explode barrel12 type SHATTER;
		explode barrel23 type SHATTER;
		explode barrel21 type SHATTER;
		explode barrel22 type SHATTER;

		return (1);
	}
	explode hull type SHATTER;
	explode bottom type SHATTER;
	explode front type SHATTER;
	explode fbottom type SHATTER;
	explode turret type SHATTER;
	explode h2 type SHATTER;
	explode barrel12 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP5;
	explode barrel23 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP5;
	explode barrel21 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP5;
	explode barrel22 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP5;
	return (2);
}
