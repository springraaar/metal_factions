#define TA			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"

#define SPEEDUP_FACTOR 	80

piece  base, firept, turret, sleeve, barrel, s2,t1,t2,t1cover,t2cover,body,left,right,b2,tl,tr,c2,c3,c4;

static-var  restore_delay;

// Signal definitions
#define SIG_AIM				2

#include "tankthreads.h"

SmokeUnit(healthpercent, sleeptime, smoketype)
{
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 400;
	}
	while( TRUE )
	{
		healthpercent = get HEALTH;
		if( healthpercent < 66 )
		{
			smoketype = 256 | 2;
			if( Rand( 1, 66 ) < healthpercent )
			{
				smoketype = 256 | 1;
			}
			emit-sfx smoketype from base;
		}
		sleeptime = healthpercent * 50;
		if( sleeptime < 200 )
		{
			sleeptime = 200;
		}
		sleep sleeptime;
	}
	return (0);
}

Create()
{
	restore_delay = 3000;
	start-script SmokeUnit();
	start-script AnimateTracks();
	return (0);
}

SetMaxReloadTime(Func_Var_1)
{
	restore_delay = Func_Var_1 * 2;
	return (0);
}

RestoreAfterDelay()
{
	sleep restore_delay;
	turn turret to y-axis <0.000000> speed <70.000000>;
	turn sleeve to x-axis <0.000000> speed <70.000000>;
	return (0);
}

AimPrimary(heading, pitch)
{
	signal SIG_AIM;
	set-signal-mask SIG_AIM;
	turn turret to y-axis heading speed <70.000000>;
	turn sleeve to x-axis <0.000000> - pitch speed <80.000000>;
	wait-for-turn turret around y-axis;
	wait-for-turn sleeve around x-axis;
	start-script RestoreAfterDelay();
	return (1);
}

FirePrimary()
{

	move s2 to z-axis [-4.000000] now;
	emit-sfx 1024+0 from firept;
	sleep 100;
	move s2 to z-axis [0.000000] speed [10.000000];
	return (0);
}

AimFromPrimary(piecenum)
{
	piecenum = turret;
	return (0);
}

QueryPrimary(piecenum)
{
	piecenum = firept;
	return (0);
}

Killed(severity, corpsetype)
{
	if( severity <= 50 )
	{
		explode barrel type SHATTER | BITMAP4;
		explode c2 type SHATTER | BITMAP4;
		explode c3 type SHATTER | BITMAP4;
		explode c4 type SHATTER | BITMAP4;
		return (1);
	}

	explode barrel type SHATTER | BITMAP4;
	explode c2 type SHATTER | BITMAP4;
	explode c3 type SHATTER | BITMAP4;
	explode c4 type SHATTER | BITMAP4;
	explode left type SHATTER | BITMAP4;
	explode right type SHATTER | BITMAP4;
	explode turret type SHATTER | BITMAP4;
	explode tl type SHATTER | BITMAP4;
	explode tr type SHATTER | BITMAP4;
	return (2);
}
