#define TA			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"


piece base, turret,sleeve,barrel,flare,  wake1, wake2,hull,bottom;


// Signal definitions
#define SIG_AIM				2
#define SIG_MOVE			8



SmokeUnit(healthpercent, sleeptime, smoketype)
{
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 400;
	}
	while( TRUE )
	{
		healthpercent = get HEALTH;
		if( healthpercent < 66 )
		{
			smoketype = 256 | 2;
			if( Rand( 1, 66 ) < healthpercent )
			{
				smoketype = 256 | 1;
			}
			emit-sfx smoketype from base;
		}
		sleeptime = healthpercent * 50;
		if( sleeptime < 200 )
		{
			sleeptime = 200;
		}
		sleep sleeptime;
	}
}

RockUnit(anglex, anglez)
{
	anglex = anglex * 200/100;
	anglez = anglez * 200/100;
	turn base to x-axis anglex speed <40.005495>;
	turn base to z-axis <0>-anglez speed <40.005495>;
	wait-for-turn base around z-axis;
	wait-for-turn base around x-axis;
	turn base to z-axis <0.000000> speed <10.000000>;
	turn base to x-axis <0.000000> speed <10.000000>;
}

Create()
{
	start-script SmokeUnit();
}

RestoreAfterDelay()
{
	sleep DEFAULT_WEAPON_RESTORE_DELAY;
	turn turret to y-axis <0.000000> speed <6.000000>;
	turn sleeve to x-axis <0.000000> speed <4.000000>;
}

StartMoving()
{
	signal SIG_MOVE;
	set-signal-mask SIG_MOVE;
	while( TRUE )
	{
		emit-sfx 2 from wake1;
		emit-sfx 2 from wake2;
		sleep 300;
	}
}

StopMoving()
{
	signal SIG_MOVE;
}

AimPrimary(heading, pitch)
{
	signal SIG_AIM;
	set-signal-mask SIG_AIM;
	turn turret to y-axis heading speed <6.000000>;
	turn sleeve to x-axis <0.000000> - pitch speed <4.000000>;
	wait-for-turn turret around y-axis;
	wait-for-turn sleeve around x-axis;
	
	start-script RestoreAfterDelay();
	return (1);
}

FirePrimary()
{
	move barrel to z-axis [-7.500000] now;
	emit-sfx 1024 + 0 from flare;
	move barrel to z-axis [0.000000] speed [7.500000];
	sleep 200;
	return (0);
}

AimFromPrimary(piecenum)
{
	piecenum = turret;
}

QueryPrimary(piecenum)
{
	piecenum = flare;
}


Killed(severity, corpsetype)
{
	if( severity <= 50 )
	{
		explode barrel type SHATTER;
		explode sleeve type SHATTER;
		explode turret type SHATTER;
		return (1);
	}
	explode barrel type SHATTER;
	explode sleeve type SHATTER;
	explode turret type SHATTER;
	explode hull type SHATTER;
	explode bottom type SHATTER;

	return (2);
}
