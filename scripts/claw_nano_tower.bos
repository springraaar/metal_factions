#define TA			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"

piece  base, aim, emitnano, spike;

static-var  Static_Var_1, Static_Var_2, statechg_DesiredState, statechg_StateChanging, isBuilding;


Build()
{
	while(TRUE)
	{
		if( isBuilding == [1] )
		{
			emit-sfx 1024 + 0 from emitnano;
			sleep 60;
		}
		sleep 40;
	}
	return (0);
}
Activatescr()
{
	sleep 1;
	return (0);
}

Deactivatescr()
{
	sleep 1;
	return (0);
}

SmokeUnit(healthpercent, sleeptime, smoketype)
{
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 400;
	}
	while( TRUE )
	{
		healthpercent = get HEALTH;
		if( healthpercent < 66 )
		{
			smoketype = 256 | 2;
			if( Rand( 1, 66 ) < healthpercent )
			{
				smoketype = 256 | 1;
			}
			emit-sfx smoketype from aim;
		}
		sleeptime = healthpercent * 50;
		if( sleeptime < 200 )
		{
			sleeptime = 200;
		}
		sleep sleeptime;
	}
	return (0);
}

Go()
{
	call-script Activatescr();
	isBuilding = [1];
	turn aim to y-axis Static_Var_1 speed <400.000000>;
	wait-for-turn aim around y-axis;
	set INBUILDSTANCE to 1;
	return (0);
}

Stop()
{
	set INBUILDSTANCE to 0;
	isBuilding = [0];
	call-script Deactivatescr();
	return (0);
}

InitState()
{
	statechg_DesiredState = TRUE;
	statechg_StateChanging = FALSE;
	return (0);
}

RequestState(requestedstate, currentstate)
{
	if( statechg_StateChanging )
	{
		statechg_DesiredState = requestedstate;
		return (0);
	}
	statechg_StateChanging = TRUE;
	currentstate = statechg_DesiredState;
	statechg_DesiredState = requestedstate;
	while( statechg_DesiredState != currentstate )
	{
		if( statechg_DesiredState == 0 )
		{
			call-script Go();
			currentstate = 0;
		}
		if( statechg_DesiredState == 1 )
		{
			call-script Stop();
			currentstate = 1;
		}
	}
	statechg_StateChanging = FALSE;
	return (0);
}

Create()
{
	call-script InitState();
	start-script SmokeUnit();
	Static_Var_1 = 0;
	Static_Var_2 = 5000;
	isBuilding = [0];
	start-script Build();
	return (0);
}

RestoreAfterDelay()
{
	sleep Static_Var_2;
	turn aim to y-axis <0.000000> speed <100.000000>;
	wait-for-turn aim around y-axis;
	return (0);
}

Activate()
{
	start-script RequestState(0);
	return (0);
}

Deactivate()
{
	start-script RequestState(1);
	return (0);
}

StartBuilding(Func_Var_1)
{
	Static_Var_1 = Func_Var_1;
	start-script RequestState(0);
	return (0);
}

StopBuilding()
{
	start-script RequestState(1);
	return (0);
}

QueryNanoPiece(piecenum)
{
	piecenum = emitnano;
	return (0);
}

TargetHeading(Func_Var_1)
{
	Static_Var_1 = 0 - Func_Var_1;
	return (0);
}

SweetSpot(piecenum)
{
	piecenum = aim;
	return (0);
}

Killed(severity, corpsetype)
{
	if( severity <= 50 )
	{
		explode aim type SHATTER;
		return (1);
	}

	explode base type SHATTER;
	explode emitnano type SHATTER;
	explode spike type SHATTER;
	explode aim type SHATTER;
	return (2);
}
