#define TA			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"

#define HEADING_TOLERANCE	<28>
#define PITCH_TOLERANCE		<18>

piece  base, turret, sleeve, lbarrel, rbarrel, lflare, rflare, wake1, wake2, wake3, wake4, wake5,
       wake6, wake7, wake8;

static-var  Static_Var_1, Static_Var_4, gun_1;


#include "aimhelper1.h"

// Signal definitions
#define SIG_AIM				2
#define SIG_MOVE			4


BankClerck(Func_Var_1, Func_Var_2, Func_Var_3)
{
	while( TRUE )
	{
		Func_Var_1 = get PIECE_XZ(base);
		Func_Var_3 = 0;
		if( get XZ_HYPOT(Func_Var_1 - Func_Var_2) >= [2.500000] )
		{
			Func_Var_3 = 0 - get XZ_ATAN(Func_Var_2 - Func_Var_1) * 80 / 40;
		}
		turn base to z-axis Func_Var_3 speed <60.000000>;
		Func_Var_2 = Func_Var_1;
		sleep 300;
	}
	return (0);
}

WobbleUnit()
{
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 400;
	}
	while( TRUE )
	{
		if( Static_Var_4 == 1 )
		{
			move base to y-axis [2.000000] speed [2.500000];
		}
		if( Static_Var_4 == 0 )
		{
			move base to y-axis [-2.000000] speed [2.500000];
		}
		Static_Var_4 = !Static_Var_4;
		sleep 750;
	}
	return (0);
}

HitByWeapon(Func_Var_1, Func_Var_2)
{
	turn base to z-axis <0.010989> * Func_Var_2 speed <105.016484>;
	turn base to x-axis <0.010989> * Func_Var_1 speed <105.016484>;
	wait-for-turn base around z-axis;
	wait-for-turn base around x-axis;
	turn base to z-axis <0.000000> speed <30.005495>;
	turn base to x-axis <0.000000> speed <30.005495>;
	return (0);
}

SmokeUnit(healthpercent, sleeptime, smoketype)
{
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 400;
	}
	while( TRUE )
	{
		healthpercent = get HEALTH;
		if( healthpercent < 66 )
		{
			smoketype = 256 | 2;
			if( Rand( 1, 66 ) < healthpercent )
			{
				smoketype = 256 | 1;
			}
			emit-sfx smoketype from base;
		}
		sleeptime = healthpercent * 50;
		if( sleeptime < 200 )
		{
			sleeptime = 200;
		}
		sleep sleeptime;
	}
	return (0);
}

StartMoving()
{
	signal SIG_MOVE;
	set-signal-mask SIG_MOVE;
	while( TRUE )
	{
		if( Static_Var_1 <= 2 )
		{
			//emit-sfx 5 from wake1;
			emit-sfx 5 from wake2;
			//emit-sfx 5 from wake3;
			emit-sfx 5 from wake4;
			//emit-sfx 5 from wake5;
			emit-sfx 5 from wake6;
			//emit-sfx 3 from wake7;
			emit-sfx 5 from wake8;
		}
		sleep 300;
	}
	return (0);
}

StopMoving()
{
}

setSFXoccupy(Func_Var_1)
{
	Static_Var_1 = Func_Var_1;
	return (0);
}

Create()
{
	gun_1 = 0;
	call-script stopAimHelper1(<1000>,<1000>);
	start-script SmokeUnit();
	start-script WobbleUnit();
	//start-script BankClerck();
	return (0);
}


RestoreAfterDelay()
{
	sleep DEFAULT_WEAPON_RESTORE_DELAY;
	call-script stopAimHelper1(<100>,<100>);
	turn turret to y-axis <0.000000> speed <100.000000>;
	turn sleeve to x-axis <0.000000> speed <100.000000>;
	return (0);
}

AimPrimary(heading, pitch)
{
	call-script updateAimHelper1(heading,pitch,<500>,<500>,HEADING_TOLERANCE,PITCH_TOLERANCE);
	signal SIG_AIM;
	set-signal-mask SIG_AIM;
	turn turret to y-axis heading speed <500.000000>;
	turn sleeve to x-axis <0.000000> - pitch speed <500.000000>;
	if ( !aimReady1 )
	{
		wait-for-turn turret around y-axis;
		wait-for-turn sleeve around x-axis;
	}
	start-script RestoreAfterDelay();
	return (1);
}

FirePrimary()
{
	if (gun_1 == 0) {
		move lbarrel to z-axis [-1.0] now;
		emit-sfx 1024 from lflare;
		sleep 30;
		move lbarrel to z-axis [0] speed [7];
		gun_1 = 1;
		return (0);
	}
	if (gun_1 == 1) {
		move rbarrel to z-axis [-1.0] now;
		emit-sfx 1024 from rflare;
		sleep 30;
		move rbarrel to z-axis [0] speed [7];
		gun_1 = 0;
		return (0);
	}
}

AimFromPrimary(piecenum)
{
	piecenum = turret;
	return (0);
}

QueryPrimary(piecenum)
{
	if (gun_1 == 0) {
		piecenum = lflare;
		return (0);
	}
	if (gun_1 == 1) {
		piecenum = rflare;
		return (0);
	}

}

SweetSpot(piecenum)
{
	piecenum = base;
	return (0);
}

Killed(severity, corpsetype)
{
	if( severity <= 35 )
	{
		explode turret type SHATTER;
		return (1);
	}
	explode sleeve type SHATTER | EXPLODE_ON_HIT | BITMAP4;
	explode turret type SHATTER | EXPLODE_ON_HIT | BITMAP4;
	explode lbarrel type SHATTER | EXPLODE_ON_HIT | BITMAP4;
	explode rbarrel type SHATTER | EXPLODE_ON_HIT | BITMAP4;
	return (2);
}
