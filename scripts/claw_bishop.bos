#define TA			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"

#define SPEEDUP_FACTOR 160

#define HEADING_TOLERANCE	<25>
#define PITCH_TOLERANCE		<15>

piece  torso, hips, l_thigh, r_thigh, head, luparm, l1, la,la2, r1, ra, ra2, gun, g1, g2, g3, firept,ruparm, rleg, rfoot, lleg, lfoot, lthumb,rthumb;

static-var  bMoving, bAiming, canAim, mASpdFactor;

#include "aimhelper1.h"

// Signal definitions
#define SIG_AIM				2

lua_checkAllowFiring() { return 0; }
lua_checkLockTarget() { return 0; }

MotionSpeedControl(maxSpeed,currentSpeed)
{
	maxSpeed = get MAX_SPEED;
	currentSpeed = 0;
	mASpdFactor = SPEEDUP_FACTOR;
	
	while(TRUE)
	{
		currentSpeed = get CURRENT_SPEED;
		mASpdFactor = SPEEDUP_FACTOR * currentSpeed / maxSpeed;

		//call-script lua_cobDebug(mASpdFactor);
		if ( mASpdFactor < SPEEDUP_FACTOR/2 )
		{
			mASpdFactor = SPEEDUP_FACTOR/2;
		}

		sleep 60;
	}
}

walk()
{
	if( bMoving )
	{
		move hips to y-axis [-0.750000] speed [1.0];
		turn hips to x-axis <13.005495>*100/200 speed <30.000000> * mASpdFactor / 100;
		turn r_thigh to x-axis <17.225275> speed <319.000000> * mASpdFactor / 100;
		turn l_thigh to x-axis <-48.879121> speed <319.000000> * mASpdFactor / 100;
		turn lleg to x-axis <32.346154> speed <319.000000> * mASpdFactor / 100;
		turn rleg to x-axis <17.225275> speed <319.000000> * mASpdFactor / 100;
		
		turn luparm to x-axis <28.126374> speed <99.000000> * mASpdFactor / 100;
		turn l1 to x-axis <5.192308> speed <60.000000> * mASpdFactor / 100;
		if (!bAiming)
		{
			turn ruparm to x-axis <-17.934066> speed <99.000000> * mASpdFactor / 100;
			turn r1 to x-axis <-5.192308> speed <60.000000> * mASpdFactor / 100;
		}

		wait-for-turn r_thigh around x-axis;
		wait-for-turn l_thigh around x-axis;
		wait-for-turn rleg around x-axis;
		wait-for-turn lleg around x-axis;
	}
	if( bMoving )
	{
		move hips to y-axis [-0.500000]  speed [1.0];
		turn hips to x-axis <9.137363>*100/200 speed <30.000000> * mASpdFactor / 100;
		turn r_thigh to x-axis <30.236264> speed <319.000000> * mASpdFactor / 100;
		turn l_thigh to x-axis <-32.346154> speed <319.000000> * mASpdFactor / 100;
		turn lleg to x-axis <22.148352> speed <319.000000> * mASpdFactor / 100;
		turn rleg to x-axis <17.582418> speed <319.000000> * mASpdFactor / 100;
		turn luparm to x-axis <15.824176> speed <99.000000> * mASpdFactor / 100;
		turn l1 to x-axis <10.192308> speed <60.000000> * mASpdFactor / 100;
		if (!bAiming)
		{
			turn ruparm to x-axis <-20.736264> speed <99.000000> * mASpdFactor / 100;
			turn r1 to x-axis <-10.192308> speed <60.000000> * mASpdFactor / 100;
		}
		wait-for-turn r_thigh around x-axis;
		wait-for-turn l_thigh around x-axis;
		wait-for-turn rleg around x-axis;
		wait-for-turn lleg around x-axis;
	}
	if( bMoving )
	{
		move hips to y-axis [0.125000] speed [1.0];
		turn hips to x-axis <6.324176>*100/200 speed <30.000000> * mASpdFactor / 100;
		turn r_thigh to x-axis <-0.346154> speed <319.000000> * mASpdFactor / 100;
		turn l_thigh to x-axis <-22.857143> speed <319.000000> * mASpdFactor / 100;
		turn rleg to x-axis <63.637363> speed <319.000000> * mASpdFactor / 100;
		turn luparm to x-axis <9.137363> speed <99.000000> * mASpdFactor / 100;
		turn l1 to x-axis <15.192308> speed <60.000000> * mASpdFactor / 100;
		if (!bAiming)
		{
			turn ruparm to x-axis <-11.604396> speed <99.000000> * mASpdFactor / 100;
			turn r1 to x-axis <-15.192308> speed <60.000000> * mASpdFactor / 100;
		}
		wait-for-turn r_thigh around x-axis;
		wait-for-turn l_thigh around x-axis;
		wait-for-turn rleg around x-axis;
		wait-for-turn lleg around x-axis;
	}
	if( bMoving )
	{
		move hips to y-axis [0.500000] speed [1.0];
		turn hips to x-axis <2.813187>*100/200 speed <30.000000> * mASpdFactor / 100;
		turn r_thigh to x-axis <-28.478022> speed <319.000000> * mASpdFactor / 100;
		turn l_thigh to x-axis <-10.901099> speed <319.000000> * mASpdFactor / 100;
		turn rleg to x-axis <84.390110> speed <319.000000> * mASpdFactor / 100;
		turn luparm to x-axis <1.049451> speed <99.000000> * mASpdFactor / 100;
		turn l1 to x-axis <10.192308> speed <60.000000> * mASpdFactor / 100;
		if (!bAiming)
		{
			turn ruparm to x-axis <-3.159341> speed <99.000000> * mASpdFactor / 100;
			turn r1 to x-axis <-10.192308> speed <60.000000> * mASpdFactor / 100;
		}
		wait-for-turn r_thigh around x-axis;
		wait-for-turn l_thigh around x-axis;
		wait-for-turn rleg around x-axis;
		wait-for-turn lleg around x-axis;		
	}
	if( bMoving )
	{
		turn hips to x-axis <0.000000> speed <30.000000> * mASpdFactor / 100;
		turn r_thigh to x-axis <-32.346154> speed <319.000000> * mASpdFactor / 100;
		turn l_thigh to x-axis <1.401099> speed <319.000000> * mASpdFactor / 100;
		
		turn luparm to x-axis <1.747253> speed <99.000000> * mASpdFactor / 100;
		
		if (!bAiming)
		{
			turn ruparm to x-axis <4.923077> speed <99.000000> * mASpdFactor / 100;
		}
		wait-for-turn r_thigh around x-axis;
		wait-for-turn l_thigh around x-axis;
		wait-for-turn rleg around x-axis;
		wait-for-turn lleg around x-axis;		
	}
	if( bMoving )
	{
		move hips to y-axis [-0.125000] speed [1.0];
		turn hips to x-axis <4.214286>*100/200 speed <30.000000> * mASpdFactor / 100;
		turn r_thigh to x-axis <-42.901099> speed <319.000000> * mASpdFactor / 100;
		turn l_thigh to x-axis <11.247253> speed <319.000000> * mASpdFactor / 100;
		turn lleg to x-axis <29.538462> speed <319.000000> * mASpdFactor / 100;
		turn rleg to x-axis <79.467033> speed <319.000000> * mASpdFactor / 100;
		turn luparm to x-axis <-8.434066> speed <99.000000> * mASpdFactor / 100;
		turn l1 to x-axis <5.192308> speed <60.000000> * mASpdFactor / 100;
		if (!bAiming)
		{
			turn ruparm to x-axis <8.082418> speed <99.000000> * mASpdFactor / 100;
			turn r1 to x-axis <-5.192308> speed <60.000000> * mASpdFactor / 100;
		}
		wait-for-turn r_thigh around x-axis;
		wait-for-turn l_thigh around x-axis;
		wait-for-turn rleg around x-axis;
		wait-for-turn lleg around x-axis;		
	}
	if( bMoving )
	{
		move hips to y-axis [-1.125000] speed [1.0];
		turn hips to x-axis <13.005495>*100/200 speed <30.000000> * mASpdFactor / 100;
		turn r_thigh to x-axis <-48.868132> speed <319.000000> * mASpdFactor / 100;
		turn l_thigh to x-axis <12.302198> speed <319.000000> * mASpdFactor / 100;
		turn lleg to x-axis <28.835165> speed <319.000000> * mASpdFactor / 100;
		turn rleg to x-axis <32.703297> speed <319.000000> * mASpdFactor / 100;
		
		turn luparm to x-axis <-18.280220> speed <99.000000> * mASpdFactor / 100;
		turn l1 to x-axis <0.192308> speed <60.000000> * mASpdFactor / 100;
		if (!bAiming)
		{
			turn ruparm to x-axis <15.467033> speed <99.000000> * mASpdFactor / 100;
			turn r1 to x-axis <-0.192308> speed <60.000000> * mASpdFactor / 100;
			turn ra to x-axis <-45.714286> speed <139.000000> * mASpdFactor / 100;
		}
		wait-for-turn r_thigh around x-axis;
		wait-for-turn l_thigh around x-axis;
		wait-for-turn rleg around x-axis;
		wait-for-turn lleg around x-axis;		
	}
	if( bMoving )
	{
		move hips to y-axis [-0.500000] speed [1.0];
		turn hips to x-axis <9.137363>*100/200 speed <30.000000> * mASpdFactor / 100;
		turn r_thigh to x-axis <-33.758242> speed <319.000000> * mASpdFactor / 100;
		turn l_thigh to x-axis <3.159341> speed <319.000000> * mASpdFactor / 100;
		turn lleg to x-axis <47.824176> speed <319.000000> * mASpdFactor / 100;
		turn luparm to x-axis <-7.027473> speed <99.000000> * mASpdFactor / 100;
		turn l1 to x-axis <-5.192308> speed <60.000000> * mASpdFactor / 100;
		if (!bAiming)
		{
			turn ruparm to x-axis <20.747253> speed <99.000000> * mASpdFactor / 100;
			turn r1 to x-axis <5.192308> speed <60.000000> * mASpdFactor / 100;
		}
		wait-for-turn r_thigh around x-axis;
		wait-for-turn l_thigh around x-axis;
		wait-for-turn rleg around x-axis;
		wait-for-turn lleg around x-axis;		
	}
	if( bMoving )
	{
		move hips to y-axis [-0.125000] speed [1.0];
		turn hips to x-axis <6.324176>*100/200 speed <30.000000> * mASpdFactor / 100;
		turn r_thigh to x-axis <-25.670330> speed <319.000000> * mASpdFactor / 100;
		turn l_thigh to x-axis <-11.604396> speed <319.000000> * mASpdFactor / 100;
		turn lleg to x-axis <66.456044> speed <319.000000> * mASpdFactor / 100;
		turn luparm to x-axis <4.923077> speed <99.000000> * mASpdFactor / 100;
		turn l1 to x-axis <-10.192308> speed <60.000000> * mASpdFactor / 100;
		if (!bAiming)
		{
			turn ruparm to x-axis <11.247253> speed <99.000000> * mASpdFactor / 100;
			turn r1 to x-axis <10.192308> speed <60.000000> * mASpdFactor / 100;
		}
		wait-for-turn r_thigh around x-axis;
		wait-for-turn l_thigh around x-axis;
		wait-for-turn rleg around x-axis;
		wait-for-turn lleg around x-axis;		
	}
	if( bMoving )
	{
		move hips to y-axis [0.500000] speed [1.0];
		turn hips to x-axis <2.813187>*100/200 speed <30.000000> * mASpdFactor / 100;
		turn r_thigh to x-axis <-15.115385> speed <319.000000> * mASpdFactor / 100;
		turn l_thigh to x-axis <-27.071429> speed <319.000000> * mASpdFactor / 100;
		turn luparm to x-axis <14.769231> speed <99.000000> * mASpdFactor / 100;
		turn l1 to x-axis <-15.192308> speed <60.000000> * mASpdFactor / 100;
		if (!bAiming)
		{
			turn ruparm to x-axis <2.456044> speed <99.000000> * mASpdFactor / 100;
			turn r1 to x-axis <15.192308> speed <60.000000> * mASpdFactor / 100;
		}
		wait-for-turn r_thigh around x-axis;
		wait-for-turn l_thigh around x-axis;
		wait-for-turn rleg around x-axis;
		wait-for-turn lleg around x-axis;		
	}
	if( bMoving )
	{
		turn hips to x-axis <0.000000> speed <30.000000> * mASpdFactor / 100;
		turn r_thigh to x-axis <2.104396> speed <319.000000> * mASpdFactor / 100;
		turn l_thigh to x-axis <-34.104396> speed <319.000000> * mASpdFactor / 100;
		turn lleg to x-axis <68.571429> speed <319.000000> * mASpdFactor / 100;
		turn luparm to x-axis <23.560440> speed <99.000000> * mASpdFactor / 100;
		turn l1 to x-axis <-10.192308> speed <60.000000> * mASpdFactor / 100;
		if (!bAiming)
		{
			turn ruparm to x-axis <-0.346154> speed <99.000000> * mASpdFactor / 100;
			turn r1 to x-axis <10.192308> speed <60.000000> * mASpdFactor / 100;
		}
		wait-for-turn r_thigh around x-axis;
		wait-for-turn l_thigh around x-axis;
		wait-for-turn rleg around x-axis;
		wait-for-turn lleg around x-axis;		
	}
	if( bMoving )
	{
		move hips to y-axis [-0.124985] speed [1.0];
		turn hips to x-axis <4.214286>*100/200 speed <30.000000> * mASpdFactor / 100;
		turn r_thigh to x-axis <11.247253> speed <319.000000> * mASpdFactor / 100;
		turn l_thigh to x-axis <-44.302198> speed <319.000000> * mASpdFactor / 100;
		turn lleg to x-axis <75.604396> speed <319.000000> * mASpdFactor / 100;
		turn luparm to x-axis <26.368132> speed <99.000000> * mASpdFactor / 100;
		turn l1 to x-axis <-5.192308> speed <60.000000> * mASpdFactor / 100;
		if (!bAiming)
		{
			turn ruparm to x-axis <-8.082418> speed <99.000000> * mASpdFactor / 100;
			turn r1 to x-axis <5.192308> speed <60.000000> * mASpdFactor / 100;
		}
		wait-for-turn r_thigh around x-axis;
		wait-for-turn l_thigh around x-axis;
		wait-for-turn rleg around x-axis;
		wait-for-turn lleg around x-axis;	
	}
}



SmokeUnit(healthpercent, sleeptime, smoketype)
{
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 400;
	}
	while( TRUE )
	{
		healthpercent = get HEALTH;
		if( healthpercent < 66 )
		{
			smoketype = 256 | 2;
			if( Rand( 1, 66 ) < healthpercent )
			{
				smoketype = 256 | 1;
			}
			emit-sfx smoketype from torso;
		}
		sleeptime = healthpercent * 50;
		if( sleeptime < 200 )
		{
			sleeptime = 200;
		}
		sleep sleeptime;
	}
}




MotionControl(moving, aiming, justmoved)
{
	justmoved = TRUE;
	while( TRUE )
	{
		moving = bMoving;
		aiming = bAiming;
		if( moving )
		{
			call-script walk();
			justmoved = TRUE;
		}
		if( !moving )
		{
			if( justmoved )
			{
				move hips to y-axis [0] speed [4.0];
				move r_thigh to y-axis [0.000000] speed [10.000000];
				move l_thigh to y-axis [0.000000] speed [10.000000];
				turn r_thigh to x-axis <0.000000> speed <300.038462>;
				turn rleg to x-axis <0.000000> speed <300.038462>;
				turn rfoot to x-axis <0.000000> speed <300.038462>;
				turn l_thigh to x-axis <0.000000> speed <300.038462>;
				turn lleg to x-axis <0.000000> speed <300.038462>;
				turn lfoot to x-axis <0.000000> speed <300.038462>;
				turn hips to x-axis <0.000000> speed <300.038462>;
				turn head to y-axis <0.000000> speed <35.879121>;
				//if( !aiming )
				//{
					//turn torso to y-axis <0.000000> speed <90.016484>;
					//turn ra to x-axis <0.000000> speed <200.038462>;
					//turn ruparm to x-axis <0.000000> speed <200.038462>;
					//turn la to x-axis <0.000000> speed <200.038462>;
					//turn luparm to x-axis <0.000000> speed <200.038462>;
					//turn hips to x-axis <0.000000> speed <10.038462>;
				//}
				justmoved = FALSE;
			}
			sleep 100;
		}
	}
}

Open()
{
	if( canAim == FALSE )
	{
		turn r1 to y-axis <15.000000> speed <430.027473>;
		turn ruparm to x-axis <-30.000000> speed <430.027473>;
		//wait-for-turn ruparm around x-axis;
		turn r1 to x-axis <-40.000000> speed <430.027473>;
		turn r1 to z-axis <0.000000> speed <430.000000>;
		turn ra to x-axis <-70.000000> speed <430.000000>;
		turn rthumb to z-axis <-60.000000> speed <430.000000>;
		turn ra2 to x-axis <-40.000000> speed <130.000000>;
		wait-for-turn r1 around x-axis;
		wait-for-turn ra around x-axis;
		
		//sleep 250;//500
		
		move gun to y-axis [8.500000] speed [22.030597];
		
		//sleep 125;
		
		turn gun to x-axis <90.000000> speed <440.027473>;
		move gun to z-axis [11.500000] speed [28.030597];
		turn ruparm to x-axis <0.000000> speed <430.027473>;
		wait-for-turn ruparm around x-axis;
		//sleep 125;
		canAim = TRUE;
	}

}

Close()
{
	if( canAim == TRUE )
	{
		canAim = FALSE;
		move gun to z-axis [0.000000] speed [10.030597];
		sleep 125;
		turn gun to x-axis <0.000000> speed <120.027473>;
		turn ruparm to x-axis <-40.000000> speed <180.027473>;
		turn r1 to x-axis <-40.000000> speed <180.027473>;
		turn ra to x-axis <-70.000000> speed <180.027473>;
		wait-for-turn ruparm around x-axis;
		wait-for-turn r1 around x-axis;
		wait-for-turn ra around x-axis;
		sleep 250;
		turn ra2 to x-axis <-30.000000> speed <130.000000>;
		move gun to y-axis [0.000000] speed [10.030597];
		turn r1 to z-axis <0.000000> speed <430.000000>;
		turn ra to z-axis <0.000000> speed <430.000000>;
		turn rthumb to z-axis <0.000000> speed <430.000000>;
		sleep 125;
		turn ruparm to x-axis <0.000000> speed <460.027473>;
		wait-for-turn ruparm around x-axis;
	    turn r1 to x-axis <0.000000> speed <230.027473>;
		turn ra to x-axis <0.000000> speed <230.027473>;
		
		
		turn r1 to y-axis <0.000000> speed <430.027473>;
		sleep 125;
	}

}

poseControl()
{
	while( TRUE )
	{
		if (bAiming) 
		{
			if (!canaim)
			{
				call-script Open();
			}
			
		} else {
			if (canaim)
			{
				call-script Close();
			}
		}
		sleep 30;
	}
}

Create()
{
	turn la2 to x-axis <-30.000000> now;
	turn ra2 to x-axis <-30.000000> now;
	bMoving = FALSE;
	bAiming = FALSE;
	canAim = FALSE;
	call-script stopAimHelper1(<1000>,<1000>);
	start-script MotionSpeedControl();
	start-script MotionControl();
	start-script SmokeUnit();
	start-script poseControl();

}

StartMoving()
{
	bMoving = TRUE;
}

StopMoving()
{
	bMoving = FALSE;
}

RestoreAfterDelay()
{
	sleep DEFAULT_WEAPON_RESTORE_DELAY;
	call-script stopAimHelper1(<45>,<45>);
	turn torso to y-axis <0.000000> speed <90.016484>;
	turn ruparm to x-axis <0.000000> speed <45.005495>;
	turn ra to y-axis <0.000000> speed <45.005495>;
	turn luparm to x-axis <0.000000> speed <45.005495>;
	wait-for-turn torso around y-axis;
	wait-for-turn ruparm around x-axis;
	wait-for-turn ra around y-axis;
	wait-for-turn luparm around x-axis;
	sleep 3000;
	bAiming = FALSE;
	call-script Close();
	
}


AimPrimary(heading, pitch, canFire)
{
	bAiming = TRUE;
	while(!canAim)
	{
		sleep 100;
	}

	call-script updateAimHelper1(heading,pitch + <90>,<230>,<230>,HEADING_TOLERANCE,PITCH_TOLERANCE);	
	signal SIG_AIM;
	set-signal-mask SIG_AIM;
	turn torso to y-axis heading speed <230.027473>;
	turn ruparm to x-axis <05.000000> - pitch speed <230.038462>;
	turn gun to x-axis <90.000000> - pitch speed <230.038462>;
	if (!aimReady1)
	{
		wait-for-turn torso around y-axis;
		wait-for-turn ruparm around x-axis;
		wait-for-turn gun around x-axis;
	}
	start-script RestoreAfterDelay();
	// overkill prevention check
	canFire = (get GAME_FRAME) - (get WEAPON_RELOADSTATE(1)) > 0;
	if (canFire) {
		call-script lua_checkAllowFiring(1,(get TARGET_ID(1)));
		canFire = get LUA1;
	}
	if (!canFire) {
		return (0);
	}
	return (1);
}

FirePrimary()
{
	call-script lua_checkLockTarget(get TARGET_ID(1));
	turn torso to x-axis <-7.000000> now;
	emit-sfx 1024 + 0 from firept;
	sleep 130;
	turn torso to x-axis <0.000000> speed <20.071429>;
}

QueryPrimary(piecenum)
{
	piecenum = firept;
}

AimFromPrimary(piecenum)
{
	piecenum = torso;
}

SweetSpot(piecenum)
{
	piecenum = torso;
}

Killed(severity, corpsetype)
{
	if( severity <= 50 )
	{
		explode head type SHATTER;
		explode torso type SHATTER;
		return (1);
	}
	explode la2 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
	explode lfoot type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
	explode lleg type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP4;
	explode la type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP5;
	explode l_thigh type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
	explode luparm type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
	explode ra2 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP4;
	explode rfoot type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP5;
	explode rleg type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
	explode ra type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
	explode r_thigh type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
	explode ruparm type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP4;
	explode torso type SHATTER | EXPLODE_ON_HIT | BITMAP5;
	return (2);
}
