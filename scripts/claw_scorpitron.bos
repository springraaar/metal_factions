#define TA			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"

#define SPEEDUP_FACTOR 120

#define HEADING_TOLERANCE	<25>
#define PITCH_TOLERANCE		<15>

piece  base, turret, sleeve,barrel,firept,barrel2, body1,body2, lleg1, lleg2, lleg3, rleg3, rleg2, rleg1, bodysect1, head, turretholder, rleg22, rleg33, rleg11, lleg33, lleg22, lleg11,lwsup,lwdoor1,lwdoor2,lwext1,lwflare1,rwsup,rwdoor1,rwdoor2,rwext1,rwflare1;

static-var  bMoving, mASpdFactor, isOpen, charges, lastFired, lastHeading;

#include "aimhelper1.h"
#include "aimhelper2.h"
#include "aimhelper3.h"

// Signal definitions
#define SIG_AIM				2
#define SIG_AIM2			4
#define SIG_AIM3			8

// this is about 12s of continuous fire, including recharging
#define MAX_CHARGES 58
// this plus 50 should match 3x the weapon reload time, in ms
#define CHARGE_RELOAD 450	

lua_turnToTarget() { return 0; }

MotionSpeedControl(minSpeed, maxSpeed,currentSpeed) {
	maxSpeed = get MAX_SPEED;
	currentSpeed = 0;
	mASpdFactor = SPEEDUP_FACTOR;
	minSpeed = SPEEDUP_FACTOR;
	
	while(TRUE) {
		currentSpeed = get CURRENT_SPEED;
		mASpdFactor = SPEEDUP_FACTOR * currentSpeed / maxSpeed;

		if ( mASpdFactor < minSpeed ) {
			mASpdFactor = minSpeed;
		}

		sleep 60;
	}
}

SmokeUnit(healthpercent, sleeptime, smoketype) {
	while( get BUILD_PERCENT_LEFT ) {
		sleep 400;
	}
	while( TRUE ) {
		healthpercent = get HEALTH;
		if( healthpercent < 66 ) {
			smoketype = 256 | 2;
			if( Rand( 1, 66 ) < healthpercent ) {
				smoketype = 256 | 1;
			}
			emit-sfx smoketype from base;
		}
		sleeptime = healthpercent * 50;
		if( sleeptime < 200 ) {
			sleeptime = 200;
		}
		sleep sleeptime;
	}
}


recoil(anglex, anglez) {
	anglex = <-1.000000> * (get KCOS(lastHeading)) / 300;
	anglez = <-1.000000> * (get KSIN(lastHeading)) / 300;
	
	turn base to x-axis anglex speed <150.005495>;
	turn base to z-axis anglez speed <150.005495>;
	wait-for-turn base around z-axis;
	wait-for-turn base around x-axis;
	turn base to z-axis <0.000000> speed <20.000000>;
	turn base to x-axis <0.000000> speed <20.000000>;
}

chargeControl() {
	while(TRUE) {

		if (charges < MAX_CHARGES) {
			charges = charges + 1;
			sleep CHARGE_RELOAD;
		}
	
		sleep 50;
	}
}

Open() {
	
	move lwdoor1 to y-axis [2] speed [20];	
	move lwdoor2 to y-axis [-2] speed [20];
	
	move rwdoor1 to y-axis [-2] speed [20];
	move rwdoor2 to y-axis [2] speed [20];

	move lwext1 to z-axis [2] speed [40];
	move rwext1 to z-axis [2] speed [40];
	
	isOpen = TRUE;
	return (0);
}

Close() {
	isOpen = FALSE;

	move lwext1 to z-axis [0] speed [20];
	move rwext1 to z-axis [0] speed [20];
	wait-for-move lwext1 along z-axis;

	move lwdoor1 to y-axis [0] speed [20];	
	move lwdoor2 to y-axis [0] speed [20];
	
	move rwdoor1 to y-axis [0] speed [20];
	move rwdoor2 to y-axis [0] speed [20];

	return (0); 
}


walk() {
	if( bMoving ) {
		turn base to x-axis <1.000000> speed <10.000000> * mASpdFactor / 100;

		turn rleg22 to z-axis <0.000000> speed <80.000000> * mASpdFactor / 100;
		turn lleg22 to z-axis <0.000000> speed <80.000000> * mASpdFactor / 100;

		turn lleg1 to y-axis <20.000000> speed <100.967033> * mASpdFactor / 100;
		turn lleg1 to z-axis <5.016484> speed <550.104396> * mASpdFactor / 100;

		turn lleg2 to y-axis <-20.000000> speed <300.038462> * mASpdFactor / 100;
		turn lleg2 to z-axis <-15.016484> speed <60.104396> * mASpdFactor / 100;

		turn lleg3 to y-axis <45.060440> speed <120.038462> * mASpdFactor / 100;
		turn lleg3 to z-axis <5.016484> speed <550.104396> * mASpdFactor / 100;
		
		turn rleg1 to y-axis <40.412088> speed <300.060440> * mASpdFactor / 100;
		turn rleg1 to z-axis <15.016484> speed <60.104396> * mASpdFactor / 100;
		
		turn rleg2 to y-axis <-20.093407> speed <100.368132> * mASpdFactor / 100;
		turn rleg2 to z-axis <-5.016484> speed <550.104396> * mASpdFactor / 100;
		
		turn rleg3 to y-axis <15.137363> speed <300.681319> * mASpdFactor / 100;
		turn rleg3 to z-axis <15.016484> speed <60.104396> * mASpdFactor / 100;
		
		
		sleep 175 * 100 / mASpdFactor;
	}

	// only vertical
	if( bMoving ) {
		turn base to x-axis <-1.500000> speed <15.000000> * mASpdFactor / 100;
		
		turn lleg2 to z-axis <5.016484> speed <150.104396> * mASpdFactor / 100;
		turn rleg1 to z-axis <-5.016484> speed <150.104396> * mASpdFactor / 100;
		turn rleg3 to z-axis <-5.016484> speed <150.104396> * mASpdFactor / 100;
		
		sleep 175 * 100 / mASpdFactor;
	}
	
	
	if( bMoving ) {
		turn base to x-axis <1.000000> speed <10.000000> * mASpdFactor / 100;

		turn lleg1 to y-axis <-40.000000> speed <300.967033> * mASpdFactor / 100;
		turn lleg1 to z-axis <-15.016484> speed <60.104396> * mASpdFactor / 100;

		turn lleg2 to y-axis <20.000000> speed <100.038462> * mASpdFactor / 100;
		turn lleg2 to z-axis <5.016484> speed <550.104396> * mASpdFactor / 100;

		turn lleg3 to y-axis <-15.060440> speed <300.038462> * mASpdFactor / 100;
		turn lleg3 to z-axis <-15.016484> speed <60.104396> * mASpdFactor / 100;

		turn rleg1 to y-axis <-20.412088> speed <100.060440> * mASpdFactor / 100;
		turn rleg1 to z-axis <-5.016484> speed <550.104396> * mASpdFactor / 100;
		
		turn rleg2 to y-axis <20.093407> speed <300.368132> * mASpdFactor / 100;
		turn rleg2 to z-axis <15.016484> speed <60.104396> * mASpdFactor / 100;
		
		turn rleg3 to y-axis <-45.137363> speed <120.681319> * mASpdFactor / 100;
		turn rleg3 to z-axis <-5.016484> speed <550.104396> * mASpdFactor / 100;
		
		sleep 175 * 100 / mASpdFactor;
	}
	
	// only vertical
	if( bMoving ) {
		turn base to x-axis <-1.500000> speed <15.000000> * mASpdFactor / 100;
	
		turn rleg22 to z-axis <0.000000> speed <80.000000> * mASpdFactor / 100;
		turn lleg22 to z-axis <0.000000> speed <80.000000> * mASpdFactor / 100;

		turn lleg1 to z-axis <5.016484> speed <150.104396> * mASpdFactor / 100;
		turn lleg3 to z-axis <5.016484> speed <150.104396> * mASpdFactor / 100;
		turn rleg2 to z-axis <-5.016484> speed <150.104396> * mASpdFactor / 100;
	
		
		sleep 175 * 100 / mASpdFactor;
	}
	
}

Stop() {
	turn base to z-axis <0.000000> speed <7.000000>;
	turn base to x-axis <0.000000> speed <7.000000>;
	turn lleg1 to y-axis <-15.000000> speed <237.000000>;
	turn lleg1 to z-axis <0.000000> speed <237.000000>;
	turn lleg2 to y-axis <0.000000> speed <237.000000>;
	turn lleg2 to z-axis <0.000000> speed <237.000000>;
	turn lleg3 to y-axis <15.000000> speed <237.000000>;
	turn lleg3 to z-axis <0.000000> speed <237.000000>;
	turn rleg3 to y-axis <-15.000000> speed <237.000000>;
	turn rleg3 to z-axis <0.000000> speed <237.000000>;
	turn rleg2 to y-axis <0.000000> speed <237.000000>;
	turn rleg2 to z-axis <0.000000> speed <237.000000>;
	turn rleg1 to y-axis <15.000000> speed <237.000000>;
	turn rleg1 to z-axis <0.000000> speed <237.000000>;

}

MotionControl(moving) {
	while( TRUE ) {
		moving = bMoving;
		if( moving ) {
			call-script walk();
		}
		if( !moving ) {
			call-script Stop();
			sleep 100;
		}
	}
}

Create() {
	isOpen=FALSE;
	charges = MAX_CHARGES;
	bMoving = FALSE;
	lastFired=0;
	lastHeading = 0;
	call-script stopAimHelper1(<1000>,<1000>);
	call-script stopAimHelper2(<1000>,<1000>);
	call-script stopAimHelper3(<1000>,<1000>);
	start-script chargeControl();
	start-script MotionSpeedControl();
	start-script MotionControl();
	start-script SmokeUnit();
}

StartMoving() {
	bMoving = TRUE;
}

StopMoving() {
	bMoving = FALSE;
}

RestoreAfterDelay1() {
	sleep DEFAULT_WEAPON_RESTORE_DELAY;
	call-script stopAimHelper1(<120>,<120>);
	turn lwsup to y-axis <0.000000> speed <120.000000>;
	turn lwsup to x-axis <0.000000> speed <120.000000>;
}
RestoreAfterDelay2()
{
	sleep DEFAULT_WEAPON_RESTORE_DELAY;
	call-script stopAimHelper2(<120>,<120>);
	turn rwsup to y-axis <0.000000> speed <120.000000>;
	turn rwsup to x-axis <0.000000> speed <120.000000>;
	call-script Close();
}

RestoreAfterDelay3()
{
	sleep DEFAULT_WEAPON_RESTORE_DELAY;
	call-script stopAimHelper3(<120>,<120>);
	turn turret to y-axis <0.000000> speed <120.000000>;
	turn sleeve to x-axis <0.000000> speed <120.000000>;
	lastHeading = 0;
}


AimPrimary(heading, pitch) {
	if( ! isOpen) {
		call-script Open();
	}

	// make unit turn to face target
	if (!bMoving && (get ABS(heading) > <30>)) {
		call-script lua_turnToTarget(1,10);
	}
	if (get ABS(heading) > <50>) {
		sleep 100;
	}

	call-script updateAimHelper1(heading,pitch,<600>,<600>,HEADING_TOLERANCE,PITCH_TOLERANCE);
	signal SIG_AIM;
	set-signal-mask SIG_AIM;
	
	turn lwsup to y-axis heading speed <600.000000>;
	turn lwsup to x-axis <0.000000> - pitch speed <600.000000>;
	if (!aimReady1) {
		wait-for-turn lwsup around x-axis;
		wait-for-turn lwsup around y-axis;
	}

	while( charges == 0 || (charges < 2 && lastFired == 1)) {
		sleep 100;
	}

	start-script RestoreAfterDelay1();
	return (1);
}

FirePrimary() {
	charges = charges -1;
	lastFired=1;
	emit-sfx 1024+0 from lwflare1;
	return (0);
}

AimFromPrimary(piecenum) {
	piecenum = lwsup;
}

QueryPrimary(piecenum) {
	piecenum = lwflare1;
	return (0);
}


AimSecondary(heading, pitch) {
	if( ! isOpen) {
		call-script Open();
	}

	// make unit turn to face target
	if (!bMoving && (get ABS(heading) > <30>)) {
		call-script lua_turnToTarget(1,10);
	}
	if (get ABS(heading) > <50>) {
		sleep 100;
	}
	call-script updateAimHelper2(heading,pitch,<600>,<600>,HEADING_TOLERANCE,PITCH_TOLERANCE);
	signal SIG_AIM2;
	set-signal-mask SIG_AIM2;

	turn rwsup to y-axis heading speed <600.000000>;
	turn rwsup to x-axis <0.000000> - pitch speed <600.000000>;
	if (!aimReady2) {
		wait-for-turn rwsup around x-axis;
		wait-for-turn rwsup around y-axis;
	}

	while( charges == 0 || (charges < 2 && lastFired == 2)) {
		sleep 100;
	}
	
	start-script RestoreAfterDelay2();
	return (1);
}

FireSecondary() {
	charges = charges -1;
	lastFired=2;
	emit-sfx 1024+0 from rwflare1;
	return (0);
}

AimFromSecondary(piecenum) {
	piecenum = rwsup;
}

QuerySecondary(piecenum) {
	piecenum = rwflare1;
	return (0);
}

AimTertiary(heading, pitch) {
	call-script updateAimHelper3(heading,pitch,<300>,<300>,HEADING_TOLERANCE,PITCH_TOLERANCE);
	signal SIG_AIM3;
	set-signal-mask SIG_AIM3;
	turn turret to y-axis heading speed <300.000000>;
	turn sleeve to x-axis <0.000000> - pitch speed <300.000000>;
	if (!aimReady3)	{
		wait-for-turn sleeve around x-axis;
		wait-for-turn turret around y-axis;
	}
	lastHeading = heading;
	start-script RestoreAfterDelay3();
	return (1);
}

FireTertiary() {
	move barrel2 to z-axis [-3] now;
	emit-sfx 1024+1 from firept;
	call-script recoil();
	sleep 200;
	move barrel2 to z-axis [0] speed [6];
	return (0);
}

AimFromTertiary(piecenum) {
	piecenum = turret;
}

QueryTertiary(piecenum) {
	piecenum = firept;
	return (0);
}

Killed(severity, corpsetype) {
	if( severity <= 50 ) {
		explode bodysect1 type SHATTER;
		explode barrel type SHATTER;
		explode lleg2 type SHATTER;
		explode rleg3 type SHATTER;
		return (1);
	}
	explode head type SHATTER | SMOKE | EXPLODE_ON_HIT | BITMAP3;
	explode bodysect1 type SHATTER;
	explode lleg1 type SHATTER;
	explode lleg2 type SHATTER;
	explode lleg3 type SHATTER;
	explode rleg3 type SHATTER;
	explode rleg2 type SHATTER;
	explode rleg1 type SHATTER;
	explode turretholder type SHATTER;
	return (2);
}
