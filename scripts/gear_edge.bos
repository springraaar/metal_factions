#define TA			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"

#define HEADING_TOLERANCE	<25>
#define PITCH_TOLERANCE		<15>

piece  base, turret1, sleeve1, barrel11, flare11, barrel12, flare12, turret2, sleeve2, flare2, b2,  wake1, wake2, turret3, sleeve3, barrel3, flare3, turret4, sleeve4, barrel4, flare4, tur2, tur3, logo, logo2, tl, tr, b22;

static-var  gun_2, bAiming, gun_1, lastHeading,  Static_Var_6, Static_Var_7;

#include "aimhelper1.h"
#include "aimhelper2.h"

// Signal definitions
#define SIG_AIM				1
#define SIG_AIM_2			2
#define SIG_AIM_3			4
#define SIG_AIM_4			8
#define SIG_MOVE			128


Abs(Func_Var_1)
{
	if( Func_Var_1 >= 0 )
	{
		Static_Var_6 = Func_Var_1;
	}
	else
	{
		Static_Var_6 = 0 - Func_Var_1;
	}
	return (0);
}

ProjXPW(Func_Var_1, Func_Var_2)
{
	if( Func_Var_2 < -21840 )
	{
		Static_Var_6 = Func_Var_1 * ( Func_Var_2 + 32760 ) / 10920;
	}
	else if( Func_Var_2 > 21840 )
	{
		Static_Var_6 = Func_Var_1 * ( 32760 - Func_Var_2 ) / 10920;
	}
	else if( Func_Var_2 < -10920 )
	{
		Static_Var_6 = 0 - Func_Var_1;
	}
	else if( Func_Var_2 > 10920 )
	{
		Static_Var_6 = Func_Var_1;
	}
	else
	{
		Static_Var_6 = Func_Var_1 * Func_Var_2 / 10920;
	}
	return (0);
}

ProjZPW(Func_Var_1, Func_Var_2)
{
	if( Func_Var_2 < -27300 OR Func_Var_2 > 27300 )
	{
		Static_Var_6 = 0 - Func_Var_1;
	}
	else if( Func_Var_2 > 5460 )
	{
		Static_Var_6 = Func_Var_1 * ( 16380 - Func_Var_2 ) / 10920;
	}
	else if( Func_Var_2 < -5460 )
	{
		Static_Var_6 = Func_Var_1 * ( Func_Var_2 + 16380 ) / 10920;
	}
	else
	{
		Static_Var_6 = Func_Var_1;
	}
	return (0);
}

RockZInit()
{
	Static_Var_7 = 0;
	return (0);
}

RockZ(Func_Var_1, Func_Var_2)
{
	signal 16;
	set-signal-mask 16;
	call-script ProjXPW(10920 / Func_Var_2,Func_Var_1);
	Static_Var_7 = Static_Var_7 + Static_Var_6;
	call-script Abs(Static_Var_7);
	while( Static_Var_6 > 91 )
	{
		turn base to z-axis Static_Var_7 speed Static_Var_6 * <0.016484>;
		wait-for-turn base around z-axis;
		Static_Var_7 = Static_Var_7 * -1 / 2;
		call-script Abs(Static_Var_7);
	}
	turn base to z-axis <0.000000> speed <0.500000> * <0.016484>;
	return (0);
}

SmokeUnit(healthpercent, sleeptime, smoketype)
{
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 400;
	}
	spin b2 around z-axis speed <120.000000>;
	while( TRUE )
	{
		healthpercent = get HEALTH;
		if( healthpercent < 66 )
		{
			smoketype = 256 | 2;
			if( Rand( 1, 66 ) < healthpercent )
			{
				smoketype = 256 | 1;
			}
			emit-sfx smoketype from base;
		}
		sleeptime = healthpercent * 50;
		if( sleeptime < 200 )
		{
			sleeptime = 200;
		}
		sleep sleeptime;
	}
	return (0);
}

Create()
{
	gun_1 = [0];
	bAiming = TRUE;
	call-script stopAimHelper1(<1000>,<1000>);
	call-script stopAimHelper2(<1000>,<1000>);
	start-script SmokeUnit();
	call-script RockZInit();
	return (0);
}

RestoreWeapon4()
{
	sleep DEFAULT_WEAPON_RESTORE_DELAY;
	turn turret4 to y-axis <0.000000> speed <150.000000>;
	turn sleeve4 to x-axis <0.000000> speed <150.000000>;
	return (0);
}
RestoreWeapon3()
{
	sleep DEFAULT_WEAPON_RESTORE_DELAY;
	turn turret3 to y-axis <0.000000> speed <150.000000>;
	turn sleeve3 to x-axis <0.000000> speed <150.000000>;
	return (0);
}
RestoreSecondary()
{
	sleep DEFAULT_WEAPON_RESTORE_DELAY;
	call-script stopAimHelper2(<50>,<50>);
	turn turret2 to y-axis <0.000000> speed <50.000000>;
	turn sleeve2 to x-axis <0.000000> speed <50.000000>;
	return (0);
}
RestoreAfterDelay()
{
	sleep DEFAULT_WEAPON_RESTORE_DELAY;
	call-script stopAimHelper1(<50>,<50>);
	turn turret1 to y-axis <0.000000> speed <50.000000>;
	turn sleeve1 to x-axis <0.000000> speed <50.000000>;
	return (0);
}



StartMoving()
{
	signal SIG_MOVE;
	set-signal-mask SIG_MOVE;
	while( TRUE )
	{
		emit-sfx 2 from wake1;
		emit-sfx 2 from wake2;
		sleep 300;
	}
	return (0);
}

StopMoving()
{
	signal SIG_MOVE;
	return (0);
}

AimWeapon4(heading, pitch)
{
	signal SIG_AIM_4;
	set-signal-mask SIG_AIM_4;
	turn turret4 to y-axis heading speed <100.000000>;
	turn sleeve4 to x-axis <0> - pitch speed <100.000000>;
	wait-for-turn turret4 around y-axis;
	wait-for-turn sleeve4 around x-axis;
	start-script RestoreWeapon4();
	return (1);
}
AimWeapon3(heading, pitch)
{
	signal SIG_AIM_3;
	set-signal-mask SIG_AIM_3;
	turn turret3 to y-axis heading speed <100.000000>;
	turn sleeve3 to x-axis <0> - pitch speed <100.000000>;
	wait-for-turn turret3 around y-axis;
	wait-for-turn sleeve3 around x-axis;
	start-script RestoreWeapon3();
	return (1);
}

AimSecondary(heading, pitch)
{
	call-script updateAimHelper2(heading,pitch,<100>,<100>,HEADING_TOLERANCE,PITCH_TOLERANCE);
	signal SIG_AIM_2;
	set-signal-mask SIG_AIM_2;
	turn turret2 to y-axis heading speed <100.000000>;
	turn sleeve2 to x-axis <0> - pitch speed <100.000000>;
	if (!aimReady2)
	{
		wait-for-turn turret2 around y-axis;
		wait-for-turn sleeve2 around x-axis;
	}
	start-script RestoreSecondary();
	return (1);
}

AimPrimary(heading, pitch)
{
	call-script updateAimHelper1(heading,pitch,<70>,<70>,HEADING_TOLERANCE,PITCH_TOLERANCE);
	signal SIG_AIM;
	set-signal-mask SIG_AIM;
	turn turret1 to y-axis heading speed <70.000000>;
	turn sleeve1 to x-axis <0.000000> - pitch speed <70.000000>;
	if (!aimReady1)
	{
		wait-for-turn turret1 around y-axis;
		wait-for-turn sleeve1 around x-axis;
	}

	start-script RestoreAfterDelay();
	lastHeading = heading;
	return (1);
}

FireWeapon4()
{
	emit-sfx 1024 + 2 from flare4;
}

FireWeapon3()
{
	emit-sfx 1024 + 2 from flare3;
}

FireSecondary()
{
	emit-sfx 1024 + 1 from flare2;
}

FirePrimary()
{
	//start-script RockZ(-5,lastHeading);
	if( gun_1 == [0] )
	{
		emit-sfx 1024 + 0 from flare11;
		move barrel11 to z-axis [-6.250000] now;
		sleep 150;
		gun_1 = [1];
		move barrel11 to z-axis [0.000000] speed [4.500000];
		return (0);
	}
	if( gun_1 == [1] )
	{
		emit-sfx 1024 + 0 from flare12;
		move barrel12 to z-axis [-6.250000] now;
		sleep 150;
		gun_1 = [0];
		move barrel12 to z-axis [0.000000] speed [4.500000];
		return (0);
	}
}

AimFromWeapon4(piecenum)
{
	piecenum = turret4;
	return (0);
}
AimFromWeapon3(piecenum)
{
	piecenum = turret3;
	return (0);
}
AimFromSecondary(piecenum)
{
	piecenum = turret2;
	return (0);
}
AimFromPrimary(piecenum)
{
	piecenum = turret1;
	return (0);
}

QueryWeapon4(piecenum)
{
	piecenum = flare4;
	return (0);
}

QueryWeapon3(piecenum)
{
	piecenum = flare3;
	return (0);
}

QuerySecondary(piecenum)
{
	piecenum = flare2;
	return (0);
}

QueryPrimary(piecenum)
{
	if( gun_1 == [0] )
	{
		piecenum = flare11;
		return (0);
	}
	if( gun_1 == [1] )
	{
		piecenum = flare12;
		return (0);
	}
}

SweetSpot(piecenum)
{
	piecenum = base;
	return (0);
}

Killed(severity, corpsetype)
{
	if( severity <= 50 )
	{
		explode b22 type SHATTER | EXPLODE_ON_HIT | BITMAP5;
		explode logo type SHATTER | EXPLODE_ON_HIT | BITMAP5;
		explode tl type SHATTER | EXPLODE_ON_HIT | BITMAP5;
		explode tr type SHATTER | EXPLODE_ON_HIT | BITMAP5;
		explode logo2 type SHATTER | EXPLODE_ON_HIT | BITMAP5;
		explode tur3 type SHATTER | EXPLODE_ON_HIT | BITMAP5;
		explode tur2 type SHATTER | EXPLODE_ON_HIT | BITMAP5;		
		return (1);
	}
	explode b22 type SHATTER | EXPLODE_ON_HIT | BITMAP5;
	explode logo type SHATTER | EXPLODE_ON_HIT | BITMAP5;
	explode tl type SHATTER | EXPLODE_ON_HIT | BITMAP5;
	explode tr type SHATTER | EXPLODE_ON_HIT | BITMAP5;
	explode logo2 type SHATTER | EXPLODE_ON_HIT | BITMAP5;
	explode tur3 type SHATTER | EXPLODE_ON_HIT | BITMAP5;
	explode tur2 type SHATTER | EXPLODE_ON_HIT | BITMAP5;
	return (2);
}
