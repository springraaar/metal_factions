#define TA			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"

#define HEADING_TOLERANCE	<25>
#define PITCH_TOLERANCE		<25>

piece ground, hips,torso,left,right,lflare1,lflare2,lflare3,rflare1,rflare2,rflare3,sphere,shieldpt;

static-var bMoving,bAiming,firept1;

#include "aimhelper1.h"

// Signal definitions
#define SIG_AIM				2


Create()
{
	firept1 = [0];
	bMoving=FALSE;
	bAiming=FALSE;
	call-script stopAimHelper1(<1000>,<1000>);
}



SweetSpot(piecenum)
{
	piecenum = sphere;
}

RestoreAfterDelayWeapon()
{
	//aim1=FALSE;
	sleep DEFAULT_WEAPON_RESTORE_DELAY;
	call-script stopAimHelper1(<100>,<100>);
	turn torso to y-axis <0.000000> speed <100.016484>;
	bAiming = FALSE;
}


AimFromPrimary(piecenum)
{
	piecenum = torso;
}


QueryPrimary(piecenum)
{
	if(firept1 == [0])
	{
		piecenum = lflare1;
		return;
	}
	if(firept1 == [1])
	{
		piecenum = rflare1;
		return;
	}
	if(firept1 == [2])
	{
		piecenum = lflare2;
		return;
	}
	if(firept1 == [3])
	{
		piecenum = rflare2;
		return;
	}	
	if(firept1 == [4])
	{
		piecenum = lflare3;
		return;
	}
	if(firept1 == [5])
	{
		piecenum = rflare3;
		return;
	}
}


Shot1()
{

	if( firept1==[0] )
	{
		emit-sfx 1024 + 0 from lflare1;
		firept1=[1];
		return (0);
	}
	if( firept1==[1] )
	{
		emit-sfx 1024 + 0 from rflare1;
		firept1=[2];
		return (0);
	}
	if( firept1==[2] )
	{
		emit-sfx 1024 + 0 from lflare2;
		firept1=[3];
		return (0);
	}
	if( firept1==[3] )
	{
		emit-sfx 1024 + 0 from rflare2;
		firept1=[4];
		return (0);
	}

	if( firept1==[4] )
	{
		emit-sfx 1024 + 0 from lflare3;
		firept1=[5];
		return (0);
	}
	if( firept1==[5] )
	{
		emit-sfx 1024 + 0 from rflare3;
		firept1=[0];
		return (0);
	}
}



AimPrimary(heading, pitch)
{
	call-script updateAimHelper1(heading,pitch,<150>,<1500>,HEADING_TOLERANCE,PITCH_TOLERANCE);
	signal SIG_AIM;
	set-signal-mask SIG_AIM;
	bAiming = TRUE;
	
	//aim1=TRUE;
	turn torso to y-axis heading speed <150.027473>;
	if (!aimReady1)
	{
		wait-for-turn torso around y-axis;
	}
	start-script RestoreAfterDelayWeapon();
	return (1);
}



QuerySecondary(piecenum)
{
	piecenum = shieldpt;
	return (0);
}

AimFromSecondary(piecenum)
{
	piecenum = shieldpt;
	return (0);
}

AimSecondary(heading, pitch)
{
	return (1);
}



Killed(severity, corpsetype)
{
	if( severity <= 50 )
	{
		explode sphere type SHATTER | BITMAP4;
		explode sphere type SHATTER | BITMAP4;
		return (1);
	}
	explode sphere type SHATTER | BITMAP4;
	explode sphere type SHATTER | BITMAP4;
	return (2);
}

