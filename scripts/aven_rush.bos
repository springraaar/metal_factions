#define TA			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"

piece  base, wake1, wake2, torpedodrop, hull, bottom, h2, left, right, chargept2;

static-var  restore_delay;

// Signal definitions
#define SIG_AIM				2
#define SIG_MOVE			8


SmokeUnit(healthpercent, sleeptime, smoketype)
{
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 400;
	}
	while( TRUE )
	{
		healthpercent = get HEALTH;
		if( healthpercent < 66 )
		{
			smoketype = 256 | 2;
			if( Rand( 1, 66 ) < healthpercent )
			{
				smoketype = 256 | 1;
			}
			emit-sfx smoketype from base;
		}
		sleeptime = healthpercent * 50;
		if( sleeptime < 200 )
		{
			sleeptime = 200;
		}
		sleep sleeptime;
	}
	return (0);
}

Create()
{
	restore_delay = 3000;
	start-script SmokeUnit();
	return (0);
}

SetMaxReloadTime(Func_Var_1)
{
	restore_delay = Func_Var_1 * 2;
	return (0);
}

RestoreAfterDelay()
{
	sleep restore_delay;
	return (0);
}

StartMoving()
{
	signal SIG_MOVE;
	set-signal-mask SIG_MOVE;
	while( TRUE )
	{
		emit-sfx 2 from wake1;
		emit-sfx 2 from wake2;
		sleep 300;
	}
	return (0);
}

StopMoving()
{
	signal SIG_MOVE;
	return (0);
}

AimPrimary(heading, pitch)
{
	signal SIG_AIM;
	set-signal-mask SIG_AIM;
	return (1);
}


FirePrimary()
{
	return (0);
}

AimFromPrimary(piecenum)
{
	piecenum = torpedodrop;
	return (0);
}


QueryPrimary(piecenum)
{
	piecenum = torpedodrop;
	return (0);
}


AimSecondary(heading, pitch)
{
	return (1);
}

FireSecondary()
{
	return (0);
}

AimFromSecondary(piecenum)
{
	piecenum = chargept2;
	return (0);
}

QuerySecondary(piecenum)
{
	piecenum = chargept2;
}

SweetSpot(piecenum)
{
	piecenum = base;
	return (0);
}

Killed(severity, corpsetype)
{
	if( severity <= 50 )
	{
		explode hull type SHATTER | EXPLODE_ON_HIT | BITMAP2;
		explode bottom type SHATTER | EXPLODE_ON_HIT | BITMAP2;
		explode h2 type SHATTER | EXPLODE_ON_HIT | BITMAP2;
		return (1);
	}
	explode hull type SHATTER | EXPLODE_ON_HIT | BITMAP2;
	explode bottom type SHATTER | EXPLODE_ON_HIT | BITMAP2;
	explode h2 type SHATTER | EXPLODE_ON_HIT | BITMAP2;
	explode left type SHATTER | EXPLODE_ON_HIT | BITMAP2;
	explode right type SHATTER | EXPLODE_ON_HIT | BITMAP2;
	return (2);
}