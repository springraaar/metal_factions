#define TAK			// This is a TAK script

#include "sfxtype.h"
#include "exptype.h"

#define SPEEDUP_FACTOR 	100

#define HEADING_TOLERANCE	<25>
#define PITCH_TOLERANCE		<15>

piece  base, turret, sleeves, barrel1, barrel2, flare1, flare2, t1,t2,t1cover,t2cover,body,left,right,b2, tur2;

static-var  gun_1;

#include "aimhelper1.h"

// Signal definitions
#define SIG_AIM				2

#include "tankthreads.h"

RockUnit(anglex, anglez)
{
	anglex = anglex * 100/200;
	anglez = anglez * 100/200;
	turn base to x-axis anglex speed <40.005495>;
	turn base to z-axis <0>-anglez speed <40.005495>;
	wait-for-turn base around z-axis;
	wait-for-turn base around x-axis;
	turn base to z-axis <0.000000> speed <15.000000>;
	turn base to x-axis <0.000000> speed <15.000000>;
}

RestoreAfterDelay()
{
	sleep DEFAULT_WEAPON_RESTORE_DELAY;
	call-script stopAimHelper1(<100>,<100>);
	turn turret to y-axis <0.000000> speed <100.021978>;
	turn sleeves to x-axis <0.000000> speed <100.010989>;
	return;
}



AimFromWeapon1(piecenum)
{
	piecenum = turret;
	return;
}

QueryWeapon1(piecenum)
{
	if( gun_1 == 0 )
	{
		piecenum = flare1;
	}
	else
	{
		piecenum = flare2;
	}
	return;
}

AimWeapon1(heading, pitch)
{
	call-script updateAimHelper1(heading,pitch,<120>,<120>,HEADING_TOLERANCE,PITCH_TOLERANCE);
	signal SIG_AIM;
	set-signal-mask SIG_AIM;
	turn turret to y-axis heading speed <120.021978>;
	turn sleeves to x-axis <0.000000> - pitch speed <120.010989>;
	if (!aimReady1)
	{
		wait-for-turn turret around y-axis;
		wait-for-turn sleeves around x-axis;
	}
	start-script RestoreAfterDelay();
	return (1);
}

Shot1()
{
	if( gun_1 == 0 )
	{
		move barrel1 to z-axis [-5.000000] now;
		emit-sfx 1024 from flare1;
		sleep 150;
		move barrel1 to z-axis [0.000000] speed [10.000000];
		gun_1 = 1;
	}
	else
	{
		move barrel2 to z-axis [-5.000000] now;
		emit-sfx 1024 from flare2;
		sleep 150;
		move barrel2 to z-axis [0.000000] speed [10.000000];
		gun_1 = 0;
	}
	return;
}

Killed(severity, corpsetype)
{
	if( severity < 50 )
	{
		explode sleeves type SHATTER;
		explode barrel1 type SHATTER;
		explode barrel2 type SHATTER;
		return (1);
	}
	explode sleeves type SHATTER;
	explode barrel1 type SHATTER;
	explode barrel2 type SHATTER;
	explode turret type SHATTER;
	explode t1cover type SHATTER;
	explode t2cover type SHATTER;
	return (2);
}

Create()
{
	gun_1 = 0;
	call-script stopAimHelper1(<1000>,<1000>);
	start-script AnimateTracks();
	return;
}
