#define TA			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"

#define HEADING_TOLERANCE	<25>
#define PITCH_TOLERANCE		<15>

piece  flare1, flare2, chrgflare, base, turret,barrel1, barrel2, wake1,
       wake2, sleeves;

static-var  gun_1;

#include "aimhelper1.h"

// Signal definitions
#define SIG_AIM				2
#define SIG_AIM_3			4
#define SIG_MOVE			8



SmokeUnit(healthpercent, sleeptime, smoketype)
{
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 400;
	}
	while( TRUE )
	{
		healthpercent = get HEALTH;
		if( healthpercent < 66 )
		{
			smoketype = 256 | 2;
			if( Rand( 1, 66 ) < healthpercent )
			{
				smoketype = 256 | 1;
			}
			emit-sfx smoketype from base;
		}
		sleeptime = healthpercent * 50;
		if( sleeptime < 200 )
		{
			sleeptime = 200;
		}
		sleep sleeptime;
	}
}

Create()
{
	hide flare1;
	hide flare2;
	gun_1 = [0];
	call-script stopAimHelper1(<1000>,<1000>);
	start-script SmokeUnit();
}

RestoreAfterDelay()
{
	sleep DEFAULT_WEAPON_RESTORE_DELAY;
	call-script stopAimHelper1(<50>,<50>);
	turn turret to y-axis <0.000000> speed <50.000000>;
	turn sleeves to x-axis <0.000000> speed <50.000000>;
}

StartMoving()
{
	signal SIG_MOVE;
	set-signal-mask SIG_MOVE;
	while( TRUE )
	{
		emit-sfx 2 from wake1;
		emit-sfx 2 from wake2;
		sleep 300;
	}
}

StopMoving()
{
	signal SIG_MOVE;
}

AimPrimary(heading, pitch)
{
	call-script updateAimHelper1(heading,pitch,<80>,<80>,HEADING_TOLERANCE,PITCH_TOLERANCE);
	signal SIG_AIM;
	set-signal-mask SIG_AIM;
	turn turret to y-axis heading speed <80.000000>;
	turn sleeves to x-axis <0.000000> - pitch speed <80.000000>;
	if (!aimReady1)
	{
		wait-for-turn turret around y-axis;
		wait-for-turn sleeves around x-axis;
	}
	start-script RestoreAfterDelay();
	return (1);
}

FirePrimary()
{
	if( gun_1 == [0] )
	{
		move barrel1 to z-axis [-7.500000] now;
		emit-sfx 1024 + 0 from flare1;
		sleep 150;
		move barrel1 to z-axis [0.000000] speed [7.500000];
		gun_1 = [1];
		return (0);
	}
	if( gun_1 == [1] )
	{
		move barrel2 to z-axis [-7.500000] now;
		emit-sfx 1024 + 0 from flare2;
		sleep 150;
		move barrel2 to z-axis [0.000000] speed [7.500000];
		gun_1 = [0];
		return (0);
	}
	
}

AimFromPrimary(piecenum)
{
	piecenum = turret;
}

QueryPrimary(piecenum)
{
	if( gun_1 == [0] )
	{
		piecenum = flare1;
	}
	if( gun_1 == [1] )
	{
		piecenum = flare2;
	}
}

AimTertiary(heading, pitch)
{
	signal SIG_AIM_3;
	set-signal-mask SIG_AIM_3;
	return (1);
}

AimFromTertiary(piecenum)
{
	piecenum = chrgflare;
}

QueryTertiary(piecenum)
{
	piecenum = chrgflare;
}

FireTertiary()
{
	return (1);
}

Killed(severity, corpsetype)
{
	hide flare1;
	hide flare2;
	if( severity <= 25 )
	{
		explode barrel1 type SHATTER;
		explode barrel2 type SHATTER;
		explode sleeves type SHATTER;
		explode turret type SHATTER;
		return (1);
	}
	explode barrel1 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
	explode barrel2 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
	explode base type SHATTER;
	explode sleeves type SHATTER | EXPLODE_ON_HIT | BITMAP1;
	explode turret type BITMAPONLY | BITMAP2;
	return (2);
}
