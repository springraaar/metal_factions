#define TA			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"

piece  base, center, c3, c2, spinner, s2, s3, s4,b1,b2,b3,b4,b5;

static-var  rotSpeed, statechg_DesiredState, statechg_StateChanging;

#define STATE_OFF	0
#define STATE_ON	1


SmokeUnit(healthpercent, sleeptime, smoketype)
{
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 400;
	}
	while( TRUE )
	{
		healthpercent = get HEALTH;
		if( healthpercent < 66 )
		{
			smoketype = 256 | 2;
			if( Rand( 1, 66 ) < healthpercent )
			{
				smoketype = 256 | 1;
			}
			emit-sfx smoketype from base;
		}
		sleeptime = healthpercent * 50;
		if( sleeptime < 200 )
		{
			sleeptime = 200;
		}
		sleep sleeptime;
	}
	return (0);
}

Go()
{
	if (statechg_DesiredState == STATE_ON)
	{
		spin spinner around y-axis speed rotSpeed accelerate <30>;
	}
	return (0);	
}

Stop()
{
	if (statechg_DesiredState == STATE_OFF)
	{
		stop-spin spinner around y-axis decelerate <20>;
	}
	return (0);
}

InitState()
{
	statechg_DesiredState = STATE_OFF;
	statechg_StateChanging = FALSE;
	return (0);
}

RequestState(requestedstate, currentstate)
{
	if( statechg_StateChanging )
	{
		statechg_DesiredState = requestedstate;
		return (0);
	}
	statechg_StateChanging = TRUE;
	currentstate = statechg_DesiredState;
	statechg_DesiredState = requestedstate;
	while( statechg_DesiredState != currentstate )
	{
		if( statechg_DesiredState == STATE_ON )
		{
			call-script Go();
			currentstate = STATE_ON;
		}
		if( statechg_DesiredState == STATE_OFF )
		{
			call-script Stop();
			currentstate = STATE_OFF;
		}
	}
	statechg_StateChanging = FALSE;
	return (0);
}

Create()
{
	rotSpeed = 0;
	call-script InitState();
	start-script SmokeUnit();
	return (0);
}

Activate()
{
	start-script RequestState(STATE_ON);
	return (0);
}

Deactivate()
{
	start-script RequestState(STATE_OFF);
	return (0);
}

SetSpeed(Func_Var_1)
{
	rotSpeed = Func_Var_1 * 13;
	return (0);
}

Killed(severity, corpsetype)
{
	if( severity <= 50 )
	{
		explode spinner type SHATTER;
		return (1);
	}

	explode center type SHATTER;
	explode spinner type SHATTER;
	explode s2 type SHATTER;
	explode s3 type SHATTER;
	explode c2 type SHATTER;
	explode c3 type SHATTER;
	explode b1 type SHATTER;
	explode b2 type SHATTER;
	explode b3 type SHATTER;
	explode b4 type SHATTER;
	return (2);
}
