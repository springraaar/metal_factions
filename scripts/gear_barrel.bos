#define TA			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"

#define SPEEDUP_FACTOR 210

piece  base, firept1,firept2,firept3, wake1, wake2, launcher, hull,fb2,fb3,fb4,rfrontsup,rfrontleg,rfront2,rbacksup,rbackleg,rback2,lbacksup,lbackleg,lback2,lfrontsup,lfrontleg,lfront2, launcher2, fireptl2;

static-var  bMoving, bAiming, Static_Var_3, bSwimming, gun_1, restore_delay, terrainStatus, waterSpeed, landSpeed, mASpdFactor;

// Signal definitions
#define SIG_MOVE			2
#define SIG_AIM				4
#define SIG_AIM2			8


MotionSpeedControl(minSpeed, maxSpeed,currentSpeed)
{
	maxSpeed = get MAX_SPEED;
	currentSpeed = 0;
	mASpdFactor = SPEEDUP_FACTOR;
	minSpeed = 3 * SPEEDUP_FACTOR / 4;
	
	while(TRUE)
	{
		currentSpeed = get CURRENT_SPEED;
		mASpdFactor = SPEEDUP_FACTOR * currentSpeed / maxSpeed;

		if ( mASpdFactor < minSpeed )
		{
			mASpdFactor = minSpeed;
		}

		sleep 60;
	}
}

SmokeUnit(healthpercent, sleeptime, smoketype)
{
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 400;
	}
	while( TRUE )
	{
		healthpercent = get HEALTH;
		if( healthpercent < 66 )
		{
			smoketype = 256 | 2;
			if( Rand( 1, 66 ) < healthpercent )
			{
				smoketype = 256 | 1;
			}
			emit-sfx smoketype from hull;
		}
		sleeptime = healthpercent * 50;
		if( sleeptime < 200 )
		{
			sleeptime = 200;
		}
		sleep sleeptime;
	}
	return (0);
}

walk()
{
	if( bMoving )
	{
		turn rback2 to z-axis <0.000000> speed <80.000000> * mASpdFactor / 100;
		turn lback2 to z-axis <0.000000> speed <80.000000> * mASpdFactor / 100;
		
		turn base to z-axis <-1.000000> speed <15.000000> * mASpdFactor / 100;

		turn lfrontleg to y-axis <20.000000> speed <100.967033> * mASpdFactor / 100;
		turn lfrontleg to z-axis <5.016484> speed <550.104396> * mASpdFactor / 100;

		turn lbackleg to y-axis <-20.000000> speed <300.038462> * mASpdFactor / 100;
		turn lbackleg to z-axis <-15.016484> speed <60.104396> * mASpdFactor / 100;


		turn rfrontleg to y-axis <40.412088> speed <300.060440> * mASpdFactor / 100;
		turn rfrontleg to z-axis <15.016484> speed <60.104396> * mASpdFactor / 100;
		
		turn rbackleg to y-axis <-20.093407> speed <100.368132> * mASpdFactor / 100;
		turn rbackleg to z-axis <-5.016484> speed <550.104396> * mASpdFactor / 100;
		
		
		sleep 200 * 100 / mASpdFactor;
	}

	// only vertical
	if( bMoving )
	{
		turn lbackleg to z-axis <5.016484> speed <150.104396> * mASpdFactor / 100;

		turn rfrontleg to z-axis <-5.016484> speed <150.104396> * mASpdFactor / 100;
		
		sleep 200 * 100 / mASpdFactor;
	}
	
	
	if( bMoving )
	{
		turn base to z-axis <1.000000> speed <15.000000> * mASpdFactor / 100;

		turn lfrontleg to y-axis <-40.000000> speed <300.967033> * mASpdFactor / 100;
		turn lfrontleg to z-axis <-15.016484> speed <60.104396> * mASpdFactor / 100;

		turn lbackleg to y-axis <20.000000> speed <100.038462> * mASpdFactor / 100;
		turn lbackleg to z-axis <5.016484> speed <550.104396> * mASpdFactor / 100;

		turn rfrontleg to y-axis <-20.412088> speed <100.060440> * mASpdFactor / 100;
		turn rfrontleg to z-axis <-5.016484> speed <550.104396> * mASpdFactor / 100;
		
		turn rbackleg to y-axis <20.093407> speed <300.368132> * mASpdFactor / 100;
		turn rbackleg to z-axis <15.016484> speed <60.104396> * mASpdFactor / 100;
		
		sleep 200 * 100 / mASpdFactor;
	}
	
	// only vertical
	if( bMoving )
	{
		turn rback2 to z-axis <0.000000> speed <80.000000> * mASpdFactor / 100;
		turn lback2 to z-axis <0.000000> speed <80.000000> * mASpdFactor / 100;

		turn lfrontleg to z-axis <5.016484> speed <150.104396> * mASpdFactor / 100;

		turn rbackleg to z-axis <-5.016484> speed <150.104396> * mASpdFactor / 100;
		
		sleep 200 * 100 / mASpdFactor;
	}
	
	
	
	return (0);
}


closelegs()
{
	turn base to x-axis <0.000000> speed <20.000000> * SPEEDUP_FACTOR / 100;
	turn base to z-axis <0.000000> speed <15.000000> * SPEEDUP_FACTOR / 100;

	turn rfrontleg to y-axis <0.000000> speed <100.000000>;
	turn rbackleg to y-axis <0.000000> speed <100.000000>;
	turn lfrontleg to y-axis <0.000000> speed <100.000000>;
	turn lbackleg to y-axis <0.000000> speed <100.000000>;
	turn rfrontleg to z-axis <0.000000> speed <100.000000>;
	turn rbackleg to z-axis <0.000000> speed <100.000000>;
	turn lfrontleg to z-axis <0.000000> speed <100.000000>;
	turn lbackleg to z-axis <0.000000> speed <100.000000>;
	
	wait-for-turn rfrontleg around y-axis;
	wait-for-turn rbackleg around y-axis;
	wait-for-turn lfrontleg around y-axis;
	wait-for-turn lbackleg around y-axis;
	wait-for-turn rfrontleg around z-axis;
	wait-for-turn rbackleg around z-axis;
	wait-for-turn lfrontleg around z-axis;
	wait-for-turn lbackleg around z-axis;
		
	move rfrontleg to x-axis [0.000000] speed [8.000000];
	move rbackleg to x-axis [0.000000] speed [8.000000];
	move lfrontleg to x-axis [0.000000] speed [8.000000];
	move lbackleg to x-axis [0.000000] speed [8.000000];

	wait-for-move rfrontleg along x-axis;
	wait-for-move rbackleg along x-axis;
	wait-for-move lfrontleg along x-axis;
	wait-for-move lbackleg along x-axis;
	return (0);
}

openlegs()
{
	turn base to x-axis <0.000000> speed <20.000000> * SPEEDUP_FACTOR / 100;
	turn base to z-axis <0.000000> speed <15.000000> * SPEEDUP_FACTOR / 100;

	turn rfrontleg to y-axis <0.000000> speed <300.000000>;
	turn rbackleg to y-axis <0.000000> speed <300.000000>;
	turn lfrontleg to y-axis <0.000000> speed <300.000000>;
	turn lbackleg to y-axis <0.000000> speed <300.000000>;
	turn rfrontleg to z-axis <0.000000> speed <300.000000>;
	turn rbackleg to z-axis <0.000000> speed <300.000000>;
	turn lfrontleg to z-axis <0.000000> speed <300.000000>;
	turn lbackleg to z-axis <0.000000> speed <300.000000>;
	
	wait-for-turn rfrontleg around y-axis;
	wait-for-turn rbackleg around y-axis;
	wait-for-turn lfrontleg around y-axis;
	wait-for-turn lbackleg around y-axis;
	wait-for-turn rfrontleg around z-axis;
	wait-for-turn rbackleg around z-axis;
	wait-for-turn lfrontleg around z-axis;
	wait-for-turn lbackleg around z-axis;
		
	move rfrontleg to x-axis [4.000000] speed [18.000000];
	move rbackleg to x-axis [4.000000] speed [18.000000];
	move lfrontleg to x-axis [-4.000000] speed [18.000000];
	move lbackleg to x-axis [-4.000000] speed [18.000000];

	wait-for-move rfrontleg along x-axis;
	wait-for-move rbackleg along x-axis;
	wait-for-move lfrontleg along x-axis;
	wait-for-move lbackleg along x-axis;
	return (0);
}

swim()
{
	sleep 500;
	call-script closelegs();
	return (0);
}

MotionControl(justMoved)
{
	justMoved = TRUE;
	while( TRUE )
	{
		// over water
		if( ( !bSwimming ) AND (terrainStatus == 2 OR terrainStatus == 1))
		{
			call-script closelegs();
			bSwimming = TRUE;
			justMoved = TRUE;
		}
		// over land
		if( bSwimming AND terrainStatus == 4 )
		{
			call-script openlegs();
			bSwimming = FALSE;
			justMoved = TRUE;
		}
		if( bMoving )
		{
			Static_Var_3 = 1;
			if( bSwimming )
			{
				//set MAX_SPEED to waterSpeed;  // REPLACED BY GADGET
				set UPRIGHT to TRUE;
				call-script swim();
			}
			if( !bSwimming )
			{
				//set MAX_SPEED to landSpeed; // REPLACED BY GADGET
				set UPRIGHT to FALSE;
				call-script walk();
			}
			justMoved = TRUE;
		}
		if( !bMoving )
		{
			Static_Var_3 = 1;
			if( justMoved AND ( !bSwimming ) )
			{
				turn lfrontleg to y-axis <0.000000> speed <237.000000>;
				turn lfrontleg to z-axis <0.000000> speed <237.000000>;
				turn lbackleg to y-axis <0.000000> speed <237.000000>;
				turn lbackleg to z-axis <0.000000> speed <237.000000>;
				turn rbackleg to y-axis <0.000000> speed <237.000000>;
				turn rbackleg to z-axis <0.000000> speed <237.000000>;
				turn rfrontleg to y-axis <0.000000> speed <237.000000>;
				turn rfrontleg to z-axis <0.000000> speed <237.000000>;
				turn lbackleg to y-axis <15.000000> speed <300.000000>;
				turn rbackleg to y-axis <-15.000000> speed <300.000000>;
				turn rfrontleg to y-axis <15.000000> speed <300.000000>;
				turn lfrontleg to y-axis <-15.000000> speed <300.000000>;

				justMoved = FALSE;
			}
			sleep 100;
		}
	}
	return (0);
}

Create()
{
	landSpeed = get MAX_SPEED;
	waterSpeed = landSpeed * 100 / 150;
	bMoving = FALSE;
	bAiming = FALSE;
	Static_Var_3 = 1;
	gun_1 = [0];
	bSwimming = TRUE;
	turn rfrontsup to y-axis <30.000000> now;
	turn lfrontsup to y-axis <-30.000000> now;
	turn rbacksup to y-axis <-30.000000> now;
	turn lbacksup to y-axis <30.000000> now;

	restore_delay = 3000;
	start-script MotionSpeedControl();
	start-script MotionControl();
	start-script SmokeUnit();
	return (0);
}

StartMoving()
{
	bMoving = TRUE;
	signal SIG_MOVE;
	set-signal-mask SIG_MOVE;
	while( TRUE )
	{
		if( terrainStatus == 2 )
		{
			emit-sfx 2 from wake1;
			emit-sfx 2 from wake2;
		}
		if( terrainStatus == 1 )
		{
			emit-sfx 2 from wake1;
			emit-sfx 2 from wake2;
		}
		sleep 250;
	}
	return (0);
}

StopMoving()
{
	bMoving = FALSE;
	signal SIG_MOVE;
	return (0);
}

setSFXoccupy(Func_Var_1)
{
	terrainStatus = Func_Var_1;
	return (0);
}

SetMaxReloadTime(Func_Var_1)
{
	restore_delay = Func_Var_1 * 2;
	return (0);
}

RestoreAfterDelay()
{
	sleep restore_delay;
	return (0);
}


AimPrimary(heading, pitch)
{
	signal SIG_AIM;
	set-signal-mask SIG_AIM;
	bAiming = TRUE;

	start-script RestoreAfterDelay();
	return (1);
}

FirePrimary()
{
	if (gun_1 == [0]) {
		emit-sfx 1024 from firept1;
		sleep 100;
		gun_1 = [1];
		return (1);
	}
	if (gun_1 == [1]) {
		emit-sfx 1024 from firept2;
		sleep 100;
		gun_1 = [2];
		return (1);
	}
	if (gun_1 == [2]) {
		emit-sfx 1024 from firept3;
		sleep 100;
		gun_1 = [0];
		return (1);
	}
}


AimFromPrimary(piecenum)
{
	piecenum = launcher;
	return (0);
}

QueryPrimary(piecenum)
{
	if (gun_1 == [0]) {
		piecenum = firept1;
	}
	if (gun_1 == [1]) {
		piecenum = firept2;
	}
	if (gun_1 == [2]) {
		piecenum = firept3;
	}

	return (0);
}


AimSecondary(heading, pitch)
{
	signal SIG_AIM2;
	set-signal-mask SIG_AIM2;
	bAiming = TRUE;

	return (1);
}

FireSecondary()
{
	emit-sfx 1024 from fireptl2;
	return (1);
}


AimFromSecondary(piecenum)
{
	piecenum = launcher2;
	return (0);
}

QuerySecondary(piecenum)
{
	piecenum = fireptl2;

	return (0);
}

Killed(severity, corpsetype)
{
	if( severity <= 50 )
	{
		explode launcher type SHATTER;
		explode fb4 type SHATTER;
		return (1);
	}

	explode hull type SHATTER;
	explode fb2 type SHATTER;
	explode fb3 type SHATTER;
	explode fb4 type SHATTER;
	explode launcher type SHATTER;
	return (2);
}
