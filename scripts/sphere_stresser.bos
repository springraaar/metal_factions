#define TA			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"

#define HEADING_TOLERANCE	<25>
#define PITCH_TOLERANCE		<20>

piece  base, hull, bottom, h2,turret, sleeve, barrel, flare, turret2, sleeve2, b1,f1,b2,f2,b3,f3,b4,f4, wake1, wake2, depthcharge, shieldpt,fdoor1,fdoor2,fmispt,fhole;

static-var  gun_2;

#include "aimhelper1.h"
#include "aimhelper2.h"

// Signal definitions
#define SIG_MOVE			2
#define SIG_AIM				4
#define SIG_AIM2			8

lua_checkAllowFiring() { return 0; }
lua_checkLockTarget() { return 0; }



SmokeUnit(healthpercent, sleeptime, smoketype)
{
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 400;
	}
	while( TRUE )
	{
		healthpercent = get HEALTH;
		if( healthpercent < 66 )
		{
			smoketype = 256 | 2;
			if( Rand( 1, 66 ) < healthpercent )
			{
				smoketype = 256 | 1;
			}
			emit-sfx smoketype from base;
		}
		sleeptime = healthpercent * 50;
		if( sleeptime < 200 )
		{
			sleeptime = 200;
		}
		sleep sleeptime;
	}
	return (0);
}

Create()
{
	call-script stopAimHelper1(<1000>,<1000>);
	call-script stopAimHelper2(<1000>,<1000>);
	start-script SmokeUnit();
	gun_2 = [0];
	return (0);
}


RestoreAfterDelay()
{
	sleep DEFAULT_WEAPON_RESTORE_DELAY;
	call-script stopAimHelper1(<80>,<80>);
	turn turret to y-axis <0.000000> speed <80.000000>;
	turn sleeve to x-axis <0.000000> speed <80.000000>;
	return (0);
}

RestoreAfterDelay2()
{
	sleep DEFAULT_WEAPON_RESTORE_DELAY;
	call-script stopAimHelper2(<80>,<80>);
	turn turret2 to y-axis <0.000000> speed <80.000000>;
	turn sleeve2 to x-axis <0.000000> speed <80.000000>;
	return (0);
}

StartMoving()
{
	signal SIG_MOVE;
	set-signal-mask SIG_MOVE;
	while( TRUE )
	{
		emit-sfx 2 from wake1;
		emit-sfx 2 from wake2;
		sleep 450;
	}
	return (0);
}

StopMoving()
{
	signal SIG_MOVE;
	return (0);
}

AimPrimary(heading, pitch, canFire)
{
	call-script updateAimHelper1(heading,pitch,<200>,<200>,HEADING_TOLERANCE,PITCH_TOLERANCE);
	signal SIG_AIM;
	set-signal-mask SIG_AIM;
	turn turret to y-axis heading speed <200.000000>;
	turn sleeve to x-axis <0.000000> - pitch speed <200.000000>;
	if (!aimReady1)
	{
		wait-for-turn turret around y-axis;
		wait-for-turn sleeve around x-axis;
	}
	start-script RestoreAfterDelay();
	// overkill prevention check
	canFire = (get GAME_FRAME) - (get WEAPON_RELOADSTATE(1)) > 0;
	if (canFire) {
		call-script lua_checkAllowFiring(1,(get TARGET_ID(1)));
		canFire = get LUA1;
	}
	if (!canFire) {
		return (0);
	}
	return (1);
}

FirePrimary()
{
	call-script lua_checkLockTarget(get TARGET_ID(1));
	emit-sfx 1024+0 from flare;
	return (0);
}


AimFromPrimary(piecenum)
{
	piecenum = turret;
	return (0);
}

QueryPrimary(piecenum)
{
	piecenum = flare;
	return (0);
}



AimSecondary(heading, pitch)
{
	call-script updateAimHelper2(heading,pitch,<200>,<200>,HEADING_TOLERANCE,PITCH_TOLERANCE);
	signal SIG_AIM2;
	set-signal-mask SIG_AIM2;
	turn turret2 to y-axis heading speed <200.027473>;
	turn sleeve2 to x-axis <0.000000> - pitch speed <200.038462>;
	if (!aimReady2)
	{
		wait-for-turn turret2 around y-axis;
		wait-for-turn sleeve2 around x-axis;
	}
	start-script RestoreAfterDelay2();
	return (1);
}


FireSecondary()
{
	if (gun_2 == [0])
	{
		emit-sfx 1024 + 1 from f1;
		sleep 130;
		gun_2 = [1];
		return (0);
	}
	if (gun_2 == [1])
	{
		emit-sfx 1024 + 1 from f2;
		sleep 130;
		gun_2 = [2];
		return (0);
	}
	if (gun_2 == [2])
	{
		emit-sfx 1024 + 1 from f3;
		sleep 130;
		gun_2 = [3];
		return (0);
	}
	if (gun_2 == [3])
	{
		emit-sfx 1024 + 1 from f4;
		sleep 130;
		gun_2 = [0];
		return (0);
	}			
}

QuerySecondary(piecenum)
{
	if (gun_2 == [0])
	{
		piecenum = f1;
		return (0);
	}
	if (gun_2 == [1])
	{
		piecenum = f2;
		return (0);
	}
	if (gun_2 == [2])
	{
		piecenum = f3;
		return (0);
	}
	if (gun_2 == [3])
	{
		piecenum = f4;
		return (0);
	}		
}

AimFromSecondary(piecenum)
{
	piecenum = turret2;
}

AimTertiary()
{
	return(1);
}
AimFromTertiary(piecenum)
{
	piecenum = shieldpt;
}

QueryTertiary(piecenum)
{
	piecenum = shieldpt;
}

FireTertiary()
{
	return(0);
}


AimWeapon4(heading, pitch)
{
	return (1);
}

FireWeapon4()
{
	turn fdoor1 to z-axis <-40.000000> speed <400.000000>;
	turn fdoor2 to z-axis <40.000000> speed <400.000000>;
	emit-sfx 1024 from fmispt;
	sleep 100;
	sleep 1000;
	turn fdoor1 to z-axis <0.000000> speed <80.000000>;
	turn fdoor2 to z-axis <0.000000> speed <80.000000>;
}

AimFromWeapon4(piecenum)
{
	piecenum = fhole;
	return (0);
}

QueryWeapon4(piecenum)
{
	piecenum = fmispt;
	return (0);
}


Killed(severity, corpsetype)
{
	if( severity <= 50 )
	{
		corpsetype = 1;
		return (0);
	}
	corpsetype = 3;

	explode hull type SHATTER;
	explode bottom type SHATTER;
	explode turret type SHATTER;
	explode h2 type SHATTER;
	explode sleeve type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP5;
	explode sleeve2 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP5;
	return (0);
}
