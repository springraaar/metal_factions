#define TA			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"

piece  base, door1, door2, plate, wake1, wake2, turret, sleeve, barrel, flare, hull, bottom, m1,m2,m3,m4,f11,f12,f13,f14,p2, h3,h4;

static-var  Static_Var_1, gun_1, restore_delay, statechg_DesiredState,
            statechg_StateChanging;

// Signal definitions
#define SIG_AIM				2
#define SIG_AIM_2			4
#define SIG_MOVE			8


activatescr()
{
	if( TRUE )
	{
		move door1 to x-axis [0.000000] now;
		move door1 to x-axis [10.474991] speed [15.000000];
		move door2 to x-axis [0.000000] now;
		move door2 to x-axis [-10.849991] speed [17.500000];
		sleep 600;
	}
	sleep 10;
	return (0);
}

deactivatescr()
{
	if( TRUE )
	{
		move door1 to x-axis [10.474991] now;
		move door2 to x-axis [-10.849991] now;
		sleep 750;
	}
	if( TRUE )
	{
		move door1 to x-axis [0.000000] speed [15.000000];
		move door2 to x-axis [0.000000] speed [15.000000];
		sleep 600;
	}
	sleep 10;
	return (0);
}

SmokeUnit(healthpercent, sleeptime, smoketype)
{
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 400;
	}
	while( TRUE )
	{
		healthpercent = get HEALTH;
		if( healthpercent < 66 )
		{
			smoketype = 256 | 2;
			if( Rand( 1, 66 ) < healthpercent )
			{
				smoketype = 256 | 1;
			}
			emit-sfx smoketype from base;
		}
		sleeptime = healthpercent * 50;
		if( sleeptime < 200 )
		{
			sleeptime = 200;
		}
		sleep sleeptime;
	}
	return (0);
}

Go()
{
	set ARMORED to 0;
	call-script activatescr();
	sleep 1500;
	Static_Var_1 = 1;
	return (0);
}

Stop()
{
	Static_Var_1 = 0;
	sleep 1500;
	call-script deactivatescr();
	sleep 1500;
	set ARMORED to 1;
	return (0);
}

InitState()
{
	statechg_DesiredState = TRUE;
	statechg_StateChanging = FALSE;
	return (0);
}

RequestState(requestedstate, currentstate)
{
	if( statechg_StateChanging )
	{
		statechg_DesiredState = requestedstate;
		return (0);
	}
	statechg_StateChanging = TRUE;
	currentstate = statechg_DesiredState;
	statechg_DesiredState = requestedstate;
	while( statechg_DesiredState != currentstate )
	{
		if( statechg_DesiredState == 0 )
		{
			call-script Go();
			currentstate = 0;
		}
		if( statechg_DesiredState == 1 )
		{
			call-script Stop();
			currentstate = 1;
		}
	}
	statechg_StateChanging = FALSE;
	return (0);
}

Create()
{
	gun_1 = [0];
	Static_Var_1 = 0;
	restore_delay = 3000;
	call-script InitState();
	start-script SmokeUnit();
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 500;
	}
	set ARMORED to 1;
	return (0);
}

SetMaxReloadTime(Func_Var_1)
{
	restore_delay = Func_Var_1 * 2;
	return (0);
}

RestoreAfterDelay()
{
	sleep restore_delay;
	set-signal-mask 0;
	start-script RequestState(1);
	return (0);
}

RestoreSecondary()
{
	sleep DEFAULT_WEAPON_RESTORE_DELAY;
	turn turret to y-axis <0> speed <100>;
	turn sleeve to x-axis <0> speed <100>;
	return (0);
}

StartMoving()
{
	signal SIG_MOVE;
	set-signal-mask SIG_MOVE;
	while( TRUE )
	{
		emit-sfx 2 from wake1;
		emit-sfx 2 from wake2;
		sleep 300;
	}
	return (0);
}

StopMoving()
{
	signal SIG_MOVE;
	return (0);
}

AimPrimary(heading, pitch)
{
	start-script RequestState(0);
	signal SIG_AIM;
	set-signal-mask SIG_AIM;
	while( !Static_Var_1 )
	{
		sleep 250;
	}
	start-script RestoreAfterDelay();
	return (1);
}

AimSecondary(heading, pitch)
{
	signal SIG_AIM_2;
	set-signal-mask SIG_AIM_2;
	turn turret to y-axis heading speed <200.000000>;
	turn sleeve to x-axis <0.000000> - pitch speed <250.000000>;
	wait-for-turn turret around y-axis;
	wait-for-turn sleeve around x-axis;
	start-script RestoreSecondary();
	return (1);
}

FirePrimary()
{
	if( gun_1 == [0] )
	{
		emit-sfx 1024+1 from f11;
		sleep 100;
		gun_1 = [1];
		return (0);
	}
	if( gun_1 == [1] )
	{
		emit-sfx 1024+1 from f12;
		sleep 100;
		gun_1 = [2];
		return (0);
	}
	if( gun_1 == [2] )
	{
		emit-sfx 1024+1 from f13;
		sleep 100;
		gun_1 = [3];
		return (0);
	}
	if( gun_1 == [3] )
	{
		emit-sfx 1024+1 from f14;
		sleep 100;
		gun_1 = [0];
		return (0);
	}		
}

FireSecondary()
{
	emit-sfx 1024+2 from flare;
	return (0);
}

AimFromPrimary(piecenum)
{
	piecenum = p2;
	return (0);
}

AimFromSecondary(piecenum)
{
	piecenum = turret;
	return (0);
}

QueryPrimary(piecenum)
{
	if( gun_1 == [0] )
	{
		piecenum = f11;
	}
	if( gun_1 == [1] )
	{
		piecenum = f12;
	}
	if( gun_1 == [2] )
	{
		piecenum = f13;
	}
	if( gun_1 == [3] )
	{
		piecenum = f14;
	}		
	return (0);
}

QuerySecondary(piecenum)
{
	piecenum = flare;
	return (0);
}

Killed(severity, corpsetype)
{
	if( severity <= 50 )
	{
		explode turret type SHATTER | EXPLODE_ON_HIT | BITMAP2;
		explode m1 type SHATTER | EXPLODE_ON_HIT | BITMAP2;		
		explode m2 type SHATTER | EXPLODE_ON_HIT | BITMAP2;
		explode m3 type SHATTER | EXPLODE_ON_HIT | BITMAP2;		
		explode m4 type SHATTER | EXPLODE_ON_HIT | BITMAP2;
		return (1);
	}
	explode turret type SHATTER | EXPLODE_ON_HIT | BITMAP2;
	explode m1 type SHATTER | EXPLODE_ON_HIT | BITMAP2;		
	explode m2 type SHATTER | EXPLODE_ON_HIT | BITMAP2;
	explode m3 type SHATTER | EXPLODE_ON_HIT | BITMAP2;		
	explode m4 type SHATTER | EXPLODE_ON_HIT | BITMAP2;
	explode hull type SHATTER | EXPLODE_ON_HIT | BITMAP2;
	explode bottom type SHATTER | EXPLODE_ON_HIT | BITMAP2;		
	explode h3 type SHATTER | EXPLODE_ON_HIT | BITMAP2;
	explode h4 type SHATTER | EXPLODE_ON_HIT | BITMAP2;		

	return (2);
}
