#define TA			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"

#define HEADING_TOLERANCE	<25>
#define PITCH_TOLERANCE		<15>

piece  flare, base, turret,barrel, sleeve, wake1,wake2, hull,bottom;


#include "aimhelper1.h"

// Signal definitions
#define SIG_AIM				2
#define SIG_MOVE			8



SmokeUnit(healthpercent, sleeptime, smoketype)
{
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 400;
	}
	while( TRUE )
	{
		healthpercent = get HEALTH;
		if( healthpercent < 66 )
		{
			smoketype = 256 | 2;
			if( Rand( 1, 66 ) < healthpercent )
			{
				smoketype = 256 | 1;
			}
			emit-sfx smoketype from base;
		}
		sleeptime = healthpercent * 50;
		if( sleeptime < 200 )
		{
			sleeptime = 200;
		}
		sleep sleeptime;
	}
}

Create()
{
	call-script stopAimHelper1(<1000>,<1000>);
	start-script SmokeUnit();
}

RestoreAfterDelay()
{
	sleep DEFAULT_WEAPON_RESTORE_DELAY;
	call-script stopAimHelper1(<150>,<150>);
	turn turret to y-axis <0.000000> speed <150.000000>;
	turn sleeve to x-axis <0.000000> speed <150.000000>;
}

StartMoving()
{
	signal SIG_MOVE;
	set-signal-mask SIG_MOVE;
	while( TRUE )
	{
		emit-sfx 2 from wake1;
		emit-sfx 2 from wake2;
		sleep 300;
	}
}

StopMoving()
{
	signal SIG_MOVE;
}

AimPrimary(heading, pitch)
{
	call-script updateAimHelper1(heading,pitch,<280>,<280>,HEADING_TOLERANCE,PITCH_TOLERANCE);
	signal SIG_AIM;
	set-signal-mask SIG_AIM;
	turn turret to y-axis heading speed <280.000000>;
	turn sleeve to x-axis <0.000000> - pitch speed <280.000000>;
	if (!aimReady1)
	{
		wait-for-turn turret around y-axis;
		wait-for-turn sleeve around x-axis;
	}
	start-script RestoreAfterDelay();
	return (1);
}

Shot1()
{
	emit-sfx 1024 + 0 from flare;
	return (0);
}


AimFromPrimary(piecenum)
{
	piecenum = turret;
}

QueryPrimary(piecenum)
{
	piecenum = flare;
}


Killed(severity, corpsetype)
{
	if( severity <= 50 )
	{
		explode barrel type SHATTER;
		explode sleeve type SHATTER;
		explode turret type SHATTER;
		return (1);
	}

	explode barrel type SHATTER;
	explode sleeve type SHATTER;
	explode turret type SHATTER;
	explode bottom type SHATTER;
	explode hull type SHATTER;
	return (2);
}
