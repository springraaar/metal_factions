#define TA			// This is a TA script

#define SPEEDUP_FACTOR	300

#include "sfxtype.h"
#include "exptype.h"

#define HEADING_TOLERANCE	<28>
#define PITCH_TOLERANCE		<18>


piece  torso, ruparm, luparm, rfire, rarm, larm, rloarm, lloarm,hand, pelvis,rthigh, lthigh, lleg, rleg, rfoot, lfoot, ground, head, headon, r2, coveron, coveroff;

static-var  bMoving, bAiming, mATurnSpd1,mATurnSpd2,mATurnSpd3,mASpdFactor, mAMoveSpd1, mAVertFactor, legAngle1, legAngle2, legAngle3, isAlone;

lua_checkAlone() { return 0; }

#include "aimhelper1.h"

// Signal definitions
#define SIG_AIM				4

lua_cobDebug() { return 0; }

MotionSpeedControl(maxSpeed,currentSpeed)
{
	maxSpeed = get MAX_SPEED;
	currentSpeed = 0;
	mASpdFactor = SPEEDUP_FACTOR;
	
	while(TRUE)
	{
		currentSpeed = get CURRENT_SPEED;
		mASpdFactor = SPEEDUP_FACTOR * currentSpeed / maxSpeed;

		//call-script lua_cobDebug(mASpdFactor);
		if ( mASpdFactor < SPEEDUP_FACTOR/2 )
		{
			mASpdFactor = SPEEDUP_FACTOR/2;
		}
		
		
		mAMoveSpd1 = [10.000000] * mASpdFactor / 100;
		mATurnSpd1 = <315.000000> * (100 + mASpdFactor) / 200;
		mATurnSpd2 = <200.000000> * (100 + mASpdFactor) / 200;
		mATurnSpd3 = <50.000000> * (100 + mASpdFactor) / 200;

		mAVertFactor = [0.000000]-[1.000000] * mASpdFactor / SPEEDUP_FACTOR;
		legAngle1 = <40.000000>;
		legAngle2 = <30.000000>;
		legAngle3 = <15.000000>;
		if ( mASpdFactor < SPEEDUP_FACTOR )
		{
			legAngle1 = legAngle1 * (SPEEDUP_FACTOR + mASpdFactor) / (2*SPEEDUP_FACTOR);
			legAngle2 = legAngle2 * (SPEEDUP_FACTOR + mASpdFactor) / (2*SPEEDUP_FACTOR);
			legAngle3 = legAngle3 * (SPEEDUP_FACTOR + mASpdFactor) / (2*SPEEDUP_FACTOR);

		}
	
		sleep 60;
	}
}


aimPose(heading, pitch)
{
	if( pitch >= <-30>)
	{
		turn head to y-axis <30.000000> speed <300.000000>;
		turn luparm to x-axis <-57.000000>-pitch speed <300.000000>;
		turn larm to x-axis <0.000000> speed <300.000000>;
		turn larm to z-axis <20.000000> speed <300.000000>;
		turn lloarm to z-axis <35.000000> speed <300.000000>;
		turn hand to y-axis <70.000000> speed <300.000000>;
		turn rarm to z-axis <-30.000000> speed <300.000000>;

		turn torso to y-axis <-30>+heading speed <580.000000>;
		turn ruparm to x-axis <-90.000000> - pitch speed <600.000000>;
		if ( !aimReady1)
		{
			wait-for-turn torso around y-axis;
			wait-for-turn ruparm around x-axis;
		}
	}
	if( pitch < <-30>)
	{
		turn head to y-axis <0.000000> speed <300.000000>;
		turn luparm to x-axis <0.000000> speed <300.000000>;
		turn larm to x-axis <-20.000000> speed <300.000000>;
		turn larm to z-axis <0.000000> speed <300.000000>;
		turn lloarm to z-axis <0.000000> speed <300.000000>;
		turn hand to y-axis <0.000000> speed <300.000000>;
		turn rarm to z-axis <0.000000> speed <300.000000>;

		turn torso to y-axis heading speed <580.000000>;
		turn ruparm to x-axis <-90.000000> - pitch speed <600.000000>;
		if ( !aimReady1)
		{
			wait-for-turn torso around y-axis;
			wait-for-turn ruparm around x-axis;
		}
	}
}

walk()
{
	var slowTurnSpd, slowTurnSpd2;

	slowTurnSpd = mATurnSpd2 / 2;
	slowTurnSpd2 = mATurnSpd2 / 8;
	
	
	// back contact point : right foot behind, left foot forward
	if( bMoving )
	{
		turn lthigh to x-axis <0.000000>-legAngle1 speed mATurnSpd1;
		turn lleg to x-axis legAngle2 speed mATurnSpd2;
		turn lfoot to x-axis <0> speed mATurnSpd3;

		turn rthigh to x-axis legAngle2 speed mATurnSpd2;
		turn rleg to x-axis legAngle3 speed mATurnSpd2;
		turn rfoot to x-axis <0.000000>-legAngle2 speed mATurnSpd1;

		move pelvis to y-axis mAVertFactor speed mAMoveSpd1;
		turn pelvis to x-axis <6.000000> speed slowTurnSpd2;
		if(!bAiming)
		{
			// turn torso left, right arm forward
			turn torso to y-axis <10.000000> speed slowTurnSpd2;
			turn luparm to x-axis <10.000000> speed slowTurnSpd;
			turn lloarm to x-axis <-10.000000> speed slowTurnSpd2;

			turn ruparm to x-axis <-40.000000> speed slowTurnSpd;
			//turn rloarm to x-axis <-20.000000> speed slowTurnSpd2;
		}
		
		wait-for-turn lthigh around x-axis;
		wait-for-turn rthigh around x-axis;
		wait-for-turn lleg around x-axis;
		wait-for-turn rleg around x-axis;
	}

	// intermediate pose 2 : left stomp ground
	if( bMoving)
	{
		turn pelvis to x-axis <-3.000000> speed slowTurnSpd2;
		turn lfoot to x-axis legAngle3 speed mATurnSpd1*3;
		wait-for-turn lfoot around x-axis;
	}

	// passing pose 2 : right foot raising, left foot on the ground
	if( bMoving )
	{
		turn lthigh to x-axis <0.000000> speed mATurnSpd2;
		turn lleg to x-axis <0.000000> speed mATurnSpd2;
		turn lfoot to x-axis <0.000000> speed mATurnSpd3;

		turn rthigh to x-axis <-20.000000> speed mATurnSpd2;
		turn rleg to x-axis <30.000000> speed mATurnSpd2;
		turn rfoot to x-axis <10.000000> speed mATurnSpd1;

		if(!bAiming)
		{
			// restore position
			turn torso to y-axis <0.000000> speed slowTurnSpd2;
			turn luparm to x-axis <-15.000000> speed slowTurnSpd;
			turn lloarm to x-axis <-15.000000> speed slowTurnSpd2;
			turn ruparm to x-axis <-15.000000> speed slowTurnSpd;
			//turn rloarm to x-axis <-15.000000> speed slowTurnSpd2;

		}

		move pelvis to y-axis [0.000000] speed mAMoveSpd1;
		turn pelvis to x-axis <0.000000> speed slowTurnSpd2;		
		
		wait-for-turn lthigh around x-axis;
		wait-for-turn rthigh around x-axis;
		wait-for-turn lleg around x-axis;
		wait-for-turn rleg around x-axis;

	}
	
	// forward contact point : right foot forward, left foot behind
	if( bMoving )
	{
		turn lthigh to x-axis legAngle2 speed mATurnSpd2;
		turn lleg to x-axis legAngle3 speed mATurnSpd2;
		turn lfoot to x-axis <0>-legAngle2 speed mATurnSpd1;

		turn rthigh to x-axis <0>-legAngle1 speed mATurnSpd1;
		turn rleg to x-axis legAngle2 speed mATurnSpd2;
		turn rfoot to x-axis <0> speed mATurnSpd3;
		
		move pelvis to y-axis mAVertFactor speed mAMoveSpd1;
		turn pelvis to x-axis <6.000000> speed slowTurnSpd2;
		
		if(!bAiming)
		{
			// turn torso right, left arm forward
			turn torso to y-axis <-10.000000> speed slowTurnSpd2;
			turn luparm to x-axis <-40.000000> speed slowTurnSpd;
			turn lloarm to x-axis <-20.000000> speed slowTurnSpd2;
			turn ruparm to x-axis <10.000000> speed slowTurnSpd;
			//turn rloarm to x-axis <-10.000000> speed slowTurnSpd2;
		}

		wait-for-turn lthigh around x-axis;
		wait-for-turn rthigh around x-axis;
		wait-for-turn lleg around x-axis;
		wait-for-turn rleg around x-axis;
	}

	// intermediate pose 1 : right stomp ground
	if( bMoving)
	{
		turn pelvis to x-axis <-3.000000> speed slowTurnSpd2;
		turn rfoot to x-axis legAngle3 speed mATurnSpd1*3;
		wait-for-turn rfoot around x-axis;
	}

	// passing pose 1 : right foot on ground, left foot raising
	if( bMoving )
	{
		turn lthigh to x-axis <-20.000000> speed mATurnSpd2;
		turn lleg to x-axis <30.000000> speed mATurnSpd2;
		turn lfoot to x-axis <10.000000> speed mATurnSpd1;
		
		turn rthigh to x-axis <0.000000> speed mATurnSpd2;
		turn rleg to x-axis <0.000000> speed mATurnSpd2;
		turn rfoot to x-axis <0.000000> speed mATurnSpd3;

		
		if(!bAiming)
		{
			// restore position
			turn torso to y-axis <0.000000> speed slowTurnSpd2;
			turn luparm to x-axis <-15.000000> speed slowTurnSpd;
			turn lloarm to x-axis <-15.000000> speed slowTurnSpd2;
			turn ruparm to x-axis <-15.000000> speed slowTurnSpd;
			//turn rloarm to x-axis <-15.000000> speed slowTurnSpd2;
		}
		
		move pelvis to y-axis [0.000000] speed mAMoveSpd1;
		turn pelvis to x-axis <0.000000> speed slowTurnSpd2;
		
		wait-for-turn lthigh around x-axis;
		wait-for-turn rthigh around x-axis;
		wait-for-turn lleg around x-axis;
		wait-for-turn rleg around x-axis;
	}
	
	return;
}



SmokeUnit(healthpercent, sleeptime, smoketype)
{
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 400;
	}
	while( TRUE )
	{
		healthpercent = get HEALTH;
		if( healthpercent < 66 )
		{
			smoketype = 256 | 2;
			if( Rand( 1, 66 ) < healthpercent )
			{
				smoketype = 256 | 1;
			}
			emit-sfx smoketype from torso;
		}
		sleeptime = healthpercent * 50;
		if( sleeptime < 200 )
		{
			sleeptime = 200;
		}
		sleep sleeptime;
	}
	return (0);
}

MotionControl(moving, aiming, justmoved)
{
	justmoved = TRUE;
	while( TRUE )
	{
		moving = bMoving;
		aiming = bAiming;
		if( moving )
		{
			call-script walk();
			justmoved = TRUE;
		}
		if( !moving )
		{
			if( justmoved )
			{

				move pelvis to y-axis [0.000000] speed [25.000000];
				turn pelvis to x-axis <0.000000> speed <20.000000>;
				turn rthigh to x-axis <0.000000> speed <200.000000>;
				turn rleg to x-axis <0.000000> speed <200.000000>;
				turn lthigh to x-axis <0.000000> speed <200.000000>;
				turn lleg to x-axis <0.000000> speed <200.000000>;
				turn rfoot to x-axis <0.000000> speed <200.000000>;
				turn lfoot to x-axis <0.000000> speed <200.000000>;

				if( !aiming )
				{
					turn torso to y-axis <0.000000> speed <200.000000>;
					turn luparm to x-axis <-10.000000> speed <200.000000>;
					turn ruparm to x-axis <0.000000> speed <200.000000>;
					turn lloarm to x-axis <-20.000000> speed <200.000000>;
				}

				justmoved = FALSE;
			}
			sleep 100;
		}
	}
	return (0);
}


checkAlone()
{
	while( TRUE )
	{
		call-script lua_checkAlone(350);
		isAlone = GET LUA1;

		if (isAlone) {
				show headon;
				show coveron;
				hide head;
				hide coveroff;
				
		} else {
				hide headon;
				hide coveron;
				show head;
				show coveroff;
		}
		sleep 500;
	}
	return (0);
}

Create()
{
	hide rfire;
	isAlone = FALSE;
	bMoving = FALSE;
	bAiming = FALSE;
	hide headon;
	hide coveron;
	show head;
	show coveroff;
	
	call-script stopAimHelper1(<1000>,<1000>);
	start-script MotionSpeedControl();
	start-script MotionControl();
	start-script SmokeUnit();
	start-script checkAlone();
	return (0);
}

StartMoving()
{
	bMoving = TRUE;
	return (0);
}

StopMoving()
{
	bMoving = FALSE;
	return (0);
}

RestoreAfterDelay()
{
	sleep DEFAULT_WEAPON_RESTORE_DELAY;
	call-script stopAimHelper1(<290>,<245>);
	turn torso to y-axis <0.000000> speed <290.000000>;
	turn ruparm to x-axis <0.000000> speed <245.000000>;
	
	turn head to y-axis <0.000000> speed <300.000000>;
	turn luparm to x-axis <0.000000> speed <300.000000>;
	turn larm to y-axis <0.000000> speed <300.000000>;
	turn larm to z-axis <0.000000> speed <300.000000>;
	turn lloarm to z-axis <0.000000> speed <300.000000>;
	turn hand to y-axis <0.000000> speed <300.000000>;
	turn rarm to z-axis <0.000000> speed <300.000000>;

	wait-for-turn torso around y-axis;
	wait-for-turn rloarm around x-axis;
	wait-for-turn lloarm around x-axis;
	wait-for-turn ruparm around x-axis;
	wait-for-turn luparm around x-axis;
	bAiming = FALSE;
	return (0);
}

AimFromPrimary(piecenum)
{
	piecenum = head;
	return (0);
}

QueryPrimary(piecenum)
{
	piecenum = rfire;
	return (0);
}

FirePrimary()
{
	move torso to z-axis [-0.300000] now;
	emit-sfx 1024 + 0 from rfire;
	sleep 60;
	move torso to z-axis [0] speed [10];
	return (0);
}

AimPrimary(heading, pitch)
{
	if (isAlone) { return (0); }
	call-script updateAimHelper1(heading,pitch + <90.000000>,<580>,<600>,HEADING_TOLERANCE,PITCH_TOLERANCE);
	signal SIG_AIM;
	set-signal-mask SIG_AIM;
	bAiming = TRUE;
	
	call-script aimPose(heading,pitch);
	start-script RestoreAfterDelay();
	return (1);
}



AimFromSecondary(piecenum)
{
	piecenum = head;
	return (0);
}

QuerySecondary(piecenum)
{
	piecenum = rfire;
	return (0);
}

FireSecondary()
{
	move torso to z-axis [-0.300000] now;
	emit-sfx 1024 + 1 from rfire;
	sleep 60;
	move torso to z-axis [0] speed [10];
	return (0);
}

AimSecondary(heading, pitch)
{
	if (!isAlone) { return (0); }
	call-script updateAimHelper1(heading,pitch + <90.000000>,<580>,<600>,HEADING_TOLERANCE,PITCH_TOLERANCE);
	signal SIG_AIM;
	set-signal-mask SIG_AIM;
	bAiming = TRUE;
	
	call-script aimPose(heading,pitch);
	start-script RestoreAfterDelay();
	return (1);
}



Killed(severity, corpsetype)
{
	hide rfire;
	if( severity <= 50 )
	{
		explode lfoot type FALL | BITMAP3;
		explode lleg type FALL | BITMAP4;
		explode lloarm type FALL | BITMAP5;
		explode lthigh type FALL | BITMAP1;
		explode luparm type FALL | BITMAP2;
		explode rfoot type FALL | BITMAP5;
		explode rleg type FALL | BITMAP1;
		explode rloarm type FALL | BITMAP2;
		explode rthigh type FALL | BITMAP3;
		explode ruparm type FALL | BITMAP4;
		explode torso type SHATTER | BITMAP5;
		return (1);
	}
	explode lfoot type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
	explode lleg type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP4;
	explode lloarm type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP5;
	explode lthigh type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
	explode luparm type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
	explode rfoot type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP5;
	explode rleg type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
	explode rloarm type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
	explode rthigh type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
	explode ruparm type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP4;
	explode torso type SHATTER | EXPLODE_ON_HIT | BITMAP5;
	return (2);
}
