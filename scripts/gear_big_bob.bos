#define TA			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"

#define SPEEDUP_FACTOR	140


#define HEADING_TOLERANCE	<25>
#define PITCH_TOLERANCE		<15>

piece  ground, torso, ruparm, luparm, rloarm, lloarm, rbarrel, lbarrel, rgf, lgf, rgun, lgun, ar, al, pelvis, tr, tl, t2, rleg, rfoot, lleg, lfoot, head, lthigh, rthigh, rlauncher, rgun1, rgun2, rfirept1, rfirept2, llauncher, lgun1, lgun2, lfirept1, lfirept2,launcher,mfirept,missile;

static-var  gun_1, gun_2, bMoving, bAiming, mATurnSpd1,mATurnSpd2,mATurnSpd3,mASpdFactor, mAMoveSpd1, mAVertFactor, legAngle1, legAngle2, legAngle3;

#include "aimhelper1.h"

// Signal definitions
#define SIG_AIM				2

MotionSpeedControl(maxSpeed,currentSpeed)
{
	maxSpeed = get MAX_SPEED;
	currentSpeed = 0;
	mASpdFactor = SPEEDUP_FACTOR;
	
	while(TRUE)
	{
		currentSpeed = get CURRENT_SPEED;
		mASpdFactor = SPEEDUP_FACTOR * currentSpeed / maxSpeed;

		//call-script lua_cobDebug(mASpdFactor);
		if ( mASpdFactor < SPEEDUP_FACTOR/2 )
		{
			mASpdFactor = SPEEDUP_FACTOR/2;
		}
		
		
		mAMoveSpd1 = [20.000000] * mASpdFactor / 100;
		mATurnSpd1 = <305.000000> * (100 + mASpdFactor) / 200;
		mATurnSpd2 = <180.000000> * (100 + mASpdFactor) / 200;
		mATurnSpd3 = <50.000000> * (100 + mASpdFactor) / 200;

		mAVertFactor = [0.000000]-[1.500000] * mASpdFactor / SPEEDUP_FACTOR;
		legAngle1 = <40.000000>;
		legAngle2 = <30.000000>;
		legAngle3 = <15.000000>;
		if ( mASpdFactor < SPEEDUP_FACTOR )
		{
			legAngle1 = legAngle1 * (SPEEDUP_FACTOR + mASpdFactor) / (2*SPEEDUP_FACTOR);
			legAngle2 = legAngle2 * (SPEEDUP_FACTOR + mASpdFactor) / (2*SPEEDUP_FACTOR);
			legAngle3 = legAngle3 * (SPEEDUP_FACTOR + mASpdFactor) / (2*SPEEDUP_FACTOR);

		}
	
		sleep 60;
	}
}


SmokeUnit(healthpercent, sleeptime, smoketype)
{
	var Func_Var_4;
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 400;
	}
	while( TRUE )
	{
		healthpercent = get HEALTH;
		if( healthpercent < 66 )
		{
			smoketype = 256 | 2;
			if( Rand( 1, 66 ) < healthpercent )
			{
				smoketype = 256 | 1;
			}
			emit-sfx smoketype from torso;
		}
		sleeptime = healthpercent * 50;
		if( sleeptime < 200 )
		{
			sleeptime = 200;
		}
		sleep sleeptime;
	}
	return (0);
}

walk()
{
	var slowTurnSpd, slowTurnSpd2;

	slowTurnSpd = mATurnSpd2 / 4;
	slowTurnSpd2 = mATurnSpd2 / 12;
	
	
	// back contact point : right foot behind, left foot forward
	if( bMoving )
	{
		turn lthigh to x-axis <0.000000>-legAngle1 speed mATurnSpd1;
		turn lleg to x-axis legAngle2 speed mATurnSpd2;
		turn lfoot to x-axis <0> speed mATurnSpd3;

		turn rthigh to x-axis legAngle2 speed mATurnSpd2;
		turn rleg to x-axis legAngle3 speed mATurnSpd2;
		turn rfoot to x-axis <0.000000>-legAngle2 speed mATurnSpd1;

		move pelvis to y-axis mAVertFactor speed mAMoveSpd1;
		turn pelvis to x-axis <4.000000> speed slowTurnSpd2;
		if(!bAiming)
		{
			// turn torso left, right arm forward
			turn torso to y-axis <10.000000> speed slowTurnSpd2;
			turn ruparm to x-axis <0.000000> speed slowTurnSpd;
			turn luparm to x-axis <25.000000> speed slowTurnSpd;
			//turn rloarm to x-axis <-20.000000> speed slowTurnSpd2;
		}
		
		wait-for-turn lthigh around x-axis;
		wait-for-turn rthigh around x-axis;
		wait-for-turn lleg around x-axis;
		wait-for-turn rleg around x-axis;
	}

	// intermediate pose 2 : left stomp ground
	if( bMoving)
	{
		turn lfoot to x-axis legAngle3 speed mATurnSpd1*5;
		wait-for-turn lfoot around x-axis;
	}

	// passing pose 2 : right foot raising, left foot on the ground
	if( bMoving )
	{
		turn lthigh to x-axis <0.000000> speed mATurnSpd2;
		turn lleg to x-axis <0.000000> speed mATurnSpd2;
		turn lfoot to x-axis <0.000000> speed mATurnSpd3;

		turn rthigh to x-axis <-20.000000> speed mATurnSpd2;
		turn rleg to x-axis <30.000000> speed mATurnSpd2;
		turn rfoot to x-axis <10.000000> speed mATurnSpd1;

		if(!bAiming)
		{
			// restore position
			turn torso to y-axis <0.000000> speed slowTurnSpd2;
			turn ruparm to x-axis <10.000000> speed slowTurnSpd;
			turn luparm to x-axis <10.000000> speed slowTurnSpd;
			//turn rloarm to x-axis <-15.000000> speed slowTurnSpd2;

		}

		move pelvis to y-axis [0.000000] speed mAMoveSpd1;
		turn pelvis to x-axis <0.000000> speed slowTurnSpd2;		
		
		wait-for-turn lthigh around x-axis;
		wait-for-turn rthigh around x-axis;
		wait-for-turn lleg around x-axis;
		wait-for-turn rleg around x-axis;

	}
	
	// forward contact point : right foot forward, left foot behind
	if( bMoving )
	{
		turn lthigh to x-axis legAngle2 speed mATurnSpd2;
		turn lleg to x-axis legAngle3 speed mATurnSpd2;
		turn lfoot to x-axis <0>-legAngle2 speed mATurnSpd1;

		turn rthigh to x-axis <0>-legAngle1 speed mATurnSpd1;
		turn rleg to x-axis legAngle2 speed mATurnSpd2;
		turn rfoot to x-axis <0> speed mATurnSpd3;
		
		move pelvis to y-axis mAVertFactor speed mAMoveSpd1;
		turn pelvis to x-axis <4.000000> speed slowTurnSpd2;
		
		if(!bAiming)
		{
			// turn torso right, left arm forward
			turn torso to y-axis <-10.000000> speed slowTurnSpd2;
			turn ruparm to x-axis <25.000000> speed slowTurnSpd;
			turn luparm to x-axis <0.000000> speed slowTurnSpd;
			//turn rloarm to x-axis <-10.000000> speed slowTurnSpd2;
		}

		wait-for-turn lthigh around x-axis;
		wait-for-turn rthigh around x-axis;
		wait-for-turn lleg around x-axis;
		wait-for-turn rleg around x-axis;
	}

	// intermediate pose 1 : right stomp ground
	if( bMoving)
	{
		turn rfoot to x-axis legAngle3 speed mATurnSpd1*5;
		wait-for-turn rfoot around x-axis;
	}

	// passing pose 1 : right foot on ground, left foot raising
	if( bMoving )
	{
		turn lthigh to x-axis <-20.000000> speed mATurnSpd2;
		turn lleg to x-axis <30.000000> speed mATurnSpd2;
		turn lfoot to x-axis <10.000000> speed mATurnSpd1;
		
		turn rthigh to x-axis <0.000000> speed mATurnSpd2;
		turn rleg to x-axis <0.000000> speed mATurnSpd2;
		turn rfoot to x-axis <0.000000> speed mATurnSpd3;

		
		if(!bAiming)
		{
			// restore position
			turn torso to y-axis <0.000000> speed slowTurnSpd2;
			turn ruparm to x-axis <10.000000> speed slowTurnSpd;
			turn luparm to x-axis <10.000000> speed slowTurnSpd;
			//turn rloarm to x-axis <-15.000000> speed slowTurnSpd2;
		}
		
		move pelvis to y-axis [0.000000] speed mAMoveSpd1;
		turn pelvis to x-axis <0.000000> speed slowTurnSpd2;
		
		wait-for-turn lthigh around x-axis;
		wait-for-turn rthigh around x-axis;
		wait-for-turn lleg around x-axis;
		wait-for-turn rleg around x-axis;
	}
	
	return;
}


MotionControl(moving, aiming, justmoved)
{
	justmoved = TRUE;
	while( TRUE )
	{
		moving = bMoving;
		aiming = bAiming;
		if( moving )
		{
			if( aiming )
			{
				call-script walk();
			}
			if( !aiming )
			{
				call-script walk();
			}
			justmoved = TRUE;
		}
		if( !moving )
		{
			if( justmoved )
			{
				move pelvis to y-axis [0.000000] speed [0.002777];
				turn pelvis to x-axis <0.000000> speed <100.000000>;
				turn rthigh to x-axis <0.000000> speed <200.000000>;
				turn rleg to x-axis <0.000000> speed <200.000000>;
				turn rfoot to x-axis <0.000000> speed <200.000000>;
				turn lthigh to x-axis <0.000000> speed <200.000000>;
				turn lleg to x-axis <0.000000> speed <200.000000>;
				turn lfoot to x-axis <0.000000> speed <200.000000>;
				if( !aiming )
				{
					turn torso to y-axis <0.000000> speed <90.000000>;
					turn ruparm to x-axis <0.000000> speed <200.000000>;
					turn rloarm to x-axis <0.000000> speed <200.000000>;
					turn luparm to x-axis <0.000000> speed <200.000000>;
					turn lloarm to x-axis <0.000000> speed <200.000000>;
				}
				justmoved = FALSE;
			}
			sleep 100;
		}
	}
	return (0);
}

Create()
{
	gun_1 = [0];
	gun_2 = [0];
	bMoving = FALSE;
	bAiming = FALSE;
	call-script stopAimHelper1(<1000>,<1000>);
	start-script MotionControl();
	start-script SmokeUnit();
	start-script MotionSpeedControl();
	return (0);
}

StartMoving()
{
	bMoving = TRUE;
	return (0);
}

StopMoving()
{
	bMoving = FALSE;
	return (0);
}

SweetSpot(piecenum)
{
	piecenum = torso;
	return (0);
}

RestoreAfterDelay()
{
	sleep DEFAULT_WEAPON_RESTORE_DELAY;
	call-script stopAimHelper1(<100>,<100>);
	turn torso to y-axis <0.000000> speed <100.000000>;
	turn ruparm to x-axis <0.000000> speed <100.000000>;
	turn luparm to x-axis <0.000000> speed <100.000000>;
	wait-for-turn torso around y-axis;
	wait-for-turn ruparm around x-axis;
	bAiming = FALSE;
	return (0);
}

AimFromPrimary(piecenum)
{
	piecenum = torso;
	return (0);
}

QueryPrimary(piecenum)
{
	if ( gun_1 == [0])
	{
		piecenum = lgf;
		return (0);
	}
	if ( gun_1 == [1])
	{
		piecenum = rgf;
		return (0);
	}	
}

AimPrimary(heading, pitch)
{
	call-script updateAimHelper1(heading,pitch,<150>,<150>,HEADING_TOLERANCE,PITCH_TOLERANCE);
	signal SIG_AIM;
	set-signal-mask SIG_AIM;
	bAiming = TRUE;

	turn torso to y-axis heading speed <150.000000>;
	turn ruparm to x-axis <0.000000> - pitch speed <150.000000>;
	turn luparm to x-axis <0.000000> - pitch speed <150.000000>;
	if (!aimReady1)
	{
		wait-for-turn torso around y-axis;
		wait-for-turn ruparm around x-axis;
		wait-for-turn luparm around x-axis;
	}
	start-script RestoreAfterDelay();
	return (1);
}

FirePrimary()
{
	if( gun_1 == [0])
	{
		move al to z-axis [-5.000000] now;
		emit-sfx 1024+0 from lgf;
		sleep 100;
		gun_1 = [1];
		move al to z-axis [0.000000] speed [10.000000];
		return (0);
	}
	if( gun_1 == [1])
	{
		move ar to z-axis [-5.000000] now;
		emit-sfx 1024+0 from rgf;
		sleep 100;
		gun_1 = [0];
		move ar to z-axis [0.000000] speed [10.000000];
		return (0);
	}
}


AimFromSecondary(piecenum)
{
	piecenum = torso;
	return (0);
}

QuerySecondary(piecenum)
{
	if (gun_2 == [0])
	{
		piecenum = lfirept1;
		return (0);
	}
	if (gun_2 == [1])
	{
		piecenum = lfirept2;
		return (0);
	}
	if (gun_2 == [2])
	{
		piecenum = rfirept1;
		return (0);
	}
	if (gun_2 == [3])
	{
		piecenum = rfirept2;
		return (0);
	}		
}

AimSecondary(heading, pitch)
{
	// do the aim check with extended tolerance
	call-script updateAimHelper1(heading,pitch,<150>,<150>,HEADING_TOLERANCE*2,PITCH_TOLERANCE*5);
	signal SIG_AIM;
	set-signal-mask SIG_AIM;
	bAiming = TRUE;

	turn torso to y-axis heading speed <150.000000>;
	if (!aimReady1)
	{
		wait-for-turn torso around y-axis;
	}
	start-script RestoreAfterDelay();
	return (1);
}

Shot2()
{
	if(gun_2 == [0])
	{
		emit-sfx 1024+1 from lfirept1;
		sleep 50;
		gun_2 = [1];
		return (0);
	}
	if(gun_2 == [1])
	{
		emit-sfx 1024+1 from lfirept2;
		sleep 50;
		gun_2 = [2];
		return (0);
	}
	if(gun_2 == [2])
	{
		emit-sfx 1024+1 from rfirept1;
		sleep 50;
		gun_2 = [3];
		return (0);
	}
	if(gun_2 == [3])
	{
		emit-sfx 1024+1 from rfirept2;
		sleep 50;
		gun_2 = [0];
		return (0);
	}		
}


AimTertiary(heading, pitch)
{
	return (1);
}

FireTertiary()
{
	emit-sfx 1024 from mfirept;
	move missile to y-axis [-6] now;
	sleep 3000;
	move missile to y-axis [0] speed [12];
	return (1);
}


AimFromTertiary(piecenum)
{
	piecenum = launcher;
	return (0);
}

QueryTertiary(piecenum)
{
	piecenum = mfirept;

	return (0);
}

Killed(severity, corpsetype)
{
	if( severity <= 50 )
	{
		explode lloarm type SHATTER | BITMAP1;
		explode rloarm type SHATTER | BITMAP1;
		explode t2 type SHATTER | BITMAP1;
		explode torso type SHATTER | BITMAP1;
		return (1);
	}

	explode head type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
	explode lfoot type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP4;
	explode lleg type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP5;
	explode lloarm type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
	explode lthigh type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
	explode luparm type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
	explode pelvis type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP4;
	explode rfoot type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
	explode rleg type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
	explode rloarm type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
	explode rthigh type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP4;
	explode ruparm type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP5;
	explode torso type SHATTER | EXPLODE_ON_HIT | BITMAP1;
	return (2);
}
