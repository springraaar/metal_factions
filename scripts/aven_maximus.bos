#define TA			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"

#define SPEEDUP_FACTOR	60

#define HEADING_TOLERANCE	<25>
#define PITCH_TOLERANCE		<15>


piece  lflare,rflare, torso, hips, lthigh, rthigh, rleg, lleg, rfoot, head, luparm, lgunbase, lgunshaft, ruparm, rgunbase, rgunshaft, rshoulder, lshoulder,
       larm, rarm, lfoot, lgunbarrel, rgunbarrel, lmflare, rmflare, lbdoor1,lbdoor2,rbdoor1,rbdoor2;

static-var  gun_1, gun_2, bMoving, bAiming, mATurnSpd1,mATurnSpd2,mATurnSpd3,mASpdFactor, mAMoveSpd1, mAVertFactor, legAngle1, legAngle2, legAngle3;

#include "aimhelper1.h"

// Signal definitions
#define SIG_AIM				2


MotionSpeedControl(maxSpeed,currentSpeed)
{
	maxSpeed = get MAX_SPEED;
	currentSpeed = 0;
	mASpdFactor = SPEEDUP_FACTOR;

	
	while(TRUE)
	{
		currentSpeed = get CURRENT_SPEED;
		mASpdFactor = SPEEDUP_FACTOR * currentSpeed / maxSpeed;

		//call-script lua_cobDebug(mASpdFactor);
		if ( mASpdFactor < 30 )
		{
			mASpdFactor = 30;
		}
		
		
		mAMoveSpd1 = [15.000000] * mASpdFactor / 100;
		mATurnSpd1 = <285.000000> * (100 + mASpdFactor) / 200;
		mATurnSpd2 = <180.000000> * (100 + mASpdFactor) / 200;
		mATurnSpd3 = <40.000000> * (100 + mASpdFactor) / 200;

		mAVertFactor = [0.000000]-[3.000000] * mASpdFactor / SPEEDUP_FACTOR;
		legAngle1 = <38.000000>;
		legAngle2 = <25.000000>;
		legAngle3 = <14.000000>;
		if ( mASpdFactor < SPEEDUP_FACTOR )
		{
			legAngle1 = legAngle1 * (SPEEDUP_FACTOR + mASpdFactor) / (2*SPEEDUP_FACTOR);
			legAngle2 = legAngle2 * (SPEEDUP_FACTOR + mASpdFactor) / (2*SPEEDUP_FACTOR);
			legAngle3 = legAngle3 * (SPEEDUP_FACTOR + mASpdFactor) / (2*SPEEDUP_FACTOR);
		}
	
		sleep 60;
	}
}


walk()
{
	var slowTurnSpd, slowTurnSpd2;

	slowTurnSpd = mATurnSpd2 / 2;
	slowTurnSpd2 = mATurnSpd2 / 9;
	
	
	// back contact point : right foot behind, left foot forward
	if( bMoving )
	{
		turn lthigh to x-axis <0.000000>-legAngle1 speed mATurnSpd1;
		turn lleg to x-axis legAngle2 speed mATurnSpd2;
		turn lfoot to x-axis <0> speed mATurnSpd3;

		turn rthigh to x-axis legAngle2 speed mATurnSpd2;
		turn rleg to x-axis legAngle3 speed mATurnSpd2;
		turn rfoot to x-axis <0.000000>-legAngle2 speed mATurnSpd1;

		move hips to y-axis mAVertFactor speed mAMoveSpd1;
		turn hips to x-axis <4.000000> speed slowTurnSpd2;
		if(!bAiming)
		{
			// turn torso left, right arm forward
			turn torso to y-axis <10.000000> speed slowTurnSpd2;
			turn lshoulder to x-axis <10.000000> speed slowTurnSpd;
			turn larm to x-axis <-10.000000> speed slowTurnSpd2;

			turn rshoulder to x-axis <-40.000000> speed slowTurnSpd;
			turn rarm to x-axis <-20.000000> speed slowTurnSpd2;
		}
		
		wait-for-turn lthigh around x-axis;
		wait-for-turn rthigh around x-axis;
		wait-for-turn lleg around x-axis;
		wait-for-turn rleg around x-axis;
	}

	// intermediate pose 2 : left stomp ground
	if( bMoving)
	{
		turn hips to x-axis <-3.000000> speed slowTurnSpd2;
		turn lfoot to x-axis legAngle3 speed mATurnSpd1*3;
		wait-for-turn lfoot around x-axis;
	}

	// passing pose 2 : right foot raising, left foot on the ground
	if( bMoving )
	{
		turn lthigh to x-axis <0.000000> speed mATurnSpd2;
		turn lleg to x-axis <0.000000> speed mATurnSpd2;
		turn lfoot to x-axis <0.000000> speed mATurnSpd3;

		turn rthigh to x-axis <-20.000000> speed mATurnSpd2;
		turn rleg to x-axis <30.000000> speed mATurnSpd2;
		turn rfoot to x-axis <10.000000> speed mATurnSpd1;

		if(!bAiming)
		{
			// restore position
			turn torso to y-axis <0.000000> speed slowTurnSpd2;
			turn lshoulder to x-axis <-15.000000> speed slowTurnSpd;
			turn larm to x-axis <-15.000000> speed slowTurnSpd2;
			turn rshoulder to x-axis <-15.000000> speed slowTurnSpd;
			turn rarm to x-axis <-15.000000> speed slowTurnSpd2;

		}

		move hips to y-axis [0.000000] speed mAMoveSpd1;
		turn hips to x-axis <0.000000> speed slowTurnSpd2;		
		
		wait-for-turn lthigh around x-axis;
		wait-for-turn rthigh around x-axis;
		wait-for-turn lleg around x-axis;
		wait-for-turn rleg around x-axis;

	}
	
	// forward contact point : right foot forward, left foot behind
	if( bMoving )
	{
		turn lthigh to x-axis legAngle2 speed mATurnSpd2;
		turn lleg to x-axis legAngle3 speed mATurnSpd2;
		turn lfoot to x-axis <0>-legAngle2 speed mATurnSpd1;

		turn rthigh to x-axis <0>-legAngle1 speed mATurnSpd1;
		turn rleg to x-axis legAngle2 speed mATurnSpd2;
		turn rfoot to x-axis <0> speed mATurnSpd3;
		
		move hips to y-axis mAVertFactor speed mAMoveSpd1;
		turn hips to x-axis <4.000000> speed slowTurnSpd2;
		
		if(!bAiming)
		{
			// turn torso right, left arm forward
			turn torso to y-axis <-10.000000> speed slowTurnSpd2;
			turn lshoulder to x-axis <-40.000000> speed slowTurnSpd;
			turn larm to x-axis <-20.000000> speed slowTurnSpd2;
			turn rshoulder to x-axis <10.000000> speed slowTurnSpd;
			turn rarm to x-axis <-10.000000> speed slowTurnSpd2;
		}

		wait-for-turn lthigh around x-axis;
		wait-for-turn rthigh around x-axis;
		wait-for-turn lleg around x-axis;
		wait-for-turn rleg around x-axis;
	}

	// intermediate pose 1 : right stomp ground
	if( bMoving)
	{
		turn hips to x-axis <-2.000000> speed slowTurnSpd2;
		turn rfoot to x-axis legAngle3 speed mATurnSpd1*3;
		wait-for-turn rfoot around x-axis;
	}

	// passing pose 1 : right foot on ground, left foot raising
	if( bMoving )
	{
		turn lthigh to x-axis <-20.000000> speed mATurnSpd2;
		turn lleg to x-axis <30.000000> speed mATurnSpd2;
		turn lfoot to x-axis <10.000000> speed mATurnSpd1;
		
		turn rthigh to x-axis <0.000000> speed mATurnSpd2;
		turn rleg to x-axis <0.000000> speed mATurnSpd2;
		turn rfoot to x-axis <0.000000> speed mATurnSpd3;

		
		if(!bAiming)
		{
			// restore position
			turn torso to y-axis <0.000000> speed slowTurnSpd2;
			turn lshoulder to x-axis <-15.000000> speed slowTurnSpd;
			turn larm to x-axis <-15.000000> speed slowTurnSpd2;
			turn rshoulder to x-axis <-15.000000> speed slowTurnSpd;
			turn rarm to x-axis <-15.000000> speed slowTurnSpd2;
		}
		
		move hips to y-axis [0.000000] speed mAMoveSpd1;
		turn hips to x-axis <0.000000> speed slowTurnSpd2;
		
		wait-for-turn lthigh around x-axis;
		wait-for-turn rthigh around x-axis;
		wait-for-turn lleg around x-axis;
		wait-for-turn rleg around x-axis;
	}
	
	return;
}


SmokeUnit(healthpercent, sleeptime, smoketype)
{
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 400;
	}
	while( TRUE )
	{
		healthpercent = get HEALTH;
		if( healthpercent < 66 )
		{
			smoketype = 256 | 2;
			if( Rand( 1, 66 ) < healthpercent )
			{
				smoketype = 256 | 1;
			}
			emit-sfx smoketype from torso;
		}
		sleeptime = healthpercent * 50;
		if( sleeptime < 200 )
		{
			sleeptime = 200;
		}
		sleep sleeptime;
	}
	return (0);
}


MotionControl(moving, aiming, justmoved)
{
	justmoved = TRUE;
	while( TRUE )
	{
		moving = bMoving;
		aiming = bAiming;
		if( moving )
		{
			call-script walk();
			justmoved = TRUE;
		}
		if( !moving )
		{
			if( justMoved )
			{
				move hips to y-axis [0.000000] speed [25.000000];
				turn hips to x-axis <0.000000> speed <20.000000>;
				turn rthigh to x-axis <0.000000> speed <200.000000>;
				turn rleg to x-axis <0.000000> speed <200.000000>;
				turn lthigh to x-axis <0.000000> speed <200.000000>;
				turn lleg to x-axis <0.000000> speed <200.000000>;
				turn rfoot to x-axis <0.000000> speed <200.000000>;
				turn lfoot to x-axis <0.000000> speed <200.000000>;

				if( !aiming )
				{
					turn torso to y-axis <0.000000> speed <200.000000>;
					turn lshoulder to x-axis <-10.000000> speed <200.000000>;
					turn rshoulder to x-axis <-10.000000> speed <200.000000>;
					turn larm to x-axis <-20.000000> speed <200.000000>;
					turn rarm to x-axis <-20.000000> speed <200.000000>;
				}

				justMoved = FALSE;
			}
			sleep 100;
		}
	}
	return (0);
}

Create()
{
	bMoving = FALSE;
	bAiming = FALSE;
	gun_1 = 0;
	gun_2 = 0;
	
	call-script stopAimHelper1(<1000>,<1000>);
	start-script MotionControl();
	start-script SmokeUnit();
	start-script MotionSpeedControl();
	return (0);
}

StartMoving()
{
	bMoving = TRUE;
	return (0);
}

StopMoving()
{
	bMoving = FALSE;
	return (0);
}

RestoreAfterDelay()
{
	sleep DEFAULT_WEAPON_RESTORE_DELAY2;
	call-script stopAimHelper1(<140>,<350>);
	turn rshoulder to x-axis <0.000000> speed <350.027473>;
	turn lshoulder to x-axis <0.000000> speed <350.027473>;
	turn torso to y-axis <0.000000> speed <140.038462>;
	wait-for-turn rshoulder around x-axis;
	bAiming = FALSE;
	return (0);
}


AimPrimary(heading, pitch)
{
	call-script updateAimHelper1(heading,pitch + <90>,<250>,<250>,HEADING_TOLERANCE,PITCH_TOLERANCE);
	signal SIG_AIM;
	set-signal-mask SIG_AIM;
	bAiming = TRUE;
	
	turn rarm to x-axis <0.000000> speed <250.027473>;
	turn larm to x-axis <0.000000> speed <250.027473>;
	turn torso to y-axis heading speed <250.027473>;
	turn rshoulder to x-axis <-90.000000> - pitch speed <250.027473>;
	turn lshoulder to x-axis <-90.000000> - pitch speed <250.027473>;
	if (!aimReady1)
	{
		wait-for-turn rshoulder around x-axis;
		wait-for-turn lshoulder around x-axis;
		wait-for-turn torso around y-axis;
	}
	start-script RestoreAfterDelay();
	return (1);
}

FirePrimary()
{
	if (gun_1 == 0)
	{
		move lgunbarrel to y-axis [1.800000] now;
		emit-sfx 1024 + 0 from lflare;
		sleep 100;
		gun_1 = 1;
		move lgunbarrel to y-axis [0.000000] speed [37.500000];
	}
	else
	{
		move rgunbarrel to y-axis [1.800000] now;
		emit-sfx 1024 + 0 from rflare;
		sleep 100;
		gun_1 = 0;
		move rgunbarrel to y-axis [0.000000] speed [37.500000];
	}
	return (0);
}

AimFromPrimary(piecenum)
{
	piecenum = torso;
	return (0);
}

QueryPrimary(piecenum)
{
	if (gun_1 == 0) 
	{
		piecenum = lflare;
	}
	else
	{
		piecenum = rflare;
	}
	return (0);
}

AimSecondary(heading, pitch)
{
	return (1);
}

FireSecondary()
{
	if( gun_2 == 0 )
	{
		move lbdoor1 to z-axis [3] now;
		move lbdoor2 to z-axis [-3] now;
		emit-sfx 1024 + 1 from lmflare;
		sleep 150;
		gun_2 = 1;
		sleep 500;
		move lbdoor1 to z-axis [0] speed [3];
		move lbdoor2 to z-axis [0] speed [3];
	}
	else
	{
		move rbdoor1 to z-axis [3] now;
		move rbdoor2 to z-axis [-3] now;
		emit-sfx 1024 + 1 from rmflare;
		sleep 150;
		gun_2 = 0;
		sleep 500;
		move rbdoor1 to z-axis <0> speed [3];
		move rbdoor2 to z-axis <0> speed [3];
		
	}
	return (0);
}

AimFromSecondary(piecenum)
{
	piecenum = torso;
	return (0);
}

QuerySecondary(piecenum)
{
	if ( gun_2 == 0)
	{
		piecenum = lmflare;
	}
	else
	{
		piecenum = rmflare;
	}
	return (0);	
}

Killed(severity, corpsetype)
{
	if( severity <= 50 )
	{
		explode torso type SHATTER | EXPLODE_ON_HIT | BITMAP4;
		return (0);
	}

	explode lthigh type SHATTER | EXPLODE_ON_HIT | BITMAP4;
	explode rthigh type SHATTER | EXPLODE_ON_HIT | BITMAP4;
	explode lleg type SHATTER | EXPLODE_ON_HIT | BITMAP4;
	explode rleg type SHATTER | EXPLODE_ON_HIT | BITMAP4;
	explode luparm type SHATTER | EXPLODE_ON_HIT | BITMAP4;
	explode ruparm type SHATTER | EXPLODE_ON_HIT | BITMAP4;
	explode torso type SHATTER | EXPLODE_ON_HIT | BITMAP4;

	return (0);
}
