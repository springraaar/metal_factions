#define TA			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"

piece  base, sleeve1, turret1, barrel1, barrel2, flare1,
       flare2, wake1, wake2, torpedodrop;

static-var  gun_1, gun_2, restore_delay;

// Signal definitions
#define SIG_AIM				2
#define SIG_MOVE			8


SmokeUnit(healthpercent, sleeptime, smoketype)
{
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 400;
	}
	while( TRUE )
	{
		healthpercent = get HEALTH;
		if( healthpercent < 66 )
		{
			smoketype = 256 | 2;
			if( Rand( 1, 66 ) < healthpercent )
			{
				smoketype = 256 | 1;
			}
			emit-sfx smoketype from base;
		}
		sleeptime = healthpercent * 50;
		if( sleeptime < 200 )
		{
			sleeptime = 200;
		}
		sleep sleeptime;
	}
	return (0);
}

Create()
{
	hide flare1;
	hide flare2;
	gun_1 = [0];
	restore_delay = 3000;
	start-script SmokeUnit();
	return (0);
}

SetMaxReloadTime(Func_Var_1)
{
	restore_delay = Func_Var_1 * 2;
	return (0);
}

RestoreAfterDelay()
{
	sleep restore_delay;
	turn turret1 to y-axis <0.000000> speed <90.000000>;
	turn sleeve1 to x-axis <0.000000> speed <50.000000>;
	return (0);
}

StartMoving()
{
	signal SIG_MOVE;
	set-signal-mask SIG_MOVE;
	while( TRUE )
	{
		emit-sfx 2 from wake1;
		emit-sfx 2 from wake2;
		sleep 300;
	}
	return (0);
}

StopMoving()
{
	signal SIG_MOVE;
	return (0);
}

AimPrimary(heading, pitch)
{
	signal SIG_AIM;
	set-signal-mask SIG_AIM;
	turn turret1 to y-axis heading speed <390.000000>;
	turn sleeve1 to x-axis <0.000000> - pitch speed <350.000000>;
	wait-for-turn turret1 around y-axis;
	wait-for-turn sleeve1 around x-axis;
	start-script RestoreAfterDelay();
	return (1);
}


FirePrimary()
{
	if( gun_1 == [0] )
	{
		emit-sfx 1024 from flare1;
		sleep 50;
		gun_1=[1];
		return (0);
	}
	if( gun_1 == [1] )
	{
		emit-sfx 1024 from flare2;
		sleep 50;
		gun_1=[0];
		return (0);
	}
}

AimFromPrimary(piecenum)
{
	piecenum = turret1;
	return (0);
}

AimSecondary(heading, pitch)
{
	return (1);
}

FireSecondary()
{
	return (0);
}

AimFromSecondary(piecenum)
{
	piecenum = torpedodrop;
	return (0);
}


QueryPrimary(piecenum)
{
	if( gun_1 == [0] )
	{
		piecenum = flare1;
	}
	if( gun_1 == [1] )
	{
		piecenum = flare2;
	}
	return (0);
}

QuerySecondary(piecenum)
{
	piecenum = torpedodrop;
	return (0);
}

Killed(severity, corpsetype)
{
	hide flare1;
	hide flare2;
	if( severity <= 50 )
	{
		explode barrel1 type SHATTER;
		explode barrel2 type SHATTER;
		explode turret1 type SHATTER;
		return (1);
	}
	explode base type SHATTER;
	explode barrel1 type SHATTER;
	explode barrel2 type SHATTER;
	explode turret1 type SHATTER;
	return (2);
}