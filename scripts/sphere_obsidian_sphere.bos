#define TA			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"

piece  base, base2,sphere, turret, sleeve,flare, shieldpt;

static-var  currentHeading, currentPitch;

// Signal definitions
#define SIG_AIM				2

#define HEADING_TOLERANCE	<40.000000>
#define PITCH_TOLERANCE		<40.000000>


SmokeUnit(healthpercent, sleeptime, smoketype)
{
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 400;
	}
	while( TRUE )
	{
		healthpercent = get HEALTH;
		if( healthpercent < 66 )
		{
			smoketype = 256 | 2;
			if( Rand( 1, 66 ) < healthpercent )
			{
				smoketype = 256 | 1;
			}
			emit-sfx smoketype from base;
		}
		sleeptime = healthpercent * 50;
		if( sleeptime < 200 )
		{
			sleeptime = 200;
		}
		sleep sleeptime;
	}
}



Create()
{
	hide flare;
	currentHeading = <0>;
	currentPitch = <0>;
	start-script SmokeUnit();
}


RestoreAfterDelay()
{
	sleep DEFAULT_WEAPON_RESTORE_DELAY;
	currentHeading = <0>;
	currentPitch = <0>;
	turn turret to y-axis <0.000000> speed <90.016484>;
	turn sleeve to x-axis <0.000000> speed <50.005495>;
}

AimPrimary(heading, pitch)
{
	signal SIG_AIM;
	set-signal-mask SIG_AIM;
	turn turret to y-axis heading speed <250.038462>;
	turn sleeve to x-axis <0.000000> - pitch speed <250.000000>;
	if ( get ABS(heading - currentHeading)  > HEADING_TOLERANCE || get ABS(pitch - currentPitch) > PITCH_TOLERANCE )
	{
		wait-for-turn turret around y-axis;
		wait-for-turn sleeve around x-axis;
		currentHeading = heading;
		currentPitch = pitch;
	}
	
	start-script RestoreAfterDelay();
	return (1);
}

FirePrimary()
{
	emit-sfx 1024 + 0 from flare;
	return (0);


}

AimFromPrimary(piecenum)
{
	piecenum = turret;
}

QueryPrimary(piecenum)
{
	piecenum = flare;
}


QuerySecondary(piecenum)
{
	piecenum = shieldpt;
	return (0);
}

AimFromSecondary(piecenum)
{
	piecenum = shieldpt;
	return (0);
}

AimSecondary(heading, pitch)
{
	return (1);
}
SweetSpot(piecenum)
{
	piecenum = sphere;
}

Killed(severity, corpsetype)
{
	if( severity <= 50 )
	{
		explode sphere type SHATTER;
		return (1);
	}
	explode base2 type SHATTER;
	explode sphere type SHATTER;
	explode base type SHATTER;
	explode turret type SHATTER;
	return (2);
}
