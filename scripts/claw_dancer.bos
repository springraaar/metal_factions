#define TA			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"

#define SPEEDUP_FACTOR 200

#define HEADING_TOLERANCE	<30>
#define PITCH_TOLERANCE		<25>

piece  base, pivot, wake1, wake2, tbase, spinner, head,bottom, b2, d2, s1, s2,s3,d3, base1, base2,base3,front,front2, barrel1,barrel2,barrel3,flare1,flare2,flare3, mis1,mis2,mis3;

static-var  bAiming, bSwimming, gun_1, terrainStatus, waterSpeed, landSpeed;

#include "aimhelper1.h"

// Signal definitions
#define SIG_MOVE			2
#define SIG_AIM				4

#include "spinbot.h"


SmokeUnit(healthpercent, sleeptime, smoketype)
{
	var Func_Var_4;
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 400;
	}
	while( TRUE )
	{
		healthpercent = get HEALTH;
		if( healthpercent < 66 )
		{
			smoketype = 256 | 2;
			if( Rand( 1, 66 ) < healthpercent )
			{
				smoketype = 256 | 1;
			}
			emit-sfx smoketype from head;
		}
		sleeptime = healthpercent * 50;
		if( sleeptime < 200 )
		{
			sleeptime = 200;
		}
		sleep sleeptime;
	}
	return (0);
}

stopWheels()
{
	spin spinner around y-axis speed <240.000000>;
	return (0);
}


walk(last)
{
	last = 0;
	while ( TRUE )
	{
		
		if ( last != (wheelSpeed / 8) )
		{
			spin spinner around y-axis speed <240.000000> + wheelSpeed; // accelerate wheelAcceleration;
			last = wheelSpeed / 8;
		}
		turn pivot to x-axis pivotAngle speed <40.000000>;
		sleep 100;
	}
	return (0);
}



closelegs()
{
	// nothing to do here
	call-script stopWheels();
	sleep 100;
	return (0);
}

openlegs()
{
	// nothing to do here
	sleep 100;

	return (0);
}

swim()
{
	sleep 500;
	call-script closelegs();
	return (0);
}

MotionControl(justMoved)
{
	justMoved = TRUE;
	while( TRUE )
	{
		// over water
		if( ( !bSwimming ) AND (terrainStatus == 2 OR terrainStatus == 1))
		{
			call-script closelegs();
			bSwimming = TRUE;
			justMoved = TRUE;
		}
		// over land
		if( bSwimming AND terrainStatus == 4 )
		{
			call-script openlegs();
			bSwimming = FALSE;
			justMoved = TRUE;
		}
		if( bMoving )
		{
			if( bSwimming )
			{
				//set MAX_SPEED to waterSpeed; // REPLACED BY GADGET
				//set UPRIGHT to TRUE;
				call-script walk();
			}
			if( !bSwimming )
			{
				//set MAX_SPEED to landSpeed; // REPLACED BY GADGET
				//set UPRIGHT to FALSE;
				call-script walk();
			}
			justMoved = TRUE;
		}
		if( !bMoving )
		{
			if( justMoved AND ( !bSwimming ) )
			{
				call-script stopWheels();
	
				justMoved = FALSE;
			}
			sleep 100;
		}
	}
	return (0);
}

Create()
{
	landSpeed = get MAX_SPEED;
	waterSpeed = landSpeed * 100/150;
	//landSpeed = waterSpeed;	// same as land
	
	bMoving = FALSE;
	bAiming = FALSE;
	bSwimming = FALSE;
	
	gun_1 = 0;
	call-script stopAimHelper1(<1000>,<1000>);
	start-script MotionControl();
	start-script WheelSpeedControl();
	start-script SmokeUnit();
	return (0);
}

StartMoving()
{
	bMoving = TRUE;
	signal SIG_MOVE;
	set-signal-mask SIG_MOVE;
	while( TRUE )
	{
		if( terrainStatus == 2 )
		{
			emit-sfx 2 from wake1;
			emit-sfx 2 from wake2;
		}
		if( terrainStatus == 1 )
		{
			emit-sfx 2 from wake1;
			emit-sfx 2 from wake2;
		}
		sleep 250;
	}
	return (0);
}

StopMoving()
{
	bMoving = FALSE;
	signal SIG_MOVE;
	return (0);
}

setSFXoccupy(Func_Var_1)
{
	terrainStatus = Func_Var_1;
	return (0);
}


RestoreAfterDelay()
{
	sleep DEFAULT_WEAPON_RESTORE_DELAY;
	call-script stopAimHelper1(<160>,<160>);
	turn tbase to y-axis <0.000000> speed <160.000000>;
	//turn gun1 to x-axis <0.000000> speed <160.000000>;
	return (0);
}


AimPrimary(heading, pitch)
{
	call-script updateAimHelper1(heading,pitch,<450>,<450>,HEADING_TOLERANCE,PITCH_TOLERANCE);
	signal SIG_AIM;
	set-signal-mask SIG_AIM;
	bAiming = TRUE;
	turn tbase to y-axis heading speed <450.000000>;
	//turn sleeve to x-axis <0.000000> - pitch speed <450.000000>;
	if ( !aimReady1)
	{
		wait-for-turn tbase around y-axis;
		//wait-for-turn sleeve around x-axis;
	}

	start-script RestoreAfterDelay();
	return (1);
}


FirePrimary()
{
	if (gun_1 == 0) {
		move mis1 to z-axis [-4] now;
		emit-sfx 1024 from flare1;
		sleep 100;
		gun_1 = 1;
		sleep 2000;
		move mis1 to z-axis [0] speed [9];
		return (1);
	}
	if (gun_1 == 1) {
		move mis2 to z-axis [-4] now;
		emit-sfx 1024 from flare2;
		sleep 100;
		gun_1 = 2;
		sleep 2000;
		move mis2 to z-axis [0] speed [9];
		return (1);
	}
	if (gun_1 == 2) {
		move mis3 to z-axis [-4] now;
		emit-sfx 1024 from flare3;
		sleep 100;
		gun_1 = 0;
		sleep 2000;
		move mis3 to z-axis [0] speed [9];
		return (1);
	}
}


AimFromPrimary(piecenum)
{
	piecenum = tbase;
	return (0);
}

QueryPrimary(piecenum)
{
	if (gun_1 == 0)
	{
		piecenum = flare1;
		return (0);
	}
	if (gun_1 == 1)
	{
		piecenum = flare2;
		return (0);
	}
	if (gun_1 == 2)
	{
		piecenum = flare3;
		return (0);
	}	
}

SweetSpot(piecenum)
{
	piecenum = tbase;
	return (0);
}




Killed(severity, corpsetype)
{
	if( severity <= 50 )
	{
		explode head type SHATTER;
		explode base2 type SHATTER;
		explode base3 type SHATTER;
		return (1);
	}
	explode base2 type SHATTER;
	explode base1 type SHATTER;
	explode tbase type SHATTER;
	explode barrel1 type SHATTER;
	explode front type SHATTER;
	explode front2 type SHATTER;
	explode spinner type SHATTER;
	return (2);
}
