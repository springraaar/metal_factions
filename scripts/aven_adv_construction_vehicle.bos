#define TA			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"

#define SPEEDUP_FACTOR 140

piece  base, base2, door1, door2, plate, turret, nano1, nanospray1,nano2, nanospray2, box, walls, w1, w2, wake1, wake2, hull,bottom, rmidsup,rmidwheel,rfrontsup,rfrontwheel,rbacksup,rbackwheel,lbacksup,lbackwheel,lmidsup,lmidwheel,lfrontsup,lfrontwheel;

static-var  Static_Var_1, bBuilding, isOpen;

static-var  bMoving, nanopt, bSwimming, terrainStatus, Static_Var_8, waterSpeed, landSpeed, wheelSpeed, wheelAcceleration;


// Signal definitions
#define SIG_BUILD			2
#define SIG_MOVE			4


WheelSpeedControl(maxSpeed,currentSpeed)
{
	maxSpeed = get MAX_SPEED;
	bMoving = FALSE;
	while(TRUE)
	{
		currentSpeed = get CURRENT_SPEED;

		wheelSpeed = (currentSpeed*SPEEDUP_FACTOR) / maxSpeed * 728;
		wheelAcceleration = wheelSpeed / 2;

		sleep 100;
	}
}


Build()
{
	while(TRUE)
	{
		if( bBuilding == 1 )
		{
			emit-sfx 1024 + 0 from nanospray1;
			emit-sfx 1024 + 0 from nanospray2;
		}
		sleep 100;
	}
	return (0);
}

activatescr()
{
	if( !isOpen )
	{
		turn door1 to z-axis <0.000000> now;
		turn door1 to z-axis <-65.714286> speed <400.000000>;
		turn door2 to z-axis <0.000000> now;
		turn door2 to z-axis <65.258242> speed <400.000000>;
		sleep 230;
		move door1 to y-axis [-7.749985] speed [50.000000];
		move door2 to y-axis [-7.625000] speed [50.000000];
		sleep 230;
		move plate to y-axis [7.500000] speed [60.000000];
		sleep 230;
		isOpen = TRUE;
	}
	sleep 22;
	return (0);
}

deactivatescr()
{
	if( isOpen )
	{
		isOpen = FALSE;
		move plate to y-axis [7.500000] now;
		move door1 to y-axis [-7.749985] now;
		move door2 to y-axis [-7.625000] now;
		turn door1 to z-axis <-65.714286> now;
		turn door2 to z-axis <65.258242> now;
		sleep 220;
		move plate to y-axis [0.000000] speed [24.421585];
		sleep 389;
		move door1 to y-axis [0.000000] speed [60.000000];
		move door2 to y-axis [0.000000] speed [60.000000];
		sleep 230;
		turn door1 to z-axis <0.000000> speed <500.000000>;
		turn door2 to z-axis <0.000000> speed <500.000000>;
		sleep 130;
	}
	sleep 20;
	return (0);
}

SmokeUnit(healthpercent, sleeptime, smoketype)
{
	var Func_Var_4;
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 400;
	}
	while( TRUE )
	{
		healthpercent = get HEALTH;
		if( healthpercent < 66 )
		{
			smoketype = 256 | 2;
			if( Rand( 1, 66 ) < healthpercent )
			{
				smoketype = 256 | 1;
			}
			Func_Var_4 = Rand( 1, 2 );
			if( Func_Var_4 == 1 )
			{
				emit-sfx smoketype from door1;
			}
			if( Func_Var_4 == 2 )
			{
				emit-sfx smoketype from door2;
			}
		}
		sleeptime = healthpercent * 50;
		if( sleeptime < 200 )
		{
			sleeptime = 200;
		}
		sleep sleeptime;
	}
	return (0);
}

Go()
{
	call-script activatescr();
	turn turret to y-axis Static_Var_1 speed <480.000000>;
	wait-for-turn turret around y-axis;
	set INBUILDSTANCE to 1;
	return (0);
}

Stop()
{
	set INBUILDSTANCE to 0;
	turn turret to y-axis <0.000000> speed <480.000000>;
	wait-for-turn turret around y-axis;
	call-script deactivatescr();
	return (0);
}

stopWheels()
{
	stop-spin rmidwheel around x-axis decelerate <10.000000>;
	stop-spin rfrontwheel around x-axis decelerate <10.000000>;
	stop-spin rbackwheel around x-axis decelerate <10.000000>;
	stop-spin lmidwheel around x-axis decelerate <10.000000>;
	stop-spin lfrontwheel around x-axis decelerate <10.000000>;
	stop-spin lbackwheel around x-axis decelerate <10.000000>;
	return (0);
}

walk()
{
	if( bMoving )
	{
		spin rmidwheel around x-axis speed wheelSpeed;
		spin rfrontwheel around x-axis speed wheelSpeed;
		spin rbackwheel around x-axis speed wheelSpeed;
		spin lmidwheel around x-axis speed wheelSpeed;
		spin lfrontwheel around x-axis speed wheelSpeed;
		spin lbackwheel around x-axis speed wheelSpeed;
		sleep 200;
	}
	return (0);
}


closelegs()
{
	call-script stopWheels();
	sleep 100;
	return (0);
}

openlegs()
{
	// nothing to do here
	sleep 100;

	return (0);
}

swim()
{
	sleep 500;
	call-script closelegs();
	return (0);
}

MotionControl(justMoved)
{
	justMoved = TRUE;
	while( TRUE )
	{
		// over water
		if( ( !bSwimming ) AND (terrainStatus == 2 OR terrainStatus == 1))
		{
			call-script closelegs();
			bSwimming = TRUE;
			justMoved = TRUE;
		}
		// over land
		if( bSwimming AND terrainStatus == 4 )
		{
			call-script openlegs();
			bSwimming = FALSE;
			justMoved = TRUE;
		}
		if( bMoving )
		{
			if( bSwimming )
			{
				//set MAX_SPEED to waterSpeed; // REPLACED BY GADGET
				set UPRIGHT to TRUE;
				call-script swim();
			}
			if( !bSwimming )
			{
				//set MAX_SPEED to landSpeed; // REPLACED BY GADGET
				set UPRIGHT to FALSE;
				call-script walk();
			}
			justMoved = TRUE;
		}
		if( !bMoving )
		{
			if( justMoved AND ( !bSwimming ) )
			{
				call-script stopWheels();
	
				justMoved = FALSE;
			}
			sleep 100;
		}
	}
	return (0);
}

Create()
{
	landSpeed = get MAX_SPEED;
	waterSpeed = landSpeed * 100/150;

	bMoving = FALSE;
	bSwimming = FALSE;
	Static_Var_1 = 0;
	isOpen = FALSE;
	nanopt = [0];
	start-script WheelSpeedControl();
	start-script MotionControl();
	start-script SmokeUnit();
	start-script Build();
	return (0);
}


StartMoving()
{
	bMoving = TRUE;
	signal SIG_MOVE;
	set-signal-mask SIG_MOVE;
	while( TRUE )
	{
		if( terrainStatus == 2 )
		{
			emit-sfx 2 from wake1;
			emit-sfx 2 from wake2;
		}
		if( terrainStatus == 1 )
		{
			emit-sfx 2 from wake1;
			emit-sfx 2 from wake2;
		}
		sleep 250;
	}
	return (0);
}

StopMoving()
{
	bMoving = FALSE;
	signal SIG_MOVE;
	return (0);
}

setSFXoccupy(Func_Var_1)
{
	terrainStatus = Func_Var_1;
	return (0);
}

TargetHeading(Func_Var_1)
{
	Static_Var_1 = 0 - Func_Var_1;
	return (0);
}

StartBuilding(Func_Var_1)
{
	signal SIG_BUILD;
	Static_Var_1 = Func_Var_1;
	start-script Go();
	bBuilding = 1;
	return (0);
}

StopBuilding()
{
	set-signal-mask SIG_BUILD;
	set INBUILDSTANCE to 0;
	bBuilding = 0;
	Sleep DEFAULT_BUILDER_RESTORE_DELAY;	
	start-script Stop();
	return (0);
}

QueryNanoPiece(piecenum)
{
	if (nanopt == [0])
	{
		piecenum = nanospray1;
		return (0);
	}
	if (nanopt == [1])
	{
		piecenum = nanospray2;
		return (0);
	}	
}

Killed(severity, corpsetype)
{
	if( severity <= 50 )
	{
		explode turret type SHATTER | BITMAP2;
		explode lmidsup type SHATTER | BITMAP2;
		explode rfrontsup type SHATTER | BITMAP2;
		explode nano1 type SHATTER | BITMAP2;
		explode nano2 type SHATTER | BITMAP2;
				
		return (1);
	}
	explode turret type SHATTER | BITMAP2;
	explode lmidsup type SHATTER | BITMAP2;
	explode rfrontsup type SHATTER | BITMAP2;
	explode nano1 type SHATTER | BITMAP2;
	explode nano2 type SHATTER | BITMAP2;
	explode walls type SHATTER | BITMAP2;
	explode door1 type SHATTER | BITMAP2;
	explode door2 type SHATTER | BITMAP2;
	explode hull type SHATTER | BITMAP2;
	explode bottom type SHATTER | BITMAP2;
	explode base2 type SHATTER | BITMAP2;
	return (2);
}
