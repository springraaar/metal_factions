#define TA			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"

#define HEADING_TOLERANCE	<25>
#define PITCH_TOLERANCE		<15>

piece  base, turret, wake1, wake2, wake3, wake4, wake5, wake6, wake7, wake8, sleeve, barrel1,barrel2,flare1,flare2;

static-var  terrainType, wobbleDir, gun_1;

#include "aimhelper1.h"

// Signal definitions
#define SIG_AIM				2
#define SIG_MOVE			4



WobbleUnit()
{
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 400;
	}
	while( TRUE )
	{
		if( wobbleDir == 1 )
		{
			move base to y-axis [2.000000] speed [2.500000];
		}
		if( wobbleDir == 0 )
		{
			move base to y-axis [-2.000000] speed [2.500000];
		}
		wobbleDir = !wobbleDir;
		sleep 750;
	}
	return (0);
}


SmokeUnit(healthpercent, sleeptime, smoketype)
{
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 400;
	}
	while( TRUE )
	{
		healthpercent = get HEALTH;
		if( healthpercent < 66 )
		{
			smoketype = 256 | 2;
			if( Rand( 1, 66 ) < healthpercent )
			{
				smoketype = 256 | 1;
			}
			emit-sfx smoketype from base;
		}
		sleeptime = healthpercent * 50;
		if( sleeptime < 200 )
		{
			sleeptime = 200;
		}
		sleep sleeptime;
	}
	return (0);
}

StartMoving()
{
	signal SIG_MOVE;
	set-signal-mask SIG_MOVE;
	while( TRUE )
	{
		if( terrainType <= 2 )
		{
			//emit-sfx 5 from wake1;
			emit-sfx 5 from wake2;
			//emit-sfx 5 from wake3;
			emit-sfx 5 from wake4;
			//emit-sfx 5 from wake5;
			emit-sfx 5 from wake6;
			//emit-sfx 3 from wake7;
			emit-sfx 5 from wake8;
		}
		sleep 300;
	}
	return (0);
}

StopMoving()
{
}

setSFXoccupy(Func_Var_1)
{
	terrainType = Func_Var_1;
	return (0);
}

Create()
{
	gun_1 = 0;
	call-script stopAimHelper1(<1000>,<1000>);
	start-script WobbleUnit();
	start-script SmokeUnit();
	return (0);
}

RestoreAfterDelay()
{
	sleep DEFAULT_WEAPON_RESTORE_DELAY;
	call-script stopAimHelper1(<100>,<100>);
	turn turret to y-axis <0.000000> speed <100.000000>;
	turn sleeve to x-axis <0.000000> speed <100.000000>;
	return (0);
}

AimPrimary(heading, pitch)
{
	call-script updateAimHelper1(heading,pitch,<300>,<300>,HEADING_TOLERANCE,PITCH_TOLERANCE);
	signal SIG_AIM;
	set-signal-mask SIG_AIM;
	turn turret to y-axis heading speed <300.000000>;
	turn sleeve to x-axis <0.000000> - pitch speed <300.000000>;
	if (!aimReady1)
	{ 
		wait-for-turn turret around y-axis;
		wait-for-turn sleeve around x-axis;
	}
	start-script RestoreAfterDelay();
	return (1);
}

FirePrimary()
{
	if (gun_1 == 0)
	{
		emit-sfx 1024 + 0 from flare1;
		sleep 150;
		gun_1 = 1;
	}
	else
	{
		emit-sfx 1024 + 0 from flare2;
		sleep 150;
		gun_1 = 0;
	}
	return (0);
}

AimFromPrimary(piecenum)
{
	piecenum = turret;
	return (0);
}

QueryPrimary(piecenum)
{
	if (gun_1 == 0)
	{
		piecenum = flare1;
	}
	else
	{
		piecenum = flare2;
	}
	return (0);
}


Killed(severity, corpsetype)
{
	if( severity <= 50 )
	{
		explode barrel1 type SHATTER;
		explode barrel2 type SHATTER;
		explode sleeve type SHATTER;
		explode turret type SHATTER;
		return (1);
	}
	explode barrel1 type SHATTER;
	explode barrel2 type SHATTER;
	explode sleeve type SHATTER;
	explode turret type SHATTER;
	return (2);
}
