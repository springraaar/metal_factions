#define TAK			// This is a TAK script

#include "sfxtype.h"
#include "exptype.h"

#define SPEEDUP_FACTOR 220
#define RESTORE_DELAY	3000

#define HEADING_TOLERANCE	<25>
#define PITCH_TOLERANCE		<15>


piece  torso, luparm, larm, lgun, lnanospray, lg1,lflare1,lg2,lflare2, l1,l2,l3, ruparm, rarm, rgun, rnanospray, rg1, rflare1, rg2, rflare2, r1,r2,r3, pelvis, head, backhead, lthigh, rthigh, rleg, lleg, lfoot, rfoot, ltorpgun, ltorpflare,rtorpgun,rtorpflare, emit3, rnano, lnano, jumpback,jbl,jbr,jb,lbjetpt,rbjetpt,jumpjets,lfjet,rfjet,lfjetpt,rfjetpt;

static-var  bMoving, bBuilding, bAiming, Static_Var_5, Static_Var_6, bDgunning, bUnderwater, canAim1, canAim2, firept1, firept2, firept3, nanopt1, mASpdFactor, moveSpd1, turnSpd1, turnSpd2, turnSpd3;

#include "aimhelper1.h"

// signal definition
#define SIG_AIM		2

lua_delayReload() { return 0; }

#include "jumpvars.h"


showJumpGear() {
	show jumpback;
	show jb;
	show jbl;
	show jbr;
	show jumpjets;
	show lfjet;
	show rfjet;
}

hideJumpGear() {
	hide jumpback;
	hide jb;
	hide jbl;
	hide jbr;
	hide jumpjets;
	hide lfjet;
	hide rfjet;
}

showJumpEffects(descending, frames) {
	if (descending) {
		emit-sfx 1024+7 from lfjetpt;
		emit-sfx 1024+7 from rfjetpt;
		emit-sfx 1024+6 from lbjetpt;
		emit-sfx 1024+6 from rbjetpt;
		if (frames == JUMP_SND_FRAMES) {
			play-sound( "jumpdesc", 1 );
		}
	} else {
		if (frames == 0 ) {
			play-sound( "jumpstart", 1 );
		} else {
			if (frames == JUMP_SND_FRAMES) {
				play-sound( "jumpasc", 1 );
			}
		}
		emit-sfx 1024+5 from lfjetpt;
		emit-sfx 1024+5 from rfjetpt;
		emit-sfx 1024+4 from lbjetpt;
		emit-sfx 1024+4 from rbjetpt;
	}
}

#include "jump.h"


MotionSpeedControl(maxSpeed,currentSpeed)
{
	maxSpeed = get MAX_SPEED;
	currentSpeed = 0;
	mASpdFactor = SPEEDUP_FACTOR;
	
	while(TRUE)
	{
		currentSpeed = get CURRENT_SPEED;
		mASpdFactor = SPEEDUP_FACTOR * currentSpeed / maxSpeed;

		//call-script lua_cobDebug(mASpdFactor);
		if ( mASpdFactor < SPEEDUP_FACTOR/2 )
		{
			mASpdFactor = SPEEDUP_FACTOR/2;
		}
		
		
		moveSpd1 = [20.000000] * mASpdFactor / 100;
		turnSpd1 = <315.000000> * (100 + mASpdFactor) / 200;
		turnSpd2 = <200.000000> * (100 + mASpdFactor) / 200;
		turnSpd3 = <50.000000> * (100 + mASpdFactor) / 200;

		sleep 60;
	}
}

Sing()
{
	Static_Var_6 = Rand( 0, 9 );
	if( Static_Var_6 == 0 )
	{
		play-sound( "honk", 15 );
		play-sound( "honk", 15 );
		play-sound( "honk", 15 );
		play-sound( "honk", 15 );
		play-sound( "honk", 15 );
		return (0);
	}
	if( Static_Var_6 == 1 )
	{
		play-sound( "CorCom1", 15 );
		play-sound( "CorCom1", 15 );
		play-sound( "CorCom1", 15 );
		play-sound( "CorCom1", 15 );
		play-sound( "CorCom1", 15 );
		return (0);
	}
	if( Static_Var_6 > 1 AND Static_Var_6 < 10 )
	{
		play-sound( "sing", 15 );
		play-sound( "sing", 15 );
		play-sound( "sing", 15 );
		play-sound( "sing", 15 );
		play-sound( "sing", 15 );
		return (0);
	}
}




// shows nano effect while building
Build()
{
	while(TRUE)
	{
		if( bBuilding )
		{
			emit-sfx 1024 + 1 from lnanospray;
			emit-sfx 1024 + 1 from rnanospray;
			call-script lua_delayReload(3);
		}
		sleep 100;
	}
	return;
}

checkUnderwater()
{
	var currentHeight, oldState, i;
	while(TRUE)
	{   
 		currentHeight = GET GROUND_WATER_HEIGHT(GET UNIT_XZ);
 		oldState = bUnderwater;
		
		// check current state
		if ( currentHeight < [-30])
 		{
 			bUnderwater = TRUE;
		
 		}
 		if (currentHeight >= [-30])
 		{
 			bUnderwater = FALSE;
 		}
 		
 		// handle state changes
 		if (oldState != bUnderwater)
 		{
			if(bUnderwater)
			{
				canAim1 = FALSE;
				//hide laser stuff
				hide lg1;
				hide lg2;
				hide rg1;
				hide rg2;
 				
				// effects
				i=0;
				while(i < 5)
				{
					emit-sfx 1024+8 from lg1;
					emit-sfx 1024+8 from rg1;
					i=i+1;
					sleep 100;
				}
				
				//show torpedo stuff 			
 				show ltorpgun;
 				show rtorpgun;
 				
				// effects
				i=0;
				while(i < 5)
				{
					emit-sfx 1024+8 from ltorpgun;
					emit-sfx 1024+8 from rtorpgun;
					i=i+1;
					sleep 100;
				}

 				canAim2 = TRUE;
			}
			if(!bUnderwater)
			{
 				canAim2 = FALSE;
				//hide torpedo stuff
 				hide ltorpgun;
 				hide rtorpgun;

				// effects
				i=0;
				while(i < 5)
				{
					emit-sfx 1024+8 from ltorpgun;
					emit-sfx 1024+8 from rtorpgun;
					i=i+1;
					sleep 100;
				}
				
				//show laser stuff 			
				show lg1;
				show lg2;
				show rg1;
				show rg2;
 		
				// effects
				i=0;
				while(i < 5)
				{
					emit-sfx 1024+8 from lg1;
					emit-sfx 1024+8 from rg1;
					i=i+1;
					sleep 100;
				}
 				canAim1 = TRUE;
			}
 		}
 		
 		sleep 500;
	}
	return 0;	
}


walk()
{
	if (isJumping) {
		turn pelvis to x-axis <0.000000> speed <200.000000>;
		move pelvis to y-axis [0.000000] speed [20.500000];
		turn rthigh to x-axis <0.000000> speed <200.000000>;
		turn rleg to x-axis <0.000000> speed <200.000000>;
		turn lthigh to x-axis <0.000000> speed <200.000000>;
		turn lleg to x-axis <0.000000> speed <200.000000>;
		sleep 100;
		return;
	}
	
	if( bMoving && !isJumping)
	{
		move pelvis to y-axis [-1.750000] speed moveSpd1;
		move head to y-axis [0.000000] speed moveSpd1;
		turn pelvis to x-axis <6.692308> speed turnSpd3;
		turn lthigh to x-axis <-41.791209> speed turnSpd2;
		turn rthigh to x-axis <17.593407> speed turnSpd2;
		turn rleg to x-axis <39.390110> speed turnSpd1;
		turn lleg to x-axis <41.791209> speed turnSpd1;
		if (!bAiming) {
			turn torso to y-axis <4.192308> speed turnSpd3;
			turn ruparm to x-axis <-11.192308> speed turnSpd2;
			turn luparm to x-axis <11.192308> speed turnSpd2;
			turn lgun to x-axis <36.791209> speed turnSpd2;
			turn rgun to x-axis <36.791209> speed turnSpd2;
		}
		sleep 40 * 100 / mASpdFactor;
	}
	if( bMoving && !isJumping)
	{
		if (!bAiming) {
			turn torso to y-axis <3.890110> speed turnSpd3;
			turn ruparm to x-axis <-13.390110> speed turnSpd3;
			turn luparm to x-axis <12.291209> speed turnSpd3;
		}
		sleep 40 * 100 / mASpdFactor;
	}
	if( bMoving && !isJumping)
	{
		move pelvis to y-axis [-1.500000] speed moveSpd1;
		turn pelvis to x-axis <5.291209> speed turnSpd3;
		turn lthigh to x-axis <-29.500000> speed turnSpd2;
		turn rthigh to x-axis <8.791209> speed turnSpd2;
		turn rleg to x-axis <51.692308> speed turnSpd1;
		turn lleg to x-axis <28.500000> speed turnSpd1;
		if (!bAiming) {
			turn torso to y-axis <3.192308> speed turnSpd3;
			turn ruparm to x-axis <-8.093407> speed turnSpd3;
			turn luparm to x-axis <6.291209> speed turnSpd3;
		}
		sleep 100 * 100 / mASpdFactor;
	}
	if( bMoving && !isJumping)
	{
		move pelvis to y-axis [-0.750000] speed moveSpd1;
		turn pelvis to x-axis <4.593407> speed turnSpd3;
		turn lthigh to x-axis <-16.192308> speed turnSpd2;
		turn rthigh to x-axis <0.000000> speed turnSpd2;
		turn rleg to x-axis <58.000000> speed turnSpd1;
		turn lleg to x-axis <16.192308> speed turnSpd1;
		if (!bAiming) {
			turn torso to y-axis <1.390110> speed turnSpd3;
			turn ruparm to x-axis <-3.192308> speed turnSpd3;
			turn luparm to x-axis <0.000000> speed turnSpd3;
		}
		sleep 90 * 100 / mASpdFactor;
	}
	if( bMoving && !isJumping)
	{
		move pelvis to y-axis [0.000000] speed moveSpd1;
		turn pelvis to x-axis <3.500000> speed turnSpd3;
		turn lthigh to x-axis <7.000000> speed turnSpd2;
		turn rthigh to x-axis <-6.291209> speed turnSpd2;
		turn rleg to x-axis <44.291209> speed turnSpd1;
		turn lleg to x-axis <5.593407> speed turnSpd1;
		if (!bAiming) {
			turn torso to y-axis <0.000000> speed turnSpd3;
			turn ruparm to x-axis <3.192308> speed turnSpd3;
			turn luparm to x-axis <-6.291209> speed turnSpd3;
		}
		sleep 90 * 100 / mASpdFactor;
	}
	if( bMoving && !isJumping)
	{
		move pelvis to y-axis [-0.500000] speed moveSpd1;
		turn pelvis to x-axis <4.593407> speed turnSpd3;
		turn lthigh to x-axis <10.890110> speed turnSpd2;
		turn rthigh to x-axis <-34.500000> speed turnSpd2;
		turn rleg to x-axis <71.390110> speed turnSpd1;
		turn lleg to x-axis <20.000000> speed turnSpd1;
		if (!bAiming) {
			turn torso to y-axis <-1.390110> speed turnSpd3;
			turn ruparm to x-axis <6.692308> speed turnSpd3;
			turn luparm to x-axis <-8.093407> speed turnSpd3;
		}
		sleep 80 * 100 / mASpdFactor;
	}
	if( bMoving && !isJumping)
	{
		move pelvis to y-axis [-0.750000] speed moveSpd1;
		turn lthigh to x-axis <13.000000> speed turnSpd2;
		turn rthigh to x-axis <-42.890110> speed turnSpd2;
		turn rleg to x-axis <54.500000> speed turnSpd1;
		if (!bAiming) {
			turn torso to y-axis <-2.500000> speed turnSpd3;
			turn ruparm to x-axis <8.390110> speed turnSpd3;
			turn luparm to x-axis <-9.093407> speed turnSpd3;
		}
		sleep 70 * 100 / mASpdFactor;
	}
	if( bMoving && !isJumping)
	{
		move pelvis to y-axis [-1.000000] speed moveSpd1;
		turn pelvis to x-axis <5.291209> speed turnSpd3;
		turn lthigh to x-axis <16.890110> speed turnSpd2;
		turn rthigh to x-axis <-48.192308> speed turnSpd2;
		turn rleg to x-axis <34.500000> speed turnSpd1;
		turn lleg to x-axis <20.000000> speed turnSpd1;
		if (!bAiming) {
			turn torso to y-axis <-3.192308> speed turnSpd3;
			turn ruparm to x-axis <10.192308> speed turnSpd3;
			turn luparm to x-axis <-10.192308> speed turnSpd3;
		}
		sleep 80 * 100 / mASpdFactor;
	}
	if( bMoving && !isJumping)
	{
		move pelvis to y-axis [-1.750000] speed moveSpd1;
		turn pelvis to x-axis <6.692308> speed turnSpd3;
		turn lthigh to x-axis <15.500000> speed turnSpd2;
		turn rthigh to x-axis <-40.390110> speed turnSpd2;
		turn rleg to x-axis <40.390110> speed turnSpd1;
		turn lleg to x-axis <30.593407> speed turnSpd1;
		if (!bAiming) {
			turn torso to y-axis <-4.192308> speed turnSpd3;
			turn ruparm to x-axis <11.192308> speed turnSpd3;
			turn luparm to x-axis <-11.192308> speed turnSpd3;
		}
		sleep 40 * 100 / mASpdFactor;
	}
	if( bMoving && !isJumping)
	{
		if (!bAiming) {
			turn ruparm to x-axis <13.390110> speed turnSpd3;
			turn luparm to x-axis <-12.291209> speed turnSpd3;
		}
		sleep 40 * 100 / mASpdFactor;
	}
	if( bMoving && !isJumping)
	{
		move pelvis to y-axis [-1.500000] speed moveSpd1;
		turn pelvis to x-axis <5.291209> speed turnSpd3;
		turn lthigh to x-axis <9.500000> speed turnSpd2;
		turn rthigh to x-axis <-34.500000> speed turnSpd2;
		turn lleg to x-axis <43.890110> speed turnSpd1;
		if (!bAiming) {
			turn torso to y-axis <-3.192308> speed turnSpd3;
			turn ruparm to x-axis <8.390110> speed turnSpd3;
			turn luparm to x-axis <-8.390110> speed turnSpd3;
		}
		sleep 100 * 100 / mASpdFactor;
	}
	if( bMoving && !isJumping)
	{
		move pelvis to y-axis [-0.750000] speed moveSpd1;
		turn pelvis to x-axis <4.593407> speed turnSpd3;
		turn lthigh to x-axis <0.692308> speed turnSpd2;
		turn rthigh to x-axis <-26.390110> speed turnSpd2;
		turn lleg to x-axis <54.500000> speed turnSpd1;
		if (!bAiming) {
			turn torso to y-axis <-1.791209> speed turnSpd3;
			turn ruparm to x-axis <3.192308> speed turnSpd3;
			turn luparm to x-axis <-3.192308> speed turnSpd3;
		}
		sleep 90 * 100 / mASpdFactor;
	}
	if( bMoving && !isJumping)
	{
		move pelvis to y-axis [0.000000] speed moveSpd1;
		turn pelvis to x-axis <3.500000> speed turnSpd3;
		turn lthigh to x-axis <-16.890110> speed turnSpd2;
		turn rthigh to x-axis <3.890110> speed turnSpd2;
		turn rleg to x-axis <8.093407> speed turnSpd1;
		turn lleg to x-axis <60.500000> speed turnSpd1;
		if (!bAiming) {
			turn torso to y-axis <0.000000> speed turnSpd3;
			turn ruparm to x-axis <-3.192308> speed turnSpd3;
			turn luparm to x-axis <3.890110> speed turnSpd3;
		}
		sleep 80 * 100 / mASpdFactor;
	}
	if( bMoving && !isJumping)
	{
		move pelvis to y-axis [-0.500000] speed moveSpd1;
		turn pelvis to x-axis <4.593407> speed turnSpd3;
		turn lthigh to x-axis <-29.500000> speed turnSpd2;
		turn rthigh to x-axis <10.192308> speed turnSpd2;
		turn rleg to x-axis <26.000000> speed turnSpd1;
		turn lleg to x-axis <56.291209> speed turnSpd1;
		if (!bAiming) {
			turn torso to y-axis <1.791209> speed turnSpd3;
			turn ruparm to x-axis <-6.692308> speed turnSpd3;
			turn luparm to x-axis <8.791209> speed turnSpd3;
		}
		sleep 80 * 100 / mASpdFactor;
	}
	if( bMoving && !isJumping)
	{
		move pelvis to y-axis [-0.750000] speed moveSpd1;
		turn lthigh to x-axis <-43.890110> speed turnSpd2;
		turn rthigh to x-axis <12.291209> speed turnSpd2;
		turn lleg to x-axis <55.890110> speed turnSpd1;
		if (!bAiming) {
			turn torso to y-axis <2.500000> speed turnSpd3;
			turn ruparm to x-axis <-7.000000> speed turnSpd3;
			turn luparm to x-axis <9.791209> speed turnSpd3;
		}
		sleep 70 * 100 / mASpdFactor;
	}
	if (bMoving && !isJumping) {
		move pelvis to y-axis [-1.000000] speed moveSpd1;
		turn pelvis to x-axis <5.291209> speed turnSpd3;
		turn lthigh to x-axis <-43.890110> speed turnSpd2;
		turn rthigh to x-axis <14.390110> speed turnSpd2;
		turn lleg to x-axis <25.692308> speed turnSpd1;
		if (!bAiming) {
			turn torso to y-axis <3.192308> speed turnSpd3;
			turn ruparm to x-axis <-8.791209> speed turnSpd3;
			turn luparm to x-axis <10.192308> speed turnSpd3;
		}
		sleep 80 * 100 / mASpdFactor;
	}
	return;
}



MotionControl()
{
	var moving, aiming, justMoved;
	justMoved = TRUE;
	while( TRUE )
	{
		moving = bMoving;
		aiming = bAiming;
		if( moving )
		{
			justMoved = TRUE;
			call-script walk();
		}
		if( !moving )
		{
			if( justMoved )
			{
				turn pelvis to x-axis <0.000000> speed <200.000000>;
				move pelvis to y-axis [0.000000] speed [20.500000];
				turn rthigh to x-axis <0.000000> speed <200.000000>;
				turn rleg to x-axis <0.000000> speed <200.000000>;
				turn lthigh to x-axis <0.000000> speed <200.000000>;
				turn lleg to x-axis <0.000000> speed <200.000000>;
				justMoved = FALSE;
			}
			sleep 100;
		}
	}
	return;
}

Create()
{
	//hide rflare;
	//hide lflare;
	//hide nanospray;
	//hide torpedo;
	hide ltorpgun;
	hide rtorpgun;
	bMoving = FALSE;
	bBuilding = FALSE;
	bDgunning = FALSE;
	bUnderwater = FALSE;
	canAim1 = TRUE;
	canAim2 = FALSE;
	bAiming = FALSE;
	firept1 = [0];
	firept2 = [0];
	firept3 = [0];
	nanopt1 = [0];
	call-script stopAimHelper1(<1000>,<1000>);
	start-script initJump();
	start-script MotionSpeedControl();
	start-script MotionControl();
	start-script Build();
	start-script checkUnderwater();
	return;
}

StartMoving()
{
	bMoving = TRUE;
	return;
}

StopMoving()
{
	bMoving = FALSE;
	return;
}

SweetSpot(piecenum)
{
	piecenum = torso;
	return;
}

QueryNanoPiece(piecenum)
{
	if(nanopt1 == [0])
	{
		piecenum = lnanospray;
		nanopt1 = [1];
		return;
	}
	if(nanopt1 == [1])
	{
		piecenum = rnanospray;
		nanopt1 = [0];
		return;
	}
}

RestorePosition()
{
	bDgunning = 0;
	sleep RESTORE_DELAY;
	call-script stopAimHelper1(<290>,<240>);	
	turn torso to y-axis <0.000000> speed <290.000000>;
	turn ruparm to x-axis <0.000000> speed <245.000000>;
	turn luparm to x-axis <0.000000> speed <245.000000>;
	turn rgun to x-axis <0.000000> speed <100.000000> * SPEEDUP_FACTOR / 100;
	turn lgun to x-axis <0.000000> speed <100.000000> * SPEEDUP_FACTOR / 100;

	turn larm to y-axis <0.000000> speed <150.000000>;
	turn rarm to y-axis <0.000000> speed <150.000000>;

	wait-for-turn larm around y-axis;
	wait-for-turn rarm around y-axis;

	wait-for-turn torso around y-axis;
	wait-for-turn ruparm around x-axis;
	wait-for-turn luparm around x-axis;
	wait-for-turn rgun around x-axis;
	wait-for-turn lgun around x-axis;
	bAiming = FALSE;
	return;
}

AimFromPrimary(piecenum)
{
	piecenum = torso;
	return;
}

QueryPrimary(piecenum)
{
	if(firept1 == [0])
	{
		piecenum = lflare1;
		return;
	}
	if(firept1 == [1])
	{
		piecenum = rflare1;
		return;
	}
	if(firept1 == [2])
	{
		piecenum = lflare2;
		return;
	}
	if(firept1 == [3])
	{
		piecenum = rflare2;
		return;
	}	
}

AimPrimary(heading, pitch)
{
	if( bDgunning || bBuilding || !canAim1)
	{
		sleep 100;
		return (0);
	}
	call-script updateAimHelper1(heading,pitch,<300>,<240>,HEADING_TOLERANCE,PITCH_TOLERANCE);
	signal SIG_AIM;
	set-signal-mask SIG_AIM;
	bAiming = TRUE;

	turn torso to y-axis heading speed <300.093407>;
	turn ruparm to x-axis <0.000000> - pitch speed <245.000000>;
	turn luparm to x-axis <0.000000> - pitch speed <245.000000>;
	turn rgun to x-axis <0.000000> speed <245.000000>;
	turn lgun to x-axis <0.000000> speed <245.000000>;

	turn larm to y-axis <0.000000> speed <150.000000>;
	turn rarm to y-axis <0.000000> speed <150.000000>;
	if (!aimReady1)
	{
		wait-for-turn larm around y-axis;
		wait-for-turn rarm around y-axis;
		wait-for-turn torso around y-axis;
		wait-for-turn luparm around x-axis;
		wait-for-turn ruparm around x-axis;
		wait-for-turn lgun around x-axis;
		wait-for-turn rgun around x-axis;
	}
	start-script RestorePosition();
	return (1);
}

FirePrimary()
{
	if( firept1==[0])
	{
		emit-sfx 1024 + 0 from lflare1;
		sleep 120;
		firept1=[1];
		return;
	}
	if( firept1==[1])
	{
		emit-sfx 1024 + 0 from rflare1;
		sleep 120;
		firept1=[2];
		return;
	}
	if( firept1==[2])
	{
		emit-sfx 1024 + 0 from lflare2;
		sleep 120;
		firept1=[3];
		return;
	}
	if( firept1==[3])
	{
		emit-sfx 1024 + 0 from rflare2;
		sleep 120;
		firept1=[0];
		return;
	}		
}


AimFromSecondary(piecenum)
{
	piecenum = torso;
	return;
}

QuerySecondary(piecenum)
{
	if(firept2 == [0])
	{
		piecenum = ltorpflare;
		return;
	}
	if(firept2 == [1])
	{
		piecenum = rtorpflare;
		return;	
	}
}

AimSecondary(heading, pitch)
{
	if( bDgunning || bBuilding || !canAim2)
	{
		sleep 100;
		return (0);
	}
	call-script updateAimHelper1(heading,pitch,<300>,<240>,HEADING_TOLERANCE,PITCH_TOLERANCE);
	signal SIG_AIM;
	set-signal-mask SIG_AIM;
	bAiming = TRUE;

	turn torso to y-axis heading speed <300.093407>;
	turn luparm to x-axis <0.000000> - pitch speed <245.000000>;
	turn ruparm to x-axis <0.000000> - pitch speed <245.000000>;
	turn rgun to x-axis <0.000000> speed <245.000000>;
	turn lgun to x-axis <0.000000> speed <245.000000>;
	
	turn larm to y-axis <0.000000> speed <150.000000>;
	turn rarm to y-axis <0.000000> speed <150.000000>;
	if (!aimReady1)
	{
		wait-for-turn larm around y-axis;
		wait-for-turn rarm around y-axis;
		wait-for-turn torso around y-axis;
		wait-for-turn luparm around x-axis;
		wait-for-turn ruparm around x-axis;
		wait-for-turn rgun around x-axis;
		wait-for-turn lgun around x-axis;
	}
	start-script RestorePosition();
	return (1);
}

FireSecondary()
{
	if(firept2 == [0])
	{
		sleep 10;
		firept2 = [1];
		return;
	}
	if(firept2 == [1])
	{
		sleep 10;
		firept2 = [0];
		return;	
	}
}

AimFromTertiary(piecenum)
{
	piecenum = torso;
	return;
}

QueryTertiary(piecenum)
{
	piecenum = emit3;
	return;
	//if(firept3 == [0])
	//{
		//piecenum = lflare1;
		//firept3 = [1];
		//return;
	//}
	//if(firept3 == [1])
	//{
	//	piecenum = rflare1;
	//	firept3 = [2];
	//	return;
	//}
	//if(firept3 == [2])
	//{
	//	piecenum = lflare2;
	//	firept3 = [3];
	//	return;
	//}
	//if(firept3 == [3])
	//{
	//	piecenum = rflare2;
	//	firept3 = [0];
	//	return;
	//}

}

AimTertiary(heading, pitch)
{
	signal SIG_AIM;
	set-signal-mask SIG_AIM;
	bAiming = TRUE;
	bDgunning = TRUE;

	turn torso to y-axis heading speed <300.093407>;
	turn ruparm to x-axis <0.000000> - pitch speed <245.000000>;
	turn luparm to x-axis <0.000000> - pitch speed <245.000000>;
	turn rgun to x-axis <0.000000> speed <310.000000>;
	turn lgun to x-axis <0.000000> speed <310.000000>;
	
	turn larm to y-axis <0.000000> speed <150.000000>;
	turn rarm to y-axis <0.000000> speed <150.000000>;
	wait-for-turn larm around y-axis;
	wait-for-turn rarm around y-axis;
	wait-for-turn torso around y-axis;
	wait-for-turn ruparm around x-axis;
	wait-for-turn luparm around x-axis;
	wait-for-turn rgun around x-axis;
	wait-for-turn lgun around x-axis;
	start-script RestorePosition();

	return (1);
}

Shot3(zero)
{
	//if( firept3==[0])
	//{
		emit-sfx 1024 + 2 from lflare1;
		//return;
	//}
	//if( firept3==[1])
	//{
		emit-sfx 1024 + 2 from rflare1;
		//return;
	//}
	//if( firept3==[2])
	//{
		emit-sfx 1024 + 2 from lflare2;
		//return;
	//}
	//if( firept3==[3])
	//{
		emit-sfx 1024 + 2 from rflare2;
		return;
	//}
}

StartBuilding(heading, pitch)
{
	call-script updateAimHelper1(heading,pitch,<300>,<340>,HEADING_TOLERANCE,PITCH_TOLERANCE);
	signal SIG_AIM;
	set-signal-mask SIG_AIM;
	bBuilding = TRUE;
	bAiming = TRUE;
	turn torso to y-axis heading speed <300.093407>;
	turn luparm to x-axis <0.000000> - pitch speed <350.000000>;
	turn ruparm to x-axis <0.000000> - pitch speed <350.000000>;
	turn rgun to x-axis <0.000000> speed <395.000000>;
	turn lgun to x-axis <0.000000> speed <395.000000>;

	turn larm to y-axis <30.000000> speed <300.000000>;
	turn rarm to y-axis <-30.000000> speed <300.000000>;

	wait-for-turn larm around y-axis;
	wait-for-turn rarm around y-axis;

	wait-for-turn torso around y-axis;
	wait-for-turn luparm around x-axis;
	wait-for-turn ruparm around x-axis;
	wait-for-turn lgun around x-axis;
	wait-for-turn rgun around x-axis;
	set INBUILDSTANCE to 1;
	return;
}


StopBuilding()
{
	set INBUILDSTANCE to 0;
	bBuilding = FALSE;
	signal SIG_AIM;
	set-signal-mask SIG_AIM;
	start-script RestorePosition();
	return;
}

Killed(Func_Var_1, Func_Var_2)
{
	play-sound( "VICTORY2", 60 );
	sleep 1;
	play-sound( "VICTORY2", 60 );
	return;
}
