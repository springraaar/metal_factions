#define TA			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"

#define SPEEDUP_FACTOR	100

piece  ground, pelvis, tr, tl, sc2,front,f2, rleg, rfoot, lleg, lfoot, turret, lthigh, rthigh,sleeve,barrel,flare, firept1,firept2,firept3,launcher,launcher2,fireptl2;

static-var  gun_1,isFiring, bMoving, bAiming, Static_Var_3, mATurnSpd1,mATurnSpd2,mATurnSpd3,mASpdFactor, mAMoveSpd1, mAVertFactor, legAngle1, legAngle2, legAngle3, fireHeading, unitFireHeading, fireHeat;

// Signal definitions
#define SIG_AIM				4


MotionSpeedControl(maxSpeed,currentSpeed)
{
	maxSpeed = get MAX_SPEED;
	currentSpeed = 0;
	mASpdFactor = SPEEDUP_FACTOR;
	
	while(TRUE)
	{
		currentSpeed = get CURRENT_SPEED;
		mASpdFactor = SPEEDUP_FACTOR * currentSpeed / maxSpeed;

		//call-script lua_cobDebug(mASpdFactor);
		if ( mASpdFactor < SPEEDUP_FACTOR/2 )
		{
			mASpdFactor = SPEEDUP_FACTOR/2;
		}
		
		
		mAMoveSpd1 = [20.000000] * mASpdFactor / 100;
		mATurnSpd1 = <235.000000> * (100 + mASpdFactor) / 200;
		mATurnSpd2 = <110.000000> * (100 + mASpdFactor) / 200;
		mATurnSpd3 = <30.000000> * (100 + mASpdFactor) / 200;

		mAVertFactor = [0.000000]-[1.500000] * mASpdFactor / SPEEDUP_FACTOR;
		legAngle1 = <30.000000>;
		legAngle2 = <15.000000>;
		legAngle3 = <10.000000>;
		if ( mASpdFactor < SPEEDUP_FACTOR )
		{
			legAngle1 = legAngle1 * (SPEEDUP_FACTOR + mASpdFactor) / (2*SPEEDUP_FACTOR);
			legAngle2 = legAngle2 * (SPEEDUP_FACTOR + mASpdFactor) / (2*SPEEDUP_FACTOR);
			legAngle3 = legAngle3 * (SPEEDUP_FACTOR + mASpdFactor) / (2*SPEEDUP_FACTOR);

		}
	
		sleep 60;
	}
}


SmokeUnit(healthpercent, sleeptime, smoketype)
{
	var Func_Var_4;
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 400;
	}
	while( TRUE )
	{
		healthpercent = get HEALTH;
		if( healthpercent < 66 )
		{
			smoketype = 256 | 2;
			if( Rand( 1, 66 ) < healthpercent )
			{
				smoketype = 256 | 1;
			}
			emit-sfx smoketype from turret;
		}
		sleeptime = healthpercent * 50;
		if( sleeptime < 200 )
		{
			sleeptime = 200;
		}
		sleep sleeptime;
	}
	return (0);
}

walk()
{
	var slowTurnSpd, slowTurnSpd2;

	slowTurnSpd = mATurnSpd2 / 4;
	slowTurnSpd2 = mATurnSpd2 / 12;
	
	
	// back contact point : right foot behind, left foot forward
	if( bMoving )
	{
		turn lthigh to x-axis <0.000000>-legAngle1 speed mATurnSpd1;
		turn lleg to x-axis legAngle2 speed mATurnSpd2;
		turn lfoot to x-axis <0> speed mATurnSpd3;

		turn rthigh to x-axis legAngle2 speed mATurnSpd2;
		turn rleg to x-axis legAngle3 speed mATurnSpd2;
		turn rfoot to x-axis <0.000000>-legAngle2 speed mATurnSpd1;

		move pelvis to y-axis mAVertFactor speed mAMoveSpd1;
		turn pelvis to x-axis <4.000000> speed slowTurnSpd2;
		if(!bAiming)
		{
			// turn torso left, right arm forward
			turn turret to y-axis <10.000000> speed slowTurnSpd2;
		}
		
		wait-for-turn lthigh around x-axis;
		wait-for-turn rthigh around x-axis;
		wait-for-turn lleg around x-axis;
		wait-for-turn rleg around x-axis;
	}

	// intermediate pose 2 : left stomp ground
	if( bMoving)
	{
		turn lfoot to x-axis legAngle3 speed mATurnSpd1*5;
		wait-for-turn lfoot around x-axis;
	}

	// passing pose 2 : right foot raising, left foot on the ground
	if( bMoving )
	{
		turn lthigh to x-axis <0.000000> speed mATurnSpd2;
		turn lleg to x-axis <0.000000> speed mATurnSpd2;
		turn lfoot to x-axis <0.000000> speed mATurnSpd3;

		turn rthigh to x-axis <-20.000000> speed mATurnSpd2;
		turn rleg to x-axis <30.000000> speed mATurnSpd2;
		turn rfoot to x-axis <10.000000> speed mATurnSpd1;

		if(!bAiming)
		{
			// restore position
			turn turret to y-axis <0.000000> speed slowTurnSpd2;
			//turn rloarm to x-axis <-15.000000> speed slowTurnSpd2;

		}

		move pelvis to y-axis [0.000000] speed mAMoveSpd1;
		turn pelvis to x-axis <0.000000> speed slowTurnSpd2;		
		
		wait-for-turn lthigh around x-axis;
		wait-for-turn rthigh around x-axis;
		wait-for-turn lleg around x-axis;
		wait-for-turn rleg around x-axis;

	}
	
	// forward contact point : right foot forward, left foot behind
	if( bMoving )
	{
		turn lthigh to x-axis legAngle2 speed mATurnSpd2;
		turn lleg to x-axis legAngle3 speed mATurnSpd2;
		turn lfoot to x-axis <0>-legAngle2 speed mATurnSpd1;

		turn rthigh to x-axis <0>-legAngle1 speed mATurnSpd1;
		turn rleg to x-axis legAngle2 speed mATurnSpd2;
		turn rfoot to x-axis <0> speed mATurnSpd3;
		
		move pelvis to y-axis mAVertFactor speed mAMoveSpd1;
		turn pelvis to x-axis <4.000000> speed slowTurnSpd2;
		
		if(!bAiming)
		{
			// turn torso right, left arm forward
			turn turret to y-axis <-10.000000> speed slowTurnSpd2;
		}

		wait-for-turn lthigh around x-axis;
		wait-for-turn rthigh around x-axis;
		wait-for-turn lleg around x-axis;
		wait-for-turn rleg around x-axis;
	}

	// intermediate pose 1 : right stomp ground
	if( bMoving)
	{
		turn rfoot to x-axis legAngle3 speed mATurnSpd1*5;
		wait-for-turn rfoot around x-axis;
	}

	// passing pose 1 : right foot on ground, left foot raising
	if( bMoving )
	{
		turn lthigh to x-axis <-20.000000> speed mATurnSpd2;
		turn lleg to x-axis <30.000000> speed mATurnSpd2;
		turn lfoot to x-axis <10.000000> speed mATurnSpd1;
		
		turn rthigh to x-axis <0.000000> speed mATurnSpd2;
		turn rleg to x-axis <0.000000> speed mATurnSpd2;
		turn rfoot to x-axis <0.000000> speed mATurnSpd3;

		
		if(!bAiming)
		{
			// restore position
			turn turret to y-axis <0.000000> speed slowTurnSpd2;
			//turn rloarm to x-axis <-15.000000> speed slowTurnSpd2;
		}
		
		move pelvis to y-axis [0.000000] speed mAMoveSpd1;
		turn pelvis to x-axis <0.000000> speed slowTurnSpd2;
		
		wait-for-turn lthigh around x-axis;
		wait-for-turn rthigh around x-axis;
		wait-for-turn lleg around x-axis;
		wait-for-turn rleg around x-axis;
	}
	
	return;
}


MotionControl(moving, aiming, justmoved)
{
	justmoved = TRUE;
	while( TRUE )
	{
		moving = bMoving;
		aiming = bAiming;
		if( moving )
		{
			if( aiming )
			{
				call-script walk();
			}
			if( !aiming )
			{
				call-script walk();
			}
			justmoved = TRUE;
		}
		if( !moving )
		{
			if( justmoved )
			{
				move pelvis to y-axis [0.000000] speed [0.002777];
				turn pelvis to x-axis <0.000000> speed <100.000000>;
				turn rthigh to x-axis <0.000000> speed <200.000000>;
				turn rleg to x-axis <0.000000> speed <200.000000>;
				turn rfoot to x-axis <0.000000> speed <200.000000>;
				turn lthigh to x-axis <0.000000> speed <200.000000>;
				turn lleg to x-axis <0.000000> speed <200.000000>;
				turn lfoot to x-axis <0.000000> speed <200.000000>;
				
				if( !aiming )
				{
					turn turret to y-axis <0.000000> speed <30.000000>;
					turn sleeve to x-axis <0.000000> speed <30.000000>;
				}
				justmoved = FALSE;
			}
			sleep 100;
		}
	}
	return (0);
}


RestoreAfterDelay(setMask)
{
	if (setMask) {
		set-signal-mask SIG_AIM;
	}
	sleep DEFAULT_WEAPON_RESTORE_DELAY;
	turn turret to y-axis <0.000000> speed <60.000000>;
	turn sleeve to x-axis <0.000000> speed <45.000000>;
	wait-for-turn turret around y-axis;
	wait-for-turn sleeve around x-axis;
	bAiming = FALSE;
	return (0);
}
AimLock() 
{
	var heading;
	while(TRUE) {
		// override aim when firing to compensate for the body orientation if the unit turns
		if (isFiring) {
			heading = (get HEADING);
			if (heading != unitFireHeading) {
				turn turret to y-axis (fireHeading - heading + unitFireHeading) speed <360.000000>;
				start-script RestoreAfterDelay(TRUE);
			}
		}
		sleep 30;
	}
}

Create()
{
	bMoving = FALSE;
	bAiming = FALSE;
	isFiring = FALSE;
	fireHeat = 0;
	fireHeading = <0>;
	unitFireHeading = <0>;
	gun_1=0;
	start-script MotionControl();
	start-script SmokeUnit();
	start-script MotionSpeedControl();
	start-script AimLock();
	return (0);
}

StartMoving()
{
	bMoving = TRUE;
	return (0);
}

StopMoving()
{
	bMoving = FALSE;
	return (0);
}

SweetSpot(piecenum)
{
	piecenum = turret;
	return (0);
}



AimFromPrimary(piecenum)
{
	piecenum = turret;
	return (0);
}

QueryPrimary(piecenum)
{
	piecenum = flare;
}

AimPrimary(heading, pitch)
{
	signal SIG_AIM;
	set-signal-mask SIG_AIM;
	if (isFiring) {
		return (0);
	}
	
	bAiming = TRUE;
	turn turret to y-axis heading speed <70.000000>;
	turn sleeve to x-axis <0.000000> - pitch speed <70.000000>;
	wait-for-turn turret around y-axis;
	wait-for-turn sleeve around x-axis;
	fireHeading = heading;
	

	start-script RestoreAfterDelay();
	return (1);
}

FirePrimary()
{
	emit-sfx 1024+0 from flare;
	unitFireHeading = get HEADING;
	isFiring = TRUE;
	fireHeat = 80;
	while( fireHeat > 0 )
	{
		fireHeat = fireHeat - 1;
		if (fireHeat < 50) 
		{
			isFiring = FALSE;
		}
		
		if (fireHeat > 30) 
		{
			emit-sfx 1024+1 from flare;
		}
		else if (fireHeat > 15) 
		{
			emit-sfx 1024+2 from flare;
		}
		else
		{
			emit-sfx 1024+3 from flare;
		}
		sleep 60;
	}
	return;
}



AimSecondary(heading, pitch)
{
	return (1);
}

FireSecondary()
{
	if (gun_1 == 0) {
		emit-sfx 1024+4 from firept1;
		sleep 100;
		gun_1 = 1;
		return (1);
	}
	if (gun_1 == 1) {
		emit-sfx 1024+4 from firept2;
		sleep 100;
		gun_1 = 2;
		return (1);
	}
	if (gun_1 == 2) {
		emit-sfx 1024+4 from firept3;
		sleep 100;
		gun_1 = 0;
		return (1);
	}
}


AimFromSecondary(piecenum)
{
	piecenum = launcher;
	return (0);
}

QuerySecondary(piecenum)
{
	if (gun_1 == 0) {
		piecenum = firept1;
	}
	if (gun_1 == 1) {
		piecenum = firept2;
	}
	if (gun_1 == 2) {
		piecenum = firept3;
	}

	return (0);
}


AimTertiary(heading, pitch)
{
	return (1);
}

FireTertiary()
{
	emit-sfx 1024+4 from fireptl2;
	return (1);
}


AimFromTertiary(piecenum)
{
	piecenum = launcher2;
	return (0);
}

QueryTertiary(piecenum)
{
	piecenum = fireptl2;

	return (0);
}


Killed(severity, corpsetype)
{
	if( severity <= 50 )
	{
		explode front type SHATTER | BITMAP1;
		explode f2 type SHATTER | BITMAP1;
		explode turret type SHATTER | BITMAP1;
		return (1);
	}
	explode lfoot type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP4;
	explode lleg type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP5;
	explode lthigh type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
	explode pelvis type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP4;
	explode rfoot type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
	explode rleg type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
	explode rthigh type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP4;
	explode turret type SHATTER | EXPLODE_ON_HIT | BITMAP1;
	explode sleeve type SHATTER | EXPLODE_ON_HIT | BITMAP1;
	return (2);
}
