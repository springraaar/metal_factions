#define TA			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"

#define SPEEDUP_FACTOR 	80

#define HEADING_TOLERANCE	<25>
#define PITCH_TOLERANCE		<15>

piece  base, flare, turret, sleeve, barrel, t1,t2,t1cover,t2cover,body,left,right,logo, tur2, tur3,l1,r1;

#include "aimhelper1.h"

// Signal definitions
#define SIG_AIM				2

#include "tankthreads.h"

SmokeUnit(healthpercent, sleeptime, smoketype)
{
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 400;
	}
	while( TRUE )
	{
		healthpercent = get HEALTH;
		if( healthpercent < 66 )
		{
			smoketype = 256 | 2;
			if( Rand( 1, 66 ) < healthpercent )
			{
				smoketype = 256 | 1;
			}
			emit-sfx smoketype from turret;
		}
		sleeptime = healthpercent * 50;
		if( sleeptime < 200 )
		{
			sleeptime = 200;
		}
		sleep sleeptime;
	}
	return (0);
}

Create()
{
	hide flare;
	call-script stopAimHelper1(<1000>,<1000>);
	start-script SmokeUnit();
	start-script AnimateTracks();
	return (0);
}

RestoreAfterDelay()
{
	sleep DEFAULT_WEAPON_RESTORE_DELAY;
	call-script stopAimHelper1(<80>,<80>);
	turn turret to y-axis <0.000000> speed <80.000000>;
	turn sleeve to x-axis <0.000000> speed <80.000000>;
	return (0);
}

AimPrimary(heading, pitch)
{
	call-script updateAimHelper1(heading,pitch,<120>,<120>,HEADING_TOLERANCE,PITCH_TOLERANCE);
	signal SIG_AIM;
	set-signal-mask SIG_AIM;
	turn turret to y-axis heading speed <120.000000>;
	turn sleeve to x-axis <0.000000> - pitch speed <120.000000>;
	if (!aimReady1)
	{
		wait-for-turn turret around y-axis;
		wait-for-turn sleeve around x-axis;
	}
	start-script RestoreAfterDelay();
	return (1);
}

FirePrimary()
{
	move barrel to z-axis [-6.000000] now;
	emit-sfx 1024 + 0 from flare;
	sleep 150;
	move barrel to z-axis [0.000000] speed [13.500000];
	return (0);
}

AimFromPrimary(piecenum)
{
	piecenum = turret;
	return (0);
}

QueryPrimary(piecenum)
{
	piecenum = flare;
	return (0);
}

Killed(severity, corpsetype)
{
	if( severity <= 50 )
	{
		explode barrel type SHATTER;
		explode logo type SHATTER;
		return (1);
	}
	explode barrel type SHATTER;
	explode logo type SHATTER;
	explode t1cover type SHATTER;
	explode t2cover type SHATTER;
	explode left type SHATTER;
	explode right type SHATTER;
	
	return (2);
}
